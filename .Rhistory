GOF
names( Plot_lst )
Plot_df_Dev <- data.frame(Conditions = rep(names( idx_sample ),each = 2))
Plot_df_Dev
Plot_df_Dev <- data.frame(Conditions = rep( idx_sample,each = 2))
Plot_df_Dev
Plot_df_Dev$Conditions
Plot_df_Dev <- data.frame(Conditions = rep( idx_sample,each = 2))
Plot_df_Dev$Deviance_null = 0
Plot_df_Dev$Deviance_residual = 0
GOF
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance_residual[i] <- GOF$Deviances[1]
}
Plot_df_Dev
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance_residual[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance_null[i] <- GOF$Deviances[2]
Plot_df_Dev
Plot_df_Dev$Deviance = rep(c("Deviance_null","Deviance_residual"),each = length(idx_sample))
Plot_df_Dev
Plot_df_Dev <- data.frame(Conditions = rep( idx_sample,each = 2))
Plot_df_Dev$Deviance = rep(c("Deviance_null","Deviance_residual"),each = length(idx_sample))
Plot_df_Dev
Plot_df_Dev <- data.frame(Conditions = rep( idx_sample,each = 2))
Plot_df_Dev$Deviance = rep(c("Deviance_residual","Deviance_null"),each = length(idx_sample))
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2]
}
Plot_df_Dev
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
}
Plot_df_Dev
Plot_df_Dev <- data.frame(Conditions = rep( idx_sample, 2))
Plot_df_Dev$Deviance = rep(c("Deviance_residual","Deviance_explained"),each = length(idx_sample))
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
}
Plot_df_Dev
Plot_df_Dev <- data.frame(Conditions = rep( idx_sample, 2))
Plot_df_Dev$Deviance = 0
Plot_df_Dev$Class = rep(c("Residual","Explained"),each = length(idx_sample))
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
}
Plot_df_Dev
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar()
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar(stat = "identity")
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar(stat = "identity",aes(fill = Class))
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black")
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black") + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1))
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black", width = .5) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1))
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1))
Plot_df_Dev$Dof = NA
Plot_df_Dev$Dof
Plot_df_Dev
GOF
GOF$Dof[2]
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Dof_cost <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof_total <- GOF$Dof[2]
}
Plot_df_Dev
Plot_df_Dev$Dof_cost = NA
Plot_df_Dev$Dof_total = NA
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Dof_cost[c(i,i+length(idx_sample))] <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof_total[c(i,i+length(idx_sample))] <- GOF$Dof[2]
}
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance, label = Dof)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) + geom_label()
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance, label = Dof_cost)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) + geom_label()
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Dof[i] <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof[i+length(idx_sample)] <- GOF$Dof[1]
}
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance, label = Dof_cost)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) + geom_label()
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Dof[i] <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof[i+length(idx_sample)] <- GOF$Dof[1]
}
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance, label = Dof)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) + geom_label()
?geom_label
Plot_df_Dev$Deviance
Plot_df_Dev
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) + geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) + geom_label()
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) + geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1))
Plot_df_Dev$Deviance
Plot_df_Dev$lab_y_pos
Plot_df_Dev$lab_y_pos
Plot_df_Dev$Deviance
Plot_df_Dev$Deviance
Plot_df_Dev$Class
idx_residual <- 1:length(idx_sample)
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Explained_deviance_i <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- Explained_deviance_i
Plot_df_Dev$Dof[i] <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof[i+length(idx_sample)] <- GOF$Dof[1]
Plot_df_Dev$lab_y_pos[i] = Explained_deviance_i
Plot_df_Dev$lab_y_pos[i+length(idx_sample)] = Explained_deviance_i
}
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = .8) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos))
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Explained_deviance_i <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- Explained_deviance_i
Plot_df_Dev$Dof[i] <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof[i+length(idx_sample)] <- GOF$Dof[1]
Plot_df_Dev$lab_y_pos[i] =  GOF$Deviances[1] + Explained_deviance_i/2
Plot_df_Dev$lab_y_pos[i+length(idx_sample)] = GOF$Deviances[1]
}
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = .8) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos))
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Explained_deviance_i <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- Explained_deviance_i
Plot_df_Dev$Dof[i] <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof[i+length(idx_sample)] <- GOF$Dof[1]
Plot_df_Dev$lab_y_pos[i] =  GOF$Deviances[1] + Explained_deviance_i/2
Plot_df_Dev$lab_y_pos[i+length(idx_sample)] = GOF$Deviances[1]/2
}
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = .8) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos))
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos))
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos)) + scale_fill_brewer(type = "Accent")
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos)) + scale_fill_brewer(palette = "Accent")
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos)) + scale_fill_brewer(palette = "Dark2")
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos)) + scale_fill_brewer(palette = "Spectral")
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos)) + scale_fill_brewer(palette = "Spectral") + lab(tile = "Goodness of fit of logistic regression")
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos)) + scale_fill_brewer(palette = "Spectral") + labs(tile = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 2.2 + .25*length(idx_sample),height = 3)
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 2.2 + .5*length(idx_sample),height = 3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = .5) + scale_fill_brewer(palette = "Spectral") + labs(tile = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = .8) + scale_fill_brewer(palette = "Spectral") + labs(tile = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 5) + scale_fill_brewer(palette = "Spectral") + labs(tile = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 2) + scale_fill_brewer(palette = "Spectral") + labs(tile = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 3) + scale_fill_brewer(palette = "Spectral") + labs(tile = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 3) + scale_fill_brewer(palette = "Spectral") + labs(title = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3.3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 3) + scale_fill_brewer(palette = "Spectral") + labs(title = "Goodness of fit of the logistic model")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3.3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 3) + scale_fill_brewer(palette = "Spectral") + labs(title = "Goodness of fits of logistic models")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3.3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 3) + scale_fill_brewer(palette = "Spectral") + labs(title = "Goodness of fits of the logistic models")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3.3)
?m6ALogisticModel::logistic.modeling
logistic.modeling(
SE_features_added,
MCMC_iterations = 1000,
decision_method = "BPM",
top = 50,
save_dir = "LogisticModel_x"
)
SE_features_added
mcols(SE_features_added)
assay(SE_features_added)
mcols(SE_features_added)
logistic.modeling(
SE_features_added,
MCMC_iterations = 100,
decision_method = "BPM",
save_dir = "LogisticModel_x"
)
logistic.modeling(
SE_features_added,
MCMC_iterations = 100,
decision_method = "BPM",
save_dir = "LogisticModel_x"
)
logistic.modeling
group_list_default = list(
UTR5 = c("UTR5", "Pos_UTR5", "length_UTR5"),
CDS = c("CDS", "Pos_CDS", "length_CDS"),
UTR3 = c("UTR3", "Pos_UTR3", "length_UTR3"),
Exon = c("exons", "Pos_exons", "long_exon","Last_exons_50bp"),
Gene = c("Pos_Tx","length_gene_ex","length_gene_full","Isoform_num","sncRNA","lncRNA","HK_genes"),
LandMarks = c("m6Am","Start_codons","Stop_codons"),
Motif = c("AAACA","GAACA","AGACA","GGACA","AAACT","GAACT","AGACT","GGACT","AAACC","GAACC","AGACC","GGACC"),
Structure = c("struct_hybridize","struct_loop"),
Evolution = c("PC_1nt","PC_101nt","FC_1nt","FC_101nt"),
miRNA_RBP = c("HNRNPC_eCLIP", "YTHDC1_TREW", "YTHDF1_TREW", "YTHDF2_TREW", "miR_targeted_genes","TargetScan","Verified_miRtargets"),
Batch = c("GC_cont_genes","GC_cont_101bp","Intercept")
)
names(group_list_default) = c("5'UTR","CDS","3'UTR","Exon","Gene","Marks","Motif","Struc","Evolution","miRNA & RBP","Batch")
devtools::use_data(group_list_default, m6ALogisticModel)
devtools::use_data(group_list_default, "/Users/zhenwei/Documents/GitHub/m6ALogisticModel")
devtools::use_data("/Users/zhenwei/Documents/GitHub/m6ALogisticModel",group_list_default)
?devtools::use_data
setwd("/Users/zhenwei/Documents/GitHub/m6ALogisticModel")
devtools::use_data(group_list_default)
devtools::use_data(group_list_default)
?m6ALogisticModel::logistic.modeling
Feature_lst_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
miRanda = miRanda_hg19_gr,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr
)
setwd("/Users/zhenwei/Documents/GitHub/m6ALogisticModel")
eCLIP_HNRNPC_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/eCLIP_HNRNPC.rds")
devtools::use_data(eCLIP_HNRNPC_gr)
YTHDC1_TREW_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/YTHDC1_TREW_gr.rds")
devtools::use_data(YTHDC1_TREW_gr)
YTHDF1_TREW_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/YTHDF1_TREW_gr.rds")
devtools::use_data(YTHDF1_TREW_gr)
YTHDF2_TREW_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/YTHDF2_TREW_gr.rds")
devtools::use_data(YTHDF2_TREW_gr)
miR_targeted_genes_grl <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/miR_targeted_genes_grl.rds")
devtools::use_data(miR_targeted_genes_grl)
TargetScan_hg19_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/TargetScan_hg19_gr.rds")
devtools::use_data(TargetScan_hg19_gr)
verified_targets_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/verified_targets.rds")
devtools::use_data(verified_targets_gr)
HK_hg19_eids = names(readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/HK_genes_gr.rds"))
devtools::use_data(HK_hg19_eids)
knitr::opts_chunk$set(echo = TRUE)
library(m6ALogisticModel)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
source('~/Documents/GitHub/m6ALogisticModel/R/predictors.annot.R')
library(SummarizedExperiment)
RMBase2_hg19_gr <- rowRanges( SE_example )
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
mean(RMBase2_hg19_gr %over% exons(TxDb.Hsapiens.UCSC.hg19.knownGene))
RMBase2_hg19_gr <- subsetByOverlaps(RMBase2_hg19_gr,exons(TxDb.Hsapiens.UCSC.hg19.knownGene))
Num <- length(RMBase2_hg19_gr)
exbytx_hg19 <- exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by = c("tx"))
Subset_regions <- unlist( subsetByOverlaps( exbytx_hg19 , RMBase2_hg19_gr) )
Random_RRACH <-  m6ALogisticModel::Sample_sequence("RRACH", reduce( Subset_regions ), Hsapiens, N = Num) - 2
Random_A <-  m6ALogisticModel::Sample_sequence("A", reduce( Subset_regions ), Hsapiens, N = Num)
width(Random_RRACH)
library(m6ALogisticModel)
knitr::opts_chunk$set(echo = TRUE)
exbytx_hg19 <- exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by = c("tx"))
Subset_regions <- unlist( subsetByOverlaps( exbytx_hg19 , RMBase2_hg19_gr) )
Random_RRACH <-  m6ALogisticModel::Sample_sequence("RRACH", reduce( Subset_regions ), Hsapiens, N = Num) - 2
Random_A <-  m6ALogisticModel::Sample_sequence("A", reduce( Subset_regions ), Hsapiens, N = Num)
Row_Ranges <-
reduce(c(RMBase2_hg19_gr,
Random_RRACH,
Random_A))
SE <- SummarizedExperiment( matrix(rep(NA,6*length(Row_Ranges)) ,ncol = 6) )
rowRanges(SE) = Row_Ranges
library(dplyr)
GR_list <- list(RMBase2_hg19_gr,Random_RRACH,Random_A)
PhastCons_scores_all <- scores(phastCons100way.UCSC.hg19, rowRanges(SE))$scores
FitCons_scores_all <- scores(fitCons.UCSC.hg19, rowRanges(SE))$scores
for (i in 1:3) {
indx <- rowRanges(SE) %over% GR_list[[i]]
assay(SE)[indx,i] = PhastCons_scores_all[indx]
assay(SE)[indx,i+3] = FitCons_scores_all[indx]
}
colnames(SE) = paste0( rep(c("PastCons","FitCons"),
each = 3),"_",
rep(c("m6A","RRACH","A"),2) )
Plot_df <- reshape2::melt(assay(SE))
Plot_df$X_intercept = NA
cut_offs <- c(.9,.9,.9,.5,.5,.5)
for (i in 1:(2*3)){
Plot_df$X_intercept[Plot_df$Var2 == colnames(SE)[i]] <- cut_offs[i]
}
library(ggplot2)
ggplot(Plot_df) + geom_histogram(aes(x = value),fill = "grey") + facet_wrap(~Var2, nrow = 2, scales = "free_y") + theme_classic() + geom_vline(aes(xintercept = X_intercept),colour = "blue")
for(i in 1:6) {
assay(SE)[,i] <- as.numeric(assay(SE)[,i] > cut_offs[i])
}
#Calculate proportions of positive instances in Target
for(i in 1:6) {
cat( paste0(colnames(SE)[i],": ", round( mean( assay(SE)[,i],na.rm = T) ,3) , "\n"))
}
Plot_df <- reshape2::melt(assay(SE))
Plot_df$X_intercept = NA
cut_offs <- c(.9,.9,.9,.4,.4,.4)
for (i in 1:(2*3)){
Plot_df$X_intercept[Plot_df$Var2 == colnames(SE)[i]] <- cut_offs[i]
}
library(ggplot2)
ggplot(Plot_df) + geom_histogram(aes(x = value),fill = "grey") + facet_wrap(~Var2, nrow = 2, scales = "free_y") + theme_classic() + geom_vline(aes(xintercept = X_intercept),colour = "blue")
for(i in 1:6) {
assay(SE)[,i] <- as.numeric(assay(SE)[,i] > cut_offs[i])
}
#Calculate proportions of positive instances in Target
for(i in 1:6) {
cat( paste0(colnames(SE)[i],": ", round( mean( assay(SE)[,i],na.rm = T) ,3) , "\n"))
}
SE <- SummarizedExperiment( matrix(rep(NA,6*length(Row_Ranges)) ,ncol = 6) )
rowRanges(SE) = Row_Ranges
for (i in 1:3) {
indx <- rowRanges(SE) %over% GR_list[[i]]
assay(SE)[indx,i] = PhastCons_scores_all[indx]
assay(SE)[indx,i+3] = FitCons_scores_all[indx]
}
colnames(SE) = paste0( rep(c("PastCons","FitCons"),
each = 3),"_",
rep(c("m6A","RRACH","A"),2) )
Plot_df <- reshape2::melt(assay(SE))
Plot_df$X_intercept = NA
cut_offs <- c(.9,.9,.9,.4,.4,.4)
for (i in 1:(2*3)){
Plot_df$X_intercept[Plot_df$Var2 == colnames(SE)[i]] <- cut_offs[i]
}
library(ggplot2)
ggplot(Plot_df) + geom_histogram(aes(x = value),fill = "grey") + facet_wrap(~Var2, nrow = 2, scales = "free_y") + theme_classic() + geom_vline(aes(xintercept = X_intercept),colour = "blue")
for(i in 1:6) {
assay(SE)[,i] <- as.numeric(assay(SE)[,i] > cut_offs[i])
}
#Calculate proportions of positive instances in Target
for(i in 1:6) {
cat( paste0(colnames(SE)[i],": ", round( mean( assay(SE)[,i],na.rm = T) ,3) , "\n"))
}
saveRDS(SE,"SE2.rds")
SE
library(m6ALogisticModel)
library(SummarizedExperiment)
Group_list <- group_list_default[names(group_list_default) != "Evolution"]
set.seed(2)
m6ALogisticModel::logistic.modeling(SE,
save_dir = "Conservation_scores",
group_list = Group_list,
MCMC_iterations = 100000)
colnames(SE)
assay(SE)
debug(logistic.modeling)
m6ALogisticModel::logistic.modeling(SE,
save_dir = "Conservation_scores",
group_list = Group_list,
MCMC_iterations = 100000)
m6ALogisticModel::logistic.modeling(SE,
save_dir = "Conservation_scores",
group_list = Group_list,
MCMC_iterations = 100000)
Design$Y
Design
Features
SE <- m6ALogisticModel::predictors.annot(se = SE,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = BSgenome.Hsapiens.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_hg19,
HK_genes_list = HK_hg19_eids)
Feature_List_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr
)
SE <- m6ALogisticModel::predictors.annot(se = SE,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = BSgenome.Hsapiens.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_hg19,
HK_genes_list = HK_hg19_eids)
table(width(RMBase2_hg19_gr))
table(width(Random_RRACH))
width(table(Random_A))
table(width(Random_A))
table(rowRanges(SE))
table(width(rowRanges(SE)))
?reduce
Row_Ranges <-
reduce(c(RMBase2_hg19_gr,
Random_RRACH,
Random_A),min.gapwidth=0L)
table(width(Row_Ranges))
Row_Ranges <-
reduce(c(RMBase2_hg19_gr,
Random_RRACH,
Random_A), min.gapwidth=0L)
SE <- SummarizedExperiment( matrix(rep(NA,6*length(Row_Ranges)) ,ncol = 6) )
rowRanges(SE) = Row_Ranges
library(dplyr)
GR_list <- list(RMBase2_hg19_gr,Random_RRACH,Random_A)
PhastCons_scores_all <- scores(phastCons100way.UCSC.hg19, rowRanges(SE))$scores
FitCons_scores_all <- scores(fitCons.UCSC.hg19, rowRanges(SE))$scores
for (i in 1:3) {
indx <- rowRanges(SE) %over% GR_list[[i]]
assay(SE)[indx,i] = PhastCons_scores_all[indx]
assay(SE)[indx,i+3] = FitCons_scores_all[indx]
}
colnames(SE) = paste0( rep(c("PastCons","FitCons"),
each = 3),"_",
rep(c("m6A","RRACH","A"),2) )
Plot_df <- reshape2::melt(assay(SE))
Plot_df$X_intercept = NA
cut_offs <- c(.9,.9,.9,.4,.4,.4)
for (i in 1:(2*3)){
Plot_df$X_intercept[Plot_df$Var2 == colnames(SE)[i]] <- cut_offs[i]
}
library(ggplot2)
ggplot(Plot_df) + geom_histogram(aes(x = value),fill = "grey") + facet_wrap(~Var2, nrow = 2, scales = "free_y") + theme_classic() + geom_vline(aes(xintercept = X_intercept),colour = "blue")
for(i in 1:6) {
assay(SE)[,i] <- as.numeric(assay(SE)[,i] > cut_offs[i])
}
#Calculate proportions of positive instances in Target
for(i in 1:6) {
cat( paste0(colnames(SE)[i],": ", round( mean( assay(SE)[,i],na.rm = T) ,3) , "\n"))
}
Feature_List_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr
)
SE <- m6ALogisticModel::predictors.annot(se = SE,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = BSgenome.Hsapiens.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_hg19,
HK_genes_list = HK_hg19_eids)
SE <- readRDS("SE.rds")
saveRDS(SE,"SE2.rds")
getwd()
rbind(c(1,2,3))%*%cbind(c(1,2,3),c(2,3,4))
cat("Summary plots are generated.\n")
