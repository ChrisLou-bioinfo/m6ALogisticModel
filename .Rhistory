PLOT_DF$logit = 0
PLOT_DF$Cv = NA
PLOT_DF$MPIP = 0
for (i in names( Plot_lst )) {
Plot_df_i <- Plot_lst[[i]]
z_indx <- Plot_df_i$variable == "z.value"
Plot_df_i2 <- Plot_df_i[z_indx,c("X_lab","value","Cv")]
idx <- match(as.character( Plot_df_i2$X_lab ),  PLOT_DF$Predictors[PLOT_DF$Condations == i])
idx_plot_df <- idx + min(which(PLOT_DF$Condations == i)) - 1
PLOT_DF$z.statistics[idx_plot_df] <- Plot_df_i2$value
PLOT_DF$logit[idx_plot_df] <- Plot_df_i$value[!z_indx]
PLOT_DF$Cv[which(PLOT_DF$Condations == i)] <- Plot_df_i2$Cv[1]
MPIP_i <- read.csv(paste0(save_dir,"/",i,"/","marginal_posterior_inclusion_prob.csv"))
idx2 <- match(gsub("_"," ",MPIP_i$Covariate),PLOT_DF$Predictors[PLOT_DF$Condations == i])
PLOT_DF$MPIP[idx2 + min(which(PLOT_DF$Condations == i)) - 1] <- MPIP_i$MPIP[idx2]
}
PLOT_DF$Direction = "Not selected"
PLOT_DF$Direction[PLOT_DF$z.statistics > 0] = "Positive"
PLOT_DF$Direction[PLOT_DF$z.statistics < 0] = "Negative"
PLOT_DF$Direction  = factor(PLOT_DF$Direction,levels = c("Positive","Negative","Not selected"))
PLOT_DF$ABS_Z = abs(PLOT_DF$z.statistics)
MPIP <- ggplot(PLOT_DF,aes(y = Predictors, x = Condations)) + geom_tile(aes(fill = MPIP)) + theme_linedraw() +
theme(panel.grid.minor.x = element_line(linetype = 0),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1),
legend.position = "top",
legend.direction = "horizontal",
legend.box = "vertical",
legend.justification = "center",
plot.margin = margin(1,2,1,.5,"cm")) + labs(x = "Conditions") + scale_fill_continuous(low = "#fff7bc", high = "#d95f0e")
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 1 + .8*length(idx_sample),height = 1 + .2*ncol(Features))
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 2.2 + .4*length(idx_sample),height = 1 + .2*ncol(Features))
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 2.5 + .35*length(idx_sample),height = 1 + .2*ncol(Features))
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 1.5 + .25*length(idx_sample),height = 1 + .2*ncol(Features))
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 1.5 + .3*length(idx_sample),height = 1 + .2*ncol(Features))
idx_sample = idx_sample[1:2]
Plot_lst <- lapply(idx_sample,function(x) read.csv(paste0(save_dir,"/",x,"/Plot.csv")))
names( Plot_lst ) = idx_sample
Predictors <- c("Intercept" , colnames(Features) )
PLOT_DF = data.frame(
Predictors = rep(Predictors,length(Plot_lst)),
Condations = factor( rep(names( Plot_lst ),
each = length(Predictors)) ,
levels = idx_sample)
)
for(i in names(group_list)) {
PLOT_DF$Group[PLOT_DF$Predictors %in% group_list[[i]]] = i
}
PLOT_DF$Group = factor(PLOT_DF$Group, levels = names(group_list))
PLOT_DF$Predictors = gsub("_"," ",PLOT_DF$Predictors)
PLOT_DF$Predictors = factor(PLOT_DF$Predictors, levels =  gsub("_"," ",unlist( group_list )))
PLOT_DF$z.statistics = 0
PLOT_DF$logit = 0
PLOT_DF$Cv = NA
PLOT_DF$MPIP = 0
for (i in names( Plot_lst )) {
Plot_df_i <- Plot_lst[[i]]
z_indx <- Plot_df_i$variable == "z.value"
Plot_df_i2 <- Plot_df_i[z_indx,c("X_lab","value","Cv")]
idx <- match(as.character( Plot_df_i2$X_lab ),  PLOT_DF$Predictors[PLOT_DF$Condations == i])
idx_plot_df <- idx + min(which(PLOT_DF$Condations == i)) - 1
PLOT_DF$z.statistics[idx_plot_df] <- Plot_df_i2$value
PLOT_DF$logit[idx_plot_df] <- Plot_df_i$value[!z_indx]
PLOT_DF$Cv[which(PLOT_DF$Condations == i)] <- Plot_df_i2$Cv[1]
MPIP_i <- read.csv(paste0(save_dir,"/",i,"/","marginal_posterior_inclusion_prob.csv"))
idx2 <- match(gsub("_"," ",MPIP_i$Covariate),PLOT_DF$Predictors[PLOT_DF$Condations == i])
PLOT_DF$MPIP[idx2 + min(which(PLOT_DF$Condations == i)) - 1] <- MPIP_i$MPIP[idx2]
}
PLOT_DF$Direction = "Not selected"
PLOT_DF$Direction[PLOT_DF$z.statistics > 0] = "Positive"
PLOT_DF$Direction[PLOT_DF$z.statistics < 0] = "Negative"
PLOT_DF$Direction  = factor(PLOT_DF$Direction,levels = c("Positive","Negative","Not selected"))
PLOT_DF$ABS_Z = abs(PLOT_DF$z.statistics)
MPIP <- ggplot(PLOT_DF,aes(y = Predictors, x = Condations)) + geom_tile(aes(fill = MPIP)) + theme_linedraw() +
theme(panel.grid.minor.x = element_line(linetype = 0),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1),
legend.position = "top",
legend.direction = "horizontal",
legend.box = "vertical",
legend.justification = "center",
plot.margin = margin(1,2,1,.5,"cm")) + labs(x = "Conditions") + scale_fill_continuous(low = "#fff7bc", high = "#d95f0e")
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 1.5 + .3*length(idx_sample),height = 1 + .2*ncol(Features))
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 2.5 + .3*length(idx_sample),height = 1 + .2*ncol(Features))
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 2.2 + .3*length(idx_sample),height = 1 + .2*ncol(Features))
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 2.5 + .25*length(idx_sample),height = 1 + .2*ncol(Features))
if(!is.null(colnames(Target_matrix))) {
idx_sample = colnames(Target_matrix)
} else {
idx_sample = colData(se)[[sample_names_coldata]]
if(is.na(idx_sample)) stop("A index for the names of samples/coditions are required by either collumn names or first collumn of colData.")
}
Plot_lst <- lapply(idx_sample,function(x) read.csv(paste0(save_dir,"/",x,"/Plot.csv")))
names( Plot_lst ) = idx_sample
Predictors <- c("Intercept" , colnames(Features) )
PLOT_DF = data.frame(
Predictors = rep(Predictors,length(Plot_lst)),
Condations = factor( rep(names( Plot_lst ),
each = length(Predictors)) ,
levels = idx_sample)
)
for(i in names(group_list)) {
PLOT_DF$Group[PLOT_DF$Predictors %in% group_list[[i]]] = i
}
PLOT_DF$Group = factor(PLOT_DF$Group, levels = names(group_list))
PLOT_DF$Predictors = gsub("_"," ",PLOT_DF$Predictors)
PLOT_DF$Predictors = factor(PLOT_DF$Predictors, levels =  gsub("_"," ",unlist( group_list )))
PLOT_DF$z.statistics = 0
PLOT_DF$logit = 0
PLOT_DF$Cv = NA
PLOT_DF$MPIP = 0
for (i in names( Plot_lst )) {
Plot_df_i <- Plot_lst[[i]]
z_indx <- Plot_df_i$variable == "z.value"
Plot_df_i2 <- Plot_df_i[z_indx,c("X_lab","value","Cv")]
idx <- match(as.character( Plot_df_i2$X_lab ),  PLOT_DF$Predictors[PLOT_DF$Condations == i])
idx_plot_df <- idx + min(which(PLOT_DF$Condations == i)) - 1
PLOT_DF$z.statistics[idx_plot_df] <- Plot_df_i2$value
PLOT_DF$logit[idx_plot_df] <- Plot_df_i$value[!z_indx]
PLOT_DF$Cv[which(PLOT_DF$Condations == i)] <- Plot_df_i2$Cv[1]
MPIP_i <- read.csv(paste0(save_dir,"/",i,"/","marginal_posterior_inclusion_prob.csv"))
idx2 <- match(gsub("_"," ",MPIP_i$Covariate),PLOT_DF$Predictors[PLOT_DF$Condations == i])
PLOT_DF$MPIP[idx2 + min(which(PLOT_DF$Condations == i)) - 1] <- MPIP_i$MPIP[idx2]
}
PLOT_DF$Direction = "Not selected"
PLOT_DF$Direction[PLOT_DF$z.statistics > 0] = "Positive"
PLOT_DF$Direction[PLOT_DF$z.statistics < 0] = "Negative"
PLOT_DF$Direction  = factor(PLOT_DF$Direction,levels = c("Positive","Negative","Not selected"))
PLOT_DF$ABS_Z = abs(PLOT_DF$z.statistics)
Z_STAT <- ggplot(PLOT_DF,aes(x = Predictors, y = ABS_Z)) + geom_bar(stat = "identity", width = .5, colour = 0, aes(fill = Direction)) + facet_grid(Group ~ Condations,scales = "free",space = "free_y") + coord_flip() + theme_linedraw() + geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) +
theme(panel.grid.minor.x = element_line(linetype = 0),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90")) + labs(y = "Absolute values of Wald test z satistics", title = "Test statistics of logistic regression analysis") + scale_fill_manual(values = c("#1b9e77","#7570b3",NA))
ggsave(paste0(save_dir,"/","z_bar.pdf"),Z_STAT,width = 2 + 1.6*length(idx_sample),height = 1.5 + .2*ncol(Features))
##Plot logits
LOGIT <- ggplot(PLOT_DF,aes(x = Predictors, y = abs(logit))) + geom_bar(stat = "identity", width = .5, colour = 0, aes(fill = Direction)) + facet_grid(Group ~ Condations,scales = "free",space = "free_y") + coord_flip() + theme_linedraw() +
theme(panel.grid.minor.x = element_line(linetype = 0),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90")) + labs(y = "Absolute values of logit estimates", title = "Logit estimates of logistic regression analysis") + scale_fill_manual(values = c("#d95f02","#7570b3",NA))
ggsave(paste0(save_dir,"/","logit_bar.pdf"), LOGIT, width = 2 + 1.6*length(idx_sample),height = 1.5 + .2*ncol(Features))
##Plot marginal posterior inclusion probabilities (For model selection)
MPIP <- ggplot(PLOT_DF,aes(y = Predictors, x = Condations)) + geom_tile(aes(fill = MPIP)) + theme_linedraw() +
theme(panel.grid.minor.x = element_line(linetype = 0),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1),
legend.position = "top",
legend.direction = "horizontal",
legend.box = "vertical",
legend.justification = "center",
plot.margin = margin(1,2,1,.5,"cm")) + labs(x = "Conditions") + scale_fill_continuous(low = "#fff7bc", high = "#d95f0e")
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 2.2 + .25*length(idx_sample),height = 1 + .2*ncol(Features))
PLOT_DF$Predictors
Deviance_df
PLOT_DF$Predictors = factor(PLOT_DF$Predictors,levels = rev(PLOT_DF$Predictors))
##Plot marginal posterior inclusion probabilities (For model selection)
MPIP <- ggplot(PLOT_DF,aes(y = Predictors, x = Condations)) + geom_tile(aes(fill = MPIP)) + theme_linedraw() +
theme(panel.grid.minor.x = element_line(linetype = 0),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1),
legend.position = "top",
legend.direction = "horizontal",
legend.box = "vertical",
legend.justification = "center",
plot.margin = margin(1,2,1,.5,"cm")) + labs(x = "Conditions") + scale_fill_continuous(low = "#fff7bc", high = "#d95f0e")
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 2.2 + .25*length(idx_sample),height = 1 + .2*ncol(Features))
PLOT_DF$Predictors = factor(PLOT_DF$Predictors,levels = rev(PLOT_DF$Predictors))
##Plot marginal posterior inclusion probabilities (For model selection)
MPIP <- ggplot(PLOT_DF,aes(y = Predictors, x = Condations)) + geom_tile(aes(fill = MPIP)) + theme_linedraw() +
theme(panel.grid.minor.x = element_line(linetype = 0),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1),
legend.position = "top",
legend.direction = "horizontal",
legend.box = "vertical",
legend.justification = "center",
plot.margin = margin(1,2,1,.5,"cm")) + labs(x = "Conditions") + scale_fill_continuous(low = "#fff7bc", high = "#d95f0e")
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 2.2 + .25*length(idx_sample),height = 1 + .2*ncol(Features))
PLOT_DF$Predictors = factor(PLOT_DF$Predictors,levels = rev(levels( PLOT_DF$Predictors )))
##Plot marginal posterior inclusion probabilities (For model selection)
MPIP <- ggplot(PLOT_DF,aes(y = Predictors, x = Condations)) + geom_tile(aes(fill = MPIP)) + theme_linedraw() +
theme(panel.grid.minor.x = element_line(linetype = 0),
panel.grid.minor.y = element_line(colour = "grey90"),
panel.grid.major.x = element_line(colour = "grey90"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1),
legend.position = "top",
legend.direction = "horizontal",
legend.box = "vertical",
legend.justification = "center",
plot.margin = margin(1,2,1,.5,"cm")) + labs(x = "Conditions") + scale_fill_continuous(low = "#fff7bc", high = "#d95f0e")
ggsave(paste0(save_dir,"/","mpip.pdf"), MPIP, width = 2.2 + .25*length(idx_sample),height = 1 + .2*ncol(Features))
?labs
ggsave(paste0(save_dir,"/","model-selection.pdf"), MPIP, width = 2.2 + .25*length(idx_sample),height = 1 + .2*ncol(Features))
GOF <- read.csv(paste0(save_dir,"/",i,"/","Deviance_and_Dof.csv"))
GOF
names( Plot_lst )
Plot_df_Dev <- data.frame(Conditions = rep(names( idx_sample ),each = 2))
Plot_df_Dev
Plot_df_Dev <- data.frame(Conditions = rep( idx_sample,each = 2))
Plot_df_Dev
Plot_df_Dev$Conditions
Plot_df_Dev <- data.frame(Conditions = rep( idx_sample,each = 2))
Plot_df_Dev$Deviance_null = 0
Plot_df_Dev$Deviance_residual = 0
GOF
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance_residual[i] <- GOF$Deviances[1]
}
Plot_df_Dev
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance_residual[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance_null[i] <- GOF$Deviances[2]
Plot_df_Dev
Plot_df_Dev$Deviance = rep(c("Deviance_null","Deviance_residual"),each = length(idx_sample))
Plot_df_Dev
Plot_df_Dev <- data.frame(Conditions = rep( idx_sample,each = 2))
Plot_df_Dev$Deviance = rep(c("Deviance_null","Deviance_residual"),each = length(idx_sample))
Plot_df_Dev
Plot_df_Dev <- data.frame(Conditions = rep( idx_sample,each = 2))
Plot_df_Dev$Deviance = rep(c("Deviance_residual","Deviance_null"),each = length(idx_sample))
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2]
}
Plot_df_Dev
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
}
Plot_df_Dev
Plot_df_Dev <- data.frame(Conditions = rep( idx_sample, 2))
Plot_df_Dev$Deviance = rep(c("Deviance_residual","Deviance_explained"),each = length(idx_sample))
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
}
Plot_df_Dev
Plot_df_Dev <- data.frame(Conditions = rep( idx_sample, 2))
Plot_df_Dev$Deviance = 0
Plot_df_Dev$Class = rep(c("Residual","Explained"),each = length(idx_sample))
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
}
Plot_df_Dev
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar()
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar(stat = "identity")
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar(stat = "identity",aes(fill = Class))
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black")
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black") + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1))
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black", width = .5) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1))
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1))
Plot_df_Dev$Dof = NA
Plot_df_Dev$Dof
Plot_df_Dev
GOF
GOF$Dof[2]
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Dof_cost <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof_total <- GOF$Dof[2]
}
Plot_df_Dev
Plot_df_Dev$Dof_cost = NA
Plot_df_Dev$Dof_total = NA
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Dof_cost[c(i,i+length(idx_sample))] <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof_total[c(i,i+length(idx_sample))] <- GOF$Dof[2]
}
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance, label = Dof)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) + geom_label()
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance, label = Dof_cost)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) + geom_label()
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Dof[i] <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof[i+length(idx_sample)] <- GOF$Dof[1]
}
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance, label = Dof_cost)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) + geom_label()
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Dof[i] <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof[i+length(idx_sample)] <- GOF$Dof[1]
}
ggplot(Plot_df_Dev,aes(x = Conditions, y = Deviance, label = Dof)) + geom_bar(stat = "identity",aes(fill = Class), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) + geom_label()
?geom_label
Plot_df_Dev$Deviance
Plot_df_Dev
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) + geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) + geom_label()
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) + geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = .8) + theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1))
Plot_df_Dev$Deviance
Plot_df_Dev$lab_y_pos
Plot_df_Dev$lab_y_pos
Plot_df_Dev$Deviance
Plot_df_Dev$Deviance
Plot_df_Dev$Class
idx_residual <- 1:length(idx_sample)
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Explained_deviance_i <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- Explained_deviance_i
Plot_df_Dev$Dof[i] <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof[i+length(idx_sample)] <- GOF$Dof[1]
Plot_df_Dev$lab_y_pos[i] = Explained_deviance_i
Plot_df_Dev$lab_y_pos[i+length(idx_sample)] = Explained_deviance_i
}
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = .8) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos))
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Explained_deviance_i <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- Explained_deviance_i
Plot_df_Dev$Dof[i] <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof[i+length(idx_sample)] <- GOF$Dof[1]
Plot_df_Dev$lab_y_pos[i] =  GOF$Deviances[1] + Explained_deviance_i/2
Plot_df_Dev$lab_y_pos[i+length(idx_sample)] = GOF$Deviances[1]
}
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = .8) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos))
for (i in 1:length(idx_sample)) {
GOF <- read.csv(paste0(save_dir,"/",idx_sample[i],"/","Deviance_and_Dof.csv"))
Plot_df_Dev$Deviance[i] <- GOF$Deviances[1]
Explained_deviance_i <- GOF$Deviances[2] - GOF$Deviances[1]
Plot_df_Dev$Deviance[i+length(idx_sample)] <- Explained_deviance_i
Plot_df_Dev$Dof[i] <- paste0(GOF$Dof[2]-GOF$Dof[1])
Plot_df_Dev$Dof[i+length(idx_sample)] <- GOF$Dof[1]
Plot_df_Dev$lab_y_pos[i] =  GOF$Deviances[1] + Explained_deviance_i/2
Plot_df_Dev$lab_y_pos[i+length(idx_sample)] = GOF$Deviances[1]/2
}
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = .8) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos))
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos))
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos)) + scale_fill_brewer(type = "Accent")
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos)) + scale_fill_brewer(palette = "Accent")
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos)) + scale_fill_brewer(palette = "Dark2")
ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos)) + scale_fill_brewer(palette = "Spectral")
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos)) + scale_fill_brewer(palette = "Spectral") + lab(tile = "Goodness of fit of logistic regression")
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos)) + scale_fill_brewer(palette = "Spectral") + labs(tile = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 2.2 + .25*length(idx_sample),height = 3)
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 2.2 + .5*length(idx_sample),height = 3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = .5) + scale_fill_brewer(palette = "Spectral") + labs(tile = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = .8) + scale_fill_brewer(palette = "Spectral") + labs(tile = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 5) + scale_fill_brewer(palette = "Spectral") + labs(tile = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 2) + scale_fill_brewer(palette = "Spectral") + labs(tile = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 3) + scale_fill_brewer(palette = "Spectral") + labs(tile = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 3) + scale_fill_brewer(palette = "Spectral") + labs(title = "Goodness of fit of logistic regression")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3.3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 3) + scale_fill_brewer(palette = "Spectral") + labs(title = "Goodness of fit of the logistic model")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3.3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 3) + scale_fill_brewer(palette = "Spectral") + labs(title = "Goodness of fits of logistic models")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3.3)
Gof <- ggplot(Plot_df_Dev,aes(x = Conditions, label = Dof)) +
geom_bar(stat = "identity",aes(fill = Class,y = Deviance), colour = "black", width = 1) +
theme(axis.text.x = element_text(angle = 310, vjust =.9, hjust = .1)) +
geom_label(aes(y = lab_y_pos),size = 3) + scale_fill_brewer(palette = "Spectral") + labs(title = "Goodness of fits of the logistic models")
ggsave(paste0(save_dir,"/","Goodness-of-fit.pdf"), Gof, width = 1.8 + .5*length(idx_sample),height = 3.3)
?m6ALogisticModel::logistic.modeling
logistic.modeling(
SE_features_added,
MCMC_iterations = 1000,
decision_method = "BPM",
top = 50,
save_dir = "LogisticModel_x"
)
SE_features_added
mcols(SE_features_added)
assay(SE_features_added)
mcols(SE_features_added)
logistic.modeling(
SE_features_added,
MCMC_iterations = 100,
decision_method = "BPM",
save_dir = "LogisticModel_x"
)
logistic.modeling(
SE_features_added,
MCMC_iterations = 100,
decision_method = "BPM",
save_dir = "LogisticModel_x"
)
logistic.modeling
group_list_default = list(
UTR5 = c("UTR5", "Pos_UTR5", "length_UTR5"),
CDS = c("CDS", "Pos_CDS", "length_CDS"),
UTR3 = c("UTR3", "Pos_UTR3", "length_UTR3"),
Exon = c("exons", "Pos_exons", "long_exon","Last_exons_50bp"),
Gene = c("Pos_Tx","length_gene_ex","length_gene_full","Isoform_num","sncRNA","lncRNA","HK_genes"),
LandMarks = c("m6Am","Start_codons","Stop_codons"),
Motif = c("AAACA","GAACA","AGACA","GGACA","AAACT","GAACT","AGACT","GGACT","AAACC","GAACC","AGACC","GGACC"),
Structure = c("struct_hybridize","struct_loop"),
Evolution = c("PC_1nt","PC_101nt","FC_1nt","FC_101nt"),
miRNA_RBP = c("HNRNPC_eCLIP", "YTHDC1_TREW", "YTHDF1_TREW", "YTHDF2_TREW", "miR_targeted_genes","TargetScan","Verified_miRtargets"),
Batch = c("GC_cont_genes","GC_cont_101bp","Intercept")
)
names(group_list_default) = c("5'UTR","CDS","3'UTR","Exon","Gene","Marks","Motif","Struc","Evolution","miRNA & RBP","Batch")
devtools::use_data(group_list_default, m6ALogisticModel)
devtools::use_data(group_list_default, "/Users/zhenwei/Documents/GitHub/m6ALogisticModel")
devtools::use_data("/Users/zhenwei/Documents/GitHub/m6ALogisticModel",group_list_default)
?devtools::use_data
setwd("/Users/zhenwei/Documents/GitHub/m6ALogisticModel")
devtools::use_data(group_list_default)
devtools::use_data(group_list_default)
?m6ALogisticModel::logistic.modeling
Feature_lst_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
miRanda = miRanda_hg19_gr,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr
)
setwd("/Users/zhenwei/Documents/GitHub/m6ALogisticModel")
eCLIP_HNRNPC_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/eCLIP_HNRNPC.rds")
devtools::use_data(eCLIP_HNRNPC_gr)
YTHDC1_TREW_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/YTHDC1_TREW_gr.rds")
devtools::use_data(YTHDC1_TREW_gr)
YTHDF1_TREW_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/YTHDF1_TREW_gr.rds")
devtools::use_data(YTHDF1_TREW_gr)
YTHDF2_TREW_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/YTHDF2_TREW_gr.rds")
devtools::use_data(YTHDF2_TREW_gr)
miR_targeted_genes_grl <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/miR_targeted_genes_grl.rds")
devtools::use_data(miR_targeted_genes_grl)
TargetScan_hg19_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/TargetScan_hg19_gr.rds")
devtools::use_data(TargetScan_hg19_gr)
verified_targets_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/verified_targets.rds")
devtools::use_data(verified_targets_gr)
HK_hg19_eids = names(readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/HK_genes_gr.rds"))
devtools::use_data(HK_hg19_eids)
