names(row_gr_genes)[subjectHits(fol)]
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
library(meripQC)
library(m6ALogisticModel)
SE_NAIVE <- readRDS("DESEQ2.rds")
assays(SE_NAIVE)$m6Alog2FC = log2( (((assays(SE_NAIVE)$IP_count * 1e6) /colSums(assays(SE_NAIVE)$IP_count))+0.01) /
(((assays(SE_NAIVE)$input_count * 1e6) /colSums(assays(SE_NAIVE)$input_count))+0.01) )
#Mask methylation value have low gene expression.
assays(SE_NAIVE)$m6Alog2FC[assays(SE_NAIVE)$IP_count + assays(SE_NAIVE)$input_count < 50] = NA #Mask methylation value.
assays(SE_NAIVE)$m6Alog2FC[assays(SE_NAIVE)$geneExpression < 8] = NA #Mask methylation value have low gene expression.
SE_NAIVE <- SE_NAIVE[rowSums( is.na(assay(SE_NAIVE)) ) <= 15,] #Filter rows have too many missing values.
SE_NAIVE <- Reduce_correlated_rows(SE_NAIVE,"spearman",.8,101,"maxMad") #Reduce the highly correlated rows.
assays(SE_NAIVE)$m6Alog2FC = scale(
assays(SE_NAIVE)$m6Alog2FC,
scale = apply(assays(SE_NAIVE)$m6Alog2FC, 2, mad, na.rm = TRUE)
) #Standardize the collumns
Plot_column_joint(assays(SE_NAIVE)$m6Alog2FC,HDER = "NAIVE",METRIC = "euclidean",VISUAL = "dendrogram",GROUP_LABEL = SE_NAIVE$Tissue)
Plot_column_joint(assays(SE_NAIVE)$m6Alog2FC,HDER = "NAIVE",METRIC = "euclidean",VISUAL = "MDS",GROUP_LABEL = SE_NAIVE$Tissue)
Keep_top = 12000
top_indx <- order(rowMads(assays(SE_NAIVE)$m6Alog2FC,na.rm = T),decreasing = T)[1:Keep_top]
set.seed(1)
Eval_row_joint(SE_NAIVE[top_indx,],"NAIVE",K = 4)
library(meripQC)
library(m6ALogisticModel)
SE_NAIVE <- readRDS("DESEQ2.rds")
assays(SE_NAIVE)$m6Alog2FC = log2( (((assays(SE_NAIVE)$IP_count * 1e6) /colSums(assays(SE_NAIVE)$IP_count))+0.01) /
(((assays(SE_NAIVE)$input_count * 1e6) /colSums(assays(SE_NAIVE)$input_count))+0.01) )
#Mask methylation value have low gene expression.
assays(SE_NAIVE)$m6Alog2FC[assays(SE_NAIVE)$IP_count + assays(SE_NAIVE)$input_count < 50] = NA #Mask methylation value.
#assays(SE_NAIVE)$m6Alog2FC[assays(SE_NAIVE)$geneExpression < 8] = NA #Mask methylation value have low gene expression.
SE_NAIVE <- SE_NAIVE[rowSums( is.na(assay(SE_NAIVE)) ) <= 15,] #Filter rows have too many missing values.
SE_NAIVE <- Reduce_correlated_rows(SE_NAIVE,"spearman",.8,101,"maxMad") #Reduce the highly correlated rows.
assays(SE_NAIVE)$m6Alog2FC = scale(
assays(SE_NAIVE)$m6Alog2FC,
scale = apply(assays(SE_NAIVE)$m6Alog2FC, 2, mad, na.rm = TRUE)
) #Standardize the collumns
Plot_column_joint(assays(SE_NAIVE)$m6Alog2FC,HDER = "NAIVE",METRIC = "euclidean",VISUAL = "dendrogram",GROUP_LABEL = SE_NAIVE$Tissue)
Plot_column_joint(assays(SE_NAIVE)$m6Alog2FC,HDER = "NAIVE",METRIC = "euclidean",VISUAL = "MDS",GROUP_LABEL = SE_NAIVE$Tissue)
Keep_top = 12000
top_indx <- order(rowMads(assays(SE_NAIVE)$m6Alog2FC,na.rm = T),decreasing = T)[1:Keep_top]
set.seed(1)
Eval_row_joint(SE_NAIVE[top_indx,],"NAIVE",K = 4)
names(row_gr_genes)[subjectHits(fol)]
select( keys = names(row_gr_genes)[subjectHits(fol)],
keytype = "ENTREZID",
columns = "GENESYMBOL")
select( keys = names(row_gr_genes)[subjectHits(fol)],
keytype = "ENTREZID",
columns = "SYMBOL")
?select
select( org.Hs.eg.db,
keys = names(row_gr_genes)[subjectHits(fol)],
keytype = "ENTREZID",
columns = "SYMBOL")
SYMBOLs<- select( org.Hs.eg.db,
keys = names(row_gr_genes)[subjectHits(fol)],
keytype = "ENTREZID",
columns = "SYMBOL")
SYMBOLs
dim(fol)
length(subjectHits(fol))
length(SYMBOLs )
dim(SYMBOLs )
identical( SYMBOLs$ENTREZID, names(row_gr_genes)[subjectHits(fol)] )
identical( SYMBOLs$ENTREZID, names(row_gr_genes)[subjectHits(fol)] )
)
identical( SYMBOLs$ENTREZID, names(row_gr_genes)[subjectHits(fol)] )
identical( SYMBOLs$ENTREZID, names(row_gr_genes)[subjectHits(fol)] )
Background_EIDs <- names( subsetByOverlaps( row_gr_genes, row_gr_m5C ) )
identical( SYMBOLs$ENTREZID, names(row_gr_genes)[subjectHits(fol)] )
SYMBOL_LIST <- split(SYMBOLs$SYMBOL, queryHits(fol))
names(SYMBOL_LIST)
m5C_DMdf$GENE_SYMBOL <- NA
m5C_DMdf$GENE_SYMBOL[as.numeric(SYMBOL_LIST)] <- SYMBOL_LIST
m5C_DMdf$GENE_SYMBOL[as.numeric(names(SYMBOL_LIST))] <- SYMBOL_LIST
m5C_DMdf
write.csv(m5C_DMdf,"m5C_DMdf.csv")
write_tsv(m5C_DMdf,"m5C_DMdf.txt")
SYMBOL_LIST <- tapply(SYMBOLs$SYMBOL, queryHits(fol),function(x)paste0(x,collapse = ","))
m5C_DMdf$GENE_SYMBOL <- NA
m5C_DMdf$GENE_SYMBOL[as.numeric(names(SYMBOL_LIST))] <- SYMBOL_LIST
library(readr)
write_tsv(m5C_DMdf,"m5C_DMdf.txt")
assay(se_m5C_virus_filtered)
colData(se_m5C_virus_filtered)
colnames(se_m5C_virus_filtered) = paste0(colData(se_m5C_virus_filtered)$Design,"rep",rep(c(1,2),3))
colnames(se_m5C_virus_filtered)
colnames(se_m5C_virus_filtered) = paste0(colData(se_m5C_virus_filtered)$Design,"_rep",rep(c(1,2),3))
m5C_DMdf <-  cbind(rowRanges(se_m5C_virus_filtered),assay(se_m5C_virus_filtered),
QNB_result_1[,-1])
head(m5C_DMdf)
m5C_DMdf <-  cbind(rowRanges(se_m5C_virus_filtered),assay(se_m5C_virus_filtered)[,-1*c(1,2)],  QNB_result_1[,-1])
fol <- findOverlaps(row_gr_m5C,row_gr_genes)
library(org.Hs.eg.db)
SYMBOLs <- select( org.Hs.eg.db,
keys = names(row_gr_genes)[subjectHits(fol)],
keytype = "ENTREZID",
columns = "SYMBOL")
identical( SYMBOLs$ENTREZID, names(row_gr_genes)[subjectHits(fol)] )
SYMBOL_LIST <- tapply(SYMBOLs$SYMBOL, queryHits(fol),function(x)paste0(x,collapse = ","))
m5C_DMdf$GENE_SYMBOL <- NA
m5C_DMdf$GENE_SYMBOL[as.numeric(names(SYMBOL_LIST))] <- SYMBOL_LIST
library(readr)
write_tsv(m5C_DMdf,"m5C_DMdf.txt")
write_tsv(na.omit(m5C_DMdf),"m5C_DMdf.txt")
names(assays(se_m5C_virus_filtered))
se_m5C_virus_filtered <- readRDS("se_m5C_virus_significant.rds")
colnames(assays(se_m5C_virus_filtered)[[1]]) = paste0(colData(se_m5C_virus_filtered)$Design,"_C_rep",rep(c(1,2),3))
m5C_DMdf <-  cbind(rowRanges(se_m5C_virus_filtered),
assays(se_m5C_virus_filtered)[[1]][,-1*c(1,2)],
assays(se_m5C_virus_filtered)[[2]][,-1*c(1,2)],
QNB_result_1[,-1])
head(m5C_DMdf)
colnames(m5C_DMdf)[6:13] = c(paste0(colData(se_m5C_virus_filtered)$Design,"_C_rep",rep(c(1,2),3)),
paste0(colData(se_m5C_virus_filtered)$Design,"_m5C_rep",rep(c(1,2),3)))
c(paste0(colData(se_m5C_virus_filtered)$Design,"_C_rep",rep(c(1,2),3)),
paste0(colData(se_m5C_virus_filtered)$Design,"_m5C_rep",rep(c(1,2),3)))
colnames(m5C_DMdf)[6:13] = c(paste0(colData(se_m5C_virus_filtered)$Design,"_C_rep",rep(c(1,2),3))[,-1*c(1,2)],
paste0(colData(se_m5C_virus_filtered)$Design,"_m5C_rep",rep(c(1,2),3))[,-1*c(1,2)])
colnames(m5C_DMdf)[6:13] = c(paste0(colData(se_m5C_virus_filtered)$Design,"_C_rep",rep(c(1,2),3))[-1*c(1,2)],
paste0(colData(se_m5C_virus_filtered)$Design,"_m5C_rep",rep(c(1,2),3))[-1*c(1,2)])
head(m5C_DMdf)
fol <- findOverlaps(row_gr_m5C,row_gr_genes)
library(org.Hs.eg.db)
SYMBOLs <- select( org.Hs.eg.db,
keys = names(row_gr_genes)[subjectHits(fol)],
keytype = "ENTREZID",
columns = "SYMBOL")
identical( SYMBOLs$ENTREZID, names(row_gr_genes)[subjectHits(fol)] )
SYMBOL_LIST <- tapply(SYMBOLs$SYMBOL, queryHits(fol),function(x)paste0(x,collapse = ","))
m5C_DMdf$GENE_SYMBOL <- NA
m5C_DMdf$GENE_SYMBOL[as.numeric(names(SYMBOL_LIST))] <- SYMBOL_LIST
library(readr)
write_tsv(na.omit(m5C_DMdf),"m5C_DMdf.txt")
knitr::opts_chunk$set(echo = TRUE)
list.files("./hg_GEO")
read.csv(paste0("./hg_GEO/",file_names[1]))
file_names <- list.files("./hg_GEO")
read.csv(paste0("./hg_GEO/",file_names[1]))
i = file_names[1]
csv_x <- read.csv(paste0("./hg_GEO/",i]))
csv_x <- read.csv(paste0("./hg_GEO/",i))
csv_x
file_names <- list.files("./hg_GEO")
for(i in file_names){
csv_x <- read.csv(paste0("./hg_GEO/",i))
GR_x <- GRanges(seqnames = csv_x$chromosome,
ranges = IRanges(start = csv_x$modend,width = 1),
strand = csv_x$strand)
return(GR_x)
}
GR_list <- vector("list",length(file_names))
for(i in file_names){
csv_x <- read.csv(paste0("./hg_GEO/",i))
GR_list[i] <- GRanges(seqnames = csv_x$chromosome,
ranges = IRanges(start = csv_x$modend,width = 1),
strand = csv_x$strand)
}
GR_list
file_names <- list.files("./hg_GEO")
GR_list <- vector("list",length(file_names))
for(i in file_names){
csv_x <- read.csv(paste0("./hg_GEO/",i))
GR_list[[i]] <- GRanges(seqnames = csv_x$chromosome,
ranges = IRanges(start = csv_x$modend,width = 1),
strand = csv_x$strand)
}
GR_list
total_gr <- Reduce("c",GR_list)
total_gr
total_gr <- Reduce(function(x,y)c(unlist(x),unlist(y)),GR_list)
total_gr
total_gr <- unlist(GR_list)
total_gr
total_gr <- unlist(unlist(GR_list))
total_gr
total_gr <- Reduce(rbind,GR_list)
total_gr <- Reduce(function(x,y)return( c(x,y) ),GR_list)
total_gr
GR_list[[1]]
GR_list
GR_list[1]
class(GR_list)
GR_list$`2015_miCILP_sysy_m6A.csv`
GR_list[[1]]
GR_list[[1]]
GR_list[[2]]
GR_list[[3]]
GR_list <- list()
for(i in file_names){
csv_x <- read.csv(paste0("./hg_GEO/",i))
GR_list[[i]] <- GRanges(seqnames = csv_x$chromosome,
ranges = IRanges(start = csv_x$modend,width = 1),
strand = csv_x$strand)
}
GR_list[[1]]
total_gr <- Reduce(x,GR_list)
total_gr <- Reduce(c,GR_list)
total_gr
reduce(total_gr)
base_gr <- reduce(total_gr)
?countOverlaps
table(width(base_gr))
total_gr <- Reduce(c,GR_list,maxgap=0L)
base_gr <- reduce(total_gr,maxgap=0L)
?reduce
base_gr <- reduce(total_gr,min.gapwidth=0L)
table(width(base_gr))
fol <- countOverlaps(base_gr, total_gr,min.gapwidth=0L)
fol <- countOverlaps(base_gr, total_gr,max.gapwidth=0L)
?countOverlaps
fol <- countOverlaps(base_gr, total_gr,type = "equal")
fol
fol
col <- countOverlaps(base_gr, total_gr,type = "equal")
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_expanded_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
base_gr <- predictors.annot(se = base_gr,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
base_gr <- predictors.annot(se = SummarizedExperiment(rowRanges = base_gr ),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
trim( methylation_cqn)
trim(base_gr)
base_gr <- predictors.annot(se = SummarizedExperiment(rowRanges = trim(base_gr)),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
Views(Hsapiens,base_gr + 2)
mean(vcountPattern("RRACH", Views(Hsapiens,base_gr + 2), fixed = F))
seqlengths(base_gr)
isCircular(base_gr)
seqlengths(TxDb.Hsapiens.UCSC.hg19.knownGene)
(vcountPattern("RRACH", Views(Hsapiens,base_gr + 2), fixed = F)
)
mean(vcountPattern("RRACH", DNAStringSet( Views(Hsapiens,base_gr + 2) ), fixed = F))
lapply(GR_list,function(x) mean(vcountPattern("RRACH", DNAStringSet( Views(Hsapiens,x + 2) ), fixed = F)))
lapply(GR_list,function(x) print( mean(vcountPattern("RRACH", DNAStringSet( Views(Hsapiens,x + 2) ), fixed = F))))
GR_list[[6]]
Views(Hsapiens,GR_list[[6]] + 2)
file_names
chain <- readRDS("/Users/zhenwei/Datasets/ChainFiles/chain-hg18ToHg19.rds")
rtracklayer::liftOver(GR_list[[6]],chain)
GR_list[[6]] <- unlist(rtracklayer::liftOver(GR_list[[6]],chain))
GR_list[[7]] <- unlist(rtracklayer::liftOver(GR_list[[7]],chain))
col <- countOverlaps(base_gr, total_gr,type = "equal")
total_gr <- Reduce(c,GR_list)
base_gr <- reduce(total_gr,min.gapwidth=0L)
chain <- readRDS("/Users/zhenwei/Datasets/ChainFiles/chain-hg18ToHg19.rds")
col <- countOverlaps(base_gr, total_gr,type = "equal")
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_expanded_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
base_gr <- predictors.annot(se = SummarizedExperiment(rowRanges = base_gr),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
lapply(GR_list,function(x) print( mean(vcountPattern("RRACH", DNAStringSet( Views(Hsapiens,x + 2) ), fixed = F))))
Model_df = mcols(base_gr)
Model_df$Y = col
Model_df
model_x <- glm(Y ~ .,family = poisson(link = "log"),data = Model_df)
summary_glm <- summary(model_x)#Notice that most of the predictors are highly significant.
summary_glm
Critical_value <- qnorm((.05/2)/(ncol(model_x)-1),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
t_idx
Critical_value <- qnorm((.05/2)/(ncol(model_x)-1),lower.tail = F)
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df
Critical_value <- qnorm((.05/2)/(ncol(model_x)-1),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv
t_idx[1]
Critical_value
Critical_value <- qnorm((.05/2)/(ncol(Model_df)-1),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
library(ggplot2)
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) + geom_bar(stat = "identity", width = .4, fill = "red", colour = "red", size = 0.1) + geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) + coord_flip() + facet_grid(~variable,scales = "free") + theme_classic() + labs(title = "Poisson model on genomic features",subtitle = "RMBase2 Hits", x = "predictors")
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) + geom_bar(stat = "identity", width = .4, fill = "red", colour = "red", size = 0.1) + geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) + coord_flip() + facet_grid(~variable,scales = "free") + theme_classic() + labs(title = "Poisson model on genomic features",subtitle = "miCLIP Hits", x = "predictors")
suppressWarnings( ggsave("miCLIPHits_logistic_model.pdf", p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
IUPAC_CODE_MAP
predictors.annot
predictors.annot
library(m6ALogisticModel)
knitr::opts_chunk$set(echo = TRUE)
base_gr <- predictors.annot(se = SummarizedExperiment(rowRanges = base_gr),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids,
motif = c("RRACH","TRACH")
)
total_gr <- Reduce(c,GR_list)
base_gr <- reduce(total_gr,min.gapwidth=0L)
chain <- readRDS("/Users/zhenwei/Datasets/ChainFiles/chain-hg18ToHg19.rds")
col <- countOverlaps(base_gr, total_gr,type = "equal")
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_expanded_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
base_gr <- predictors.annot(se = SummarizedExperiment(rowRanges = base_gr),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids,
motif = c("RRACH","TRACH")
)
Model_df = mcols(base_gr)
Model_df$Y = col
model_x <- glm(Y ~ .,family = poisson(link = "log"),data = Model_df)
summary_glm <- summary(model_x)#Notice that most of the predictors are highly significant.
Critical_value <- qnorm((.05/2)/(ncol(Model_df)-1),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
library(ggplot2)
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) + geom_bar(stat = "identity", width = .4, fill = "red", colour = "red", size = 0.1) + geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) + coord_flip() + facet_grid(~variable,scales = "free") + theme_classic() + labs(title = "Poisson model on genomic features",subtitle = "miCLIP Hits", x = "predictors")
p1
suppressWarnings( ggsave("miCLIPHits_logistic_model.pdf", p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
summary
predictors.annot
library(m6ALogisticModel)
base_gr <- predictors.annot(se = SummarizedExperiment(rowRanges = base_gr),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids,
motif = c("RRACH","TRACH")
)
knitr::opts_chunk$set(echo = TRUE)
base_gr <- predictors.annot(se = SummarizedExperiment(rowRanges = base_gr),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids,
motif = c("RRACH","TRACH")
)
total_gr <- Reduce(c,GR_list)
base_gr <- reduce(total_gr,min.gapwidth=0L)
chain <- readRDS("/Users/zhenwei/Datasets/ChainFiles/chain-hg18ToHg19.rds")
col <- countOverlaps(base_gr, total_gr,type = "equal")
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_expanded_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
base_gr <- predictors.annot(se = SummarizedExperiment(rowRanges = base_gr),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids,
motif = c("RRACH","TRACH")
)
Model_df = mcols(base_gr)
Model_df$Y = col
model_x <- glm(Y ~ .,family = poisson(link = "log"),data = Model_df)
summary_glm <- summary(model_x)#Notice that most of the predictors are highly significant.
#Null deviance: 10385979
#Residual deviance: 5511383
#Honestly, this is something brilliant.....
#Can we have another table (Hits) using single based data?
Critical_value <- qnorm((.05/2)/(ncol(Model_df)-1),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
library(ggplot2)
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) + geom_bar(stat = "identity", width = .4, fill = "red", colour = "red", size = 0.1) + geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) + coord_flip() + facet_grid(~variable,scales = "free") + theme_classic() + labs(title = "Poisson model on genomic features",subtitle = "miCLIP Hits", x = "predictors")
suppressWarnings( ggsave("miCLIPHits_logistic_model.pdf", p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
RbashGEO::WgetQC
