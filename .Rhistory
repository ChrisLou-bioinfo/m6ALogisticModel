colour = "darkblue"),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vertical",
legend.justification = "center")
suppressWarnings( ggsave( paste0(HDER,"_",family,"_glm.pdf"), p1, width = 7.8, height = 2.7 +  (nrow(plot_df)/2)*.15 ))
return(p1)
}
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial",
HDER = "hg19_miCLIP")
glm_regular <- function(Y,
PREDICTORS,
HDER = "glm",
family = c("gaussian","binomial","poisson"),
CUT_OFF = 5,
Critical_value = 0.05,
Exclude_intercept = F,
Sort_by = c("byZstat","byLogit")) {
if(family == "binomical" & !is.logical(Y)) {
stop("A binomial generalized linear model requires input of a logical vector (composed with TRUE and FALSE).")
}
stopifnot(length(Y) == nrow(PREDICTORS))
stopifnot( is.null(ncol(Y)) | family == "binomial" )
stopifnot( is.null(ncol(Y)) | ncol(Y) == 2 )
stopifnot(length(Y) == nrow(PREDICTORS) | nrow(Y) == nrow(PREDICTORS))
family <- match.arg(family)
Y_na <- is.na(Y)
if(any(Y_na)){
warning(paste0(sum(Y_na)," observations in response variables contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
X_na <- apply(is.na(PREDICTORS),1,any)
if(any(X_na)){
warning(paste0(sum(X_na)," rows in features contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
Y <- Y[!(Y_na|X_na)]
PREDICTORS <- PREDICTORS[!(Y_na|X_na),]
indx_no_info <- sapply( PREDICTORS, function(x) { if (is.logical(x)){
return( (sum(x) <= CUT_OFF | sum(!x) <= CUT_OFF) )
} else {
return(F)
}
} )
if(any(indx_no_info)){
warning(paste0("dropped dummy variable feature(s): ", paste0( gsub("TRUE","",names(indx_no_info[which(indx_no_info)])) , collapse=", "), "; the threshold is defined by the CUT_OFF argument (sum of TRUE / FALSE entries <= ",CUT_OFF,")."),call. = F, immediate. = T)
}
Model = PREDICTORS[,!indx_no_info]
if( family == "gaussian") {
Fitted_model <-  glm(Y~.,family = gaussian(link = "identity"),data = Model)
}
if( family == "binomial") {
Fitted_model <- glm(Y~., family = binomial(link = "logit"),data = Model)
}
if( family == "poisson") {
Fitted_model <- glm(Y~., family = poisson(link = "log"),data = Model)
}
summary_glm <- summary(Fitted_model)
Critical_value <- qnorm((.05/2)/(ncol(Model)),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
if(Exclude_intercept) {
plot_df =  plot_df[plot_df$X_lab != "Intercept",]
plot_df$X_lab <- as.character(plot_df$X_lab)
}
Sort_by <- match.arg(Sort_by)
if(Sort_by == "byZstat" ) {
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$`z.value`,decreasing = F)])
}else {
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
}
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
plot_df$`Critical_value:` = "Bonferroni FWER < 0.05"
if(Sort_by == "byZstat" ) {
plot_df$variable = factor(plot_df$variable,levels = c("z.value","Estimate"))
}else {
plot_df$variable = factor(plot_df$variable,levels = c("z.value","Estimate"))
}
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) +
geom_bar(stat = "identity", width = .4, fill = "darkblue", colour = "red", size = 0.1) +
geom_hline(aes(yintercept = Cv,
colour = `Critical_value:`),
alpha = .5, linetype = 2,
size = .85, colour = "grey") +
coord_flip() + facet_grid(~ variable,scales = "free") +
theme_classic() +
labs(title = paste0(family, " generalized linear model with genomic features" ),
subtitle = HDER,
x = "predictors",
y = NULL) +
theme(plot.margin = margin(t = 1,
r = 2,
b = 0.5,
l = 1,
unit = "cm"),
plot.title = element_text(face = "bold",
vjust = 1),
axis.text.y = element_text(face = "bold",
colour = "darkblue"),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vertical",
legend.justification = "center")
suppressWarnings( ggsave( paste0(HDER,"_",family,"_glm.pdf"), p1, width = 7.8, height = 2.7 +  (nrow(plot_df)/2)*.15 ))
return(p1)
}
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial",
HDER = "hg19_miCLIP")
glm_regular <- function(Y,
PREDICTORS,
HDER = "glm",
family = c("gaussian","binomial","poisson"),
CUT_OFF = 5,
Critical_value = 0.05,
Exclude_intercept = F,
Sort_by = c("byZstat","byLogit")) {
if(family == "binomical" & !is.logical(Y)) {
stop("A binomial generalized linear model requires input of a logical vector (composed with TRUE and FALSE).")
}
stopifnot(length(Y) == nrow(PREDICTORS))
stopifnot( is.null(ncol(Y)) | family == "binomial" )
stopifnot( is.null(ncol(Y)) | ncol(Y) == 2 )
stopifnot(length(Y) == nrow(PREDICTORS) | nrow(Y) == nrow(PREDICTORS))
family <- match.arg(family)
Y_na <- is.na(Y)
if(any(Y_na)){
warning(paste0(sum(Y_na)," observations in response variables contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
X_na <- apply(is.na(PREDICTORS),1,any)
if(any(X_na)){
warning(paste0(sum(X_na)," rows in features contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
Y <- Y[!(Y_na|X_na)]
PREDICTORS <- PREDICTORS[!(Y_na|X_na),]
indx_no_info <- sapply( PREDICTORS, function(x) { if (is.logical(x)){
return( (sum(x) <= CUT_OFF | sum(!x) <= CUT_OFF) )
} else {
return(F)
}
} )
if(any(indx_no_info)){
warning(paste0("dropped dummy variable feature(s): ", paste0( gsub("TRUE","",names(indx_no_info[which(indx_no_info)])) , collapse=", "), "; the threshold is defined by the CUT_OFF argument (sum of TRUE / FALSE entries <= ",CUT_OFF,")."),call. = F, immediate. = T)
}
Model = PREDICTORS[,!indx_no_info]
if( family == "gaussian") {
Fitted_model <-  glm(Y~.,family = gaussian(link = "identity"),data = Model)
}
if( family == "binomial") {
Fitted_model <- glm(Y~., family = binomial(link = "logit"),data = Model)
}
if( family == "poisson") {
Fitted_model <- glm(Y~., family = poisson(link = "log"),data = Model)
}
summary_glm <- summary(Fitted_model)
Critical_value <- qnorm((.05/2)/(ncol(Model)),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
if(Exclude_intercept) {
plot_df =  plot_df[plot_df$X_lab != "Intercept",]
plot_df$X_lab <- as.character(plot_df$X_lab)
}
Sort_by <- match.arg(Sort_by)
if(Sort_by == "byZstat" ) {
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$`z.value`,decreasing = F)])
}else {
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
}
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
plot_df$Critical_value = "Bonferroni FWER < 0.05"
if(Sort_by == "byZstat" ) {
plot_df$variable = factor(plot_df$variable,levels = c("z.value","Estimate"))
}else {
plot_df$variable = factor(plot_df$variable,levels = c("z.value","Estimate"))
}
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) +
geom_bar(stat = "identity", width = .4, fill = "darkblue", colour = "red", size = 0.1) +
geom_hline(aes(yintercept = Cv,
colour = Critical_value),
alpha = .5,
linetype = 2,
size = .55,
colour = "grey") +
coord_flip() + facet_grid(~ variable,scales = "free") +
theme_classic() +
labs(title = paste0(family, " generalized linear model with genomic features" ),
subtitle = HDER,
x = "predictors",
y = NULL) +
theme(plot.margin = margin(t = 1,
r = 2,
b = 0.5,
l = 1,
unit = "cm"),
plot.title = element_text(face = "bold",
vjust = 1),
axis.text.y = element_text(face = "bold",
colour = "darkblue"),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vertical",
legend.justification = "center")
suppressWarnings( ggsave( paste0(HDER,"_",family,"_glm.pdf"), p1, width = 7.8, height = 2.7 +  (nrow(plot_df)/2)*.15 ))
return(p1)
}
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial",
HDER = "hg19_miCLIP")
glm_regular <- function(Y,
PREDICTORS,
HDER = "glm",
family = c("gaussian","binomial","poisson"),
CUT_OFF = 5,
Critical_value = 0.05,
Exclude_intercept = F,
Sort_by = c("byZstat","byLogit")) {
if(family == "binomical" & !is.logical(Y)) {
stop("A binomial generalized linear model requires input of a logical vector (composed with TRUE and FALSE).")
}
stopifnot(length(Y) == nrow(PREDICTORS))
stopifnot( is.null(ncol(Y)) | family == "binomial" )
stopifnot( is.null(ncol(Y)) | ncol(Y) == 2 )
stopifnot(length(Y) == nrow(PREDICTORS) | nrow(Y) == nrow(PREDICTORS))
family <- match.arg(family)
Y_na <- is.na(Y)
if(any(Y_na)){
warning(paste0(sum(Y_na)," observations in response variables contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
X_na <- apply(is.na(PREDICTORS),1,any)
if(any(X_na)){
warning(paste0(sum(X_na)," rows in features contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
Y <- Y[!(Y_na|X_na)]
PREDICTORS <- PREDICTORS[!(Y_na|X_na),]
indx_no_info <- sapply( PREDICTORS, function(x) { if (is.logical(x)){
return( (sum(x) <= CUT_OFF | sum(!x) <= CUT_OFF) )
} else {
return(F)
}
} )
if(any(indx_no_info)){
warning(paste0("dropped dummy variable feature(s): ", paste0( gsub("TRUE","",names(indx_no_info[which(indx_no_info)])) , collapse=", "), "; the threshold is defined by the CUT_OFF argument (sum of TRUE / FALSE entries <= ",CUT_OFF,")."),call. = F, immediate. = T)
}
Model = PREDICTORS[,!indx_no_info]
if( family == "gaussian") {
Fitted_model <-  glm(Y~.,family = gaussian(link = "identity"),data = Model)
}
if( family == "binomial") {
Fitted_model <- glm(Y~., family = binomial(link = "logit"),data = Model)
}
if( family == "poisson") {
Fitted_model <- glm(Y~., family = poisson(link = "log"),data = Model)
}
summary_glm <- summary(Fitted_model)
Critical_value <- qnorm((.05/2)/(ncol(Model)),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
if(Exclude_intercept) {
plot_df =  plot_df[plot_df$X_lab != "Intercept",]
plot_df$X_lab <- as.character(plot_df$X_lab)
}
Sort_by <- match.arg(Sort_by)
if(Sort_by == "byZstat" ) {
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$`z.value`,decreasing = F)])
}else {
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
}
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
plot_df$Critical_value = "Bonferroni FWER < 0.05"
if(Sort_by == "byZstat" ) {
plot_df$variable = factor(plot_df$variable,levels = c("z.value","Estimate"))
}else {
plot_df$variable = factor(plot_df$variable,levels = c("z.value","Estimate"))
}
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) +
geom_bar(stat = "identity", width = .4, fill = "darkblue", colour = "red", size = 0.1) +
geom_hline(aes(yintercept = Cv,
colour = Critical_value),
alpha = .5,
linetype = 2,
size = .55) +
coord_flip() + facet_grid(~ variable,scales = "free") +
theme_classic() +
labs(title = paste0(family, " generalized linear model with genomic features" ),
subtitle = HDER,
x = "predictors",
y = NULL) +
theme(plot.margin = margin(t = 1,
r = 2,
b = 0.5,
l = 1,
unit = "cm"),
plot.title = element_text(face = "bold",
vjust = 1),
axis.text.y = element_text(face = "bold",
colour = "darkblue"),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vertical",
legend.justification = "center") +
scale_colour_manual(values = "black")
suppressWarnings( ggsave( paste0(HDER,"_",family,"_glm.pdf"), p1, width = 7.8, height = 2.7 +  (nrow(plot_df)/2)*.15 ))
return(p1)
}
hg19_miCLIP_se <- predictors_annot(se = hg19_miCLIP_se,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids)
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial",
HDER = "hg19_miCLIP")
rm(glm_regular)
library(m6ALogisticModel)
rm(glm_regular)
?gcapc
gcapc
library(gcapc)
?gcapc
?gcapc::gcapcPeaks
read()
?load()
?save
??rda
dpois(100)
dpois(lambda = 100)
dpois(x = 10lambda = 100)
dpois(x = 10,lambda = 100)
dpois(x = seq(1:200),lambda = 100)
plot(dpois(x = seq(1:200),lambda = 100))
plot(dpois(x = seq(1:200),lambda = 100),type = "l")
plot(dnorm(x = seq(1:200),mean = 100,sd = 10),type = "l")
rpois(n = 1e4,
lambda = 100)
rpois(n = 1e4,
lambda = 100)
set.seed(1)
log(rpois(n = 1e4,
lambda = 100))
hist(log(rpois(n = 1e4,
lambda = 100)))
set.seed(1)
hist(log(rpois(n = 1e4,
lambda = 100)))
set.seed(1)
sim_logX <- log(rpois(n = 1e4,
lambda = 100))
var(sim_logX)
1/mean(sim_logX)
dnorm(seq(4,5,by = 0.01),
mean = log(100),
var = 1/100)
plot(dnorm(seq(4,5,by = 0.01),
mean = log(100),
sd = 1/100))
plot(dnorm(seq(4,5,by = 0.01),
mean = log(100),
sd = 1/100),type = "l")
log(100)
seq(4,5,by = 0.01)
dnorm(seq(4,5,by = 0.01),
mean = log(100),
sd = 1/100)
log(100)
plot(dnorm(1:10,
mean = log(100),
sd = 1/100),type = "l")
sim_logX <- log(rpois(n = 1e4,
lambda = 100))
hist(sim_logX)
seq(4,5,by = 0.01)
plot(dnorm(seq(4,5,by = 0.01),
mean = log(100),
sd = 1/10),type = "l")
sim_logX <- log(rpois(n = 1e4,
lambda = 100))
var(sim_logX)
sim_logX <- log(rpois(n = 1e4,
lambda = 100))
plot(dnorm(seq(4,5,by = 0.01),
mean = log(100),
sd = 1/10),type = "l")
plot(x = seq(4,5,by = 0.01),
y = dnorm(seq(4,5,by = 0.01),
mean = log(100),
sd = 1/10),type = "l")
hist(sim_logX)
SE_exons_counts <- readRDS("SE_exons_counts.rds")
SE_exons_counts <- readRDS("SE_exons_counts.rds")
#Define a function for standardizing features
scale_i <- function(x,stand = T){
if(stand) return((x - mean(x))/sd(x))
else return(x)
}
scale_i(10)
scale_i(100)
scale_i(100,F)
library(m6ALogisticModel)
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Additional_features_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
SE_CQN <- readRDS("SE_CQN_filtered.rds")
SE_features_added <- predictors_annot(se = SE_example,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
standardization = FALSE)
SE_features_added <- predictors_annot(se = SE_CQN,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
standardization = FALSE)
colSums(mcols(SE_features_added))
colSums(as.data.frame( mcols(SE_features_added) ))
colSums( na.omit( as.data.frame( mcols(SE_features_added) )))
colSums( na.omit( as.data.frame( mcols(SE_features_added) ))) < 0.5
?mean
mean(NA,na.rm = T)
mean(c(NA,1),na.rm = T)
sd(c(NA,1),na.rm = T)
sd(c(NA,1,3),na.rm = T)
library(m6ALogisticModel)
library(m6ALogisticModel)
count_grl <- flank_on_exons( grl = row_grl,
flank_length = fragment_length - binding_length,
txdb = txdb,
drop_overlapped_genes = drop_overlapped_genes,
index_flank = FALSE )
row_grl <- rowRanges(readRDS("sep_new.rds"))
row_grl <- rowRanges(readRDS("sep_new.rds"))
library(exomePeak2)
row_grl <- rowRanges(readRDS("sep_new.rds"))
row_grl <- rowRanges(readRDS("SEP_new.rds"))
row_grl <- rowRanges(readRDS("./SEP_new.rds"))
getwd
getwd()
browseVignettes("DESeq2")
59.1*(17/54)
browseVignettes("DESeq2")
(3500*12)/77
(3500*12)/7
(c(1.5,4) - mean(c(1.5,4)))/sd(c(1.5,4))
(c(2,7) - mean(c(2,7)))/sd(c(2,7))
log(1)
log(0.1)
log(0)
log(0)
log(0)
log(0.5
)
log(0.1
)
log(0.9)
hist(1:100)
48.1/3
x <- 1:10
x[which.min(x-4.1)]
x[which.min(abs(x-4.1))]
library(m6ALogisticModel)
