i1_idx <- (1+40000*(pair_i1-1)):(40000*pair_i1 - 20000)
i2_idx <- (1+40000*(pair_i2-1)):(40000*pair_i2 - 20000)
pair_i2 = 5
i1_idx <- (1+40000*(pair_i1-1)):(40000*pair_i1 - 20000)
i2_idx <- (1+40000*(pair_i2-1)):(40000*pair_i2 - 20000)
i2_idx
ADD_VS <- function(pair_i1,pair_i2,ncol) {
i1_idx <- (1+40000*(pair_i1-1)):(40000*pair_i1 - 20000)
i2_idx <- (1+40000*(pair_i2-1)):(40000*pair_i2 - 20000)
SE_assay[i1_idx,ncol] = 1
SE_assay[i2_idx,ncol] = 0
}
SE_assay <- matrix(NA,ncol = 9,nrow = 5*20000*2)
colnames(SE_assay) <- c("RB2_all","RB2_cons","RB2_s30","RB2_svm","SBmotif","5 vs 4","5 vs 3","5 vs 2", "5 vs 1")
for(i in 1:5) {
SE_assay[(1+40000*(i-1)):(40000*i),i] = rep(c(1,0),each = 20000)
}
ADD_VS <- function(pair_i1,pair_i2,ncol) {
i1_idx <- (1+40000*(pair_i1-1)):(40000*pair_i1 - 20000)
i2_idx <- (1+40000*(pair_i2-1)):(40000*pair_i2 - 20000)
SE_assay[i1_idx,ncol] = 1
SE_assay[i2_idx,ncol] = 0
}
ADD_VS(5,4,6)
ADD_VS(5,3,7)
ADD_VS(5,2,8)
ADD_VS(5,1,9)
image(ADD_VS)
ADD_VS
image(SE_assay)
SE_assay <- matrix(NA,ncol = 9,nrow = 5*20000*2)
colnames(SE_assay) <- c("RB2_all","RB2_cons","RB2_s30","RB2_svm","SBmotif","5 vs 4","5 vs 3","5 vs 2", "5 vs 1")
for(i in 1:5) {
SE_assay[(1+40000*(i-1)):(40000*i),i] = rep(c(1,0),each = 20000)
}
image(SE_assay)
ADD_VS(5,4,6)
ADD_VS(5,3,7)
ADD_VS(5,2,8)
ADD_VS(5,1,9)
table(SE_assay[,9])
table(SE_assay[,1])
table(SE_assay[,8])
table(SE_assay[,8])
debug(ADD_VS)
ADD_VS(5,4,6)
ncol
undebug(ADD_VS)
ADD_VS <- function(pair_i1,pair_i2,ncol) {
i1_idx <- (1+40000*(pair_i1-1)):(40000*pair_i1 - 20000)
i2_idx <- (1+40000*(pair_i2-1)):(40000*pair_i2 - 20000)
SE_assay[i1_idx,ncol] = 1
SE_assay[i2_idx,ncol] = 0
return(SE_assay)
}
SE_assay <- ADD_VS(5,4,6)
SE_assay <- ADD_VS(5,3,7)
SE_assay <- ADD_VS(5,2,8)
SE_assay <- ADD_VS(5,1,9)
image(SE_assay)
rowRanges(SE_X) = c(RMBase_All_sample,RMBase_All_ctrl,
RMBase_conserved_sample,RMBase_conserved_ctrl,
RMBase_support30_sample,RMBase_support30_ctrl,
RMBase_SVM_sample,RMBase_SVM_ctrl,
Single_base_sample,Single_base_ctrl)
RMBase_conserved_sample
RMBase_All_sample
mcols(RMBase_All_sample) = NULL
rowRanges(SE_X) = c(RMBase_All_sample,RMBase_All_ctrl,
RMBase_conserved_sample,RMBase_conserved_ctrl,
RMBase_support30_sample,RMBase_support30_ctrl,
RMBase_SVM_sample,RMBase_SVM_ctrl,
Single_base_sample,Single_base_ctrl)
mcols(RMBase_support30_sample) = NULL
rowRanges(SE_X) = c(RMBase_All_sample,RMBase_All_ctrl,
RMBase_conserved_sample,RMBase_conserved_ctrl,
RMBase_support30_sample,RMBase_support30_ctrl,
RMBase_SVM_sample,RMBase_SVM_ctrl,
Single_base_sample,Single_base_ctrl)
RMBase_SVM_sample
mcols(RMBase_SVM_sample) = NULL
rowRanges(SE_X) = c(RMBase_All_sample,RMBase_All_ctrl,
RMBase_conserved_sample,RMBase_conserved_ctrl,
RMBase_support30_sample,RMBase_support30_ctrl,
RMBase_SVM_sample,RMBase_SVM_ctrl,
Single_base_sample,Single_base_ctrl)
SE_X <- SummarizedExperiment(SE_assay)
rowRanges(SE_X) = c(RMBase_All_sample,RMBase_All_ctrl,
RMBase_conserved_sample,RMBase_conserved_ctrl,
RMBase_support30_sample,RMBase_support30_ctrl,
RMBase_SVM_sample,RMBase_SVM_ctrl,
Single_base_sample,Single_base_ctrl)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_expanded_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
SE_test <- predictors.annot(se = SE_X,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
width(RMBase_conserved_sample)
table(RMBase_conserved_sample)
table(width(RMBase_conserved_sample))
rowRanges(SE_X) = c(RMBase_All_sample,RMBase_All_ctrl-2,
RMBase_conserved_sample,RMBase_conserved_ctrl-2,
RMBase_support30_sample,RMBase_support30_ctrl-2,
RMBase_SVM_sample,RMBase_SVM_ctrl-2,
Single_base_sample,Single_base_ctrl-2)
table(width(rowRanges(SE_X)))
SE_test <- predictors.annot(se = SE_X,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
saveRDS(SE_test,"SE_RMBaseVS.rds")
mcols(SE_test)
contributors()
knitr::opts_chunk$set(echo = TRUE)
SB_80k_human_PE <- readRDS("SB_80k_human_PE.rds")
SB_80k_human_SE <- readRDS("SB_80k_human_SE.rds")
SB_80k_human_SE
SB_80k_human_PE
saveRDS(SB_80k_human_PE,"SVMRMBase_human_PE.rds")
colData( SB_80k_human_SE)
colData( SB_80k_human_SE)
coldata_TREWcons <- read.csv("coldata_TREWcons.csv")
SRR_RUN <- coldata_TREWcons$SRR_RUN
sum(!paste0(SRR_RUN,".bam") %in% grep(".bam", list.files("/home/zhen/TREW_cons_bams") , value = T)) #0
SRR_RUN_human_SE <- as.character( SRR_RUN )[coldata_TREWcons$Lib == "Single" & grepl("human",coldata_TREWcons$Experiment)]
SRR_RUN_human_PE <- as.character( SRR_RUN )[coldata_TREWcons$Lib == "Paired" & grepl("human",coldata_TREWcons$Experiment)]
length(SRR_RUN_human_SE)
length(SRR_RUN_human_PE)
SB_80k <- readRDS("SINGLE_BASE.rds")
RMBase_hg19 <- readRDS("RMBase_hg19_gr.rds")
RMBase_hg19_s30 <- RMBase_hg19[RMBase_hg19$Hits > 30]
RMBase_hg19_s30
length(reduce(RMBase_hg19_s30+50))
length(RMBase_hg19_s30)
length(SB_80k)
length(reduce(SB_80k+50))
mean(SB_80k %over% RMBase_hg19_s30)
mean(SB_80k %over% RMBase_hg19)
length(reduce(c(RMBase_hg19_s30,SB_80k))
)
SB_80k
RMBase_hg19_s30
mcols(RMBase_hg19_s30) = NULL
length(reduce(c(RMBase_hg19_s30,SB_80k)))
Annot_final <- reduce(c(RMBase_hg19_s30,SB_80k))
length(reduce(Annot_final))
?reduce
Annot_final <- reduce(c(RMBase_hg19_s30,SB_80k),min.gapwidth=0L) # 139171
length(Annot_final)
length(reduce(Annot_final+100))
length(reduce(Annot_final+50))
length(reduce(Annot_final+10))
c(18+2+1,18+2+1+7,20+2+1)
sum(c(18+2+1,18+2+1+7,20+2+1))
c(18+2+1,18+2+1+7,20+2+1)/(46/72)
c(18+2+1,18+2+1+7,20+2+1)*(46/72)
saveRDS(Annot_final,"Annot_final.rds")
SB_80k[SB_80k %over% RMBase_hg19_s30]
Intersect_x <- SB_80k[SB_80k %over% RMBase_hg19_s30]
Intersect_x
Intersect_x
length(reduce(RMBase_hg19_s30+50)) #
length(RMBase_hg19_s30)
reduce(Intersect_x)
reduce(Intersect_x + 50)
length(Intersect_x)
reduce(Intersect_x + 50)
Intersect_x
library(BSgenome.Hsapiens.UCSC.hg19)
set.seed(50)
Intersect_sample <- Intersect_x[sample.int(length(Intersect_x),20000)]
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
exbytx = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by = "tx")
Control_on_ex <- function(Original_gr,Exbytx,motif = "RRACH") {
require(m6ALogisticModel)
Covered_transcripts <- reduce( unlist( subsetByOverlaps(Exbytx, Original_gr) ) )
Sample_sequence(motif, Covered_transcripts, Hsapiens, N = length(Original_gr))
}
Intersect_ctrl <- Control_on_ex(Intersect_sample,exbytx) #Intersection
Intersect_ctrl
SE_assay <- matrix(NA,ncol = 9,nrow = 5*20000*2)
colnames(SE_assay) = "INTERSECT"
SE_assay <- matrix(NA,ncol = 1,nrow = 20000*2)
colnames(SE_assay) = "INTERSECT"
SE_assay
SE_assay[1:20000,1] = 1
SE_assay[20001:40000,1] = 0
rowRanges(SE_assay) = c(Intersect_sample,Intersect_ctrl)
library(m6ALogisticModel)
rowRanges(SE_assay) = c(Intersect_sample,Intersect_ctrl)
SE_intersect <- SummarizedExperiment(SE_assay)
rowRanges(SE_intersect) = c(Intersect_sample,Intersect_ctrl)
rowRanges(SE_intersect) = c(Intersect_sample,Intersect_ctrl-2)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_expanded_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
SE_test <- predictors.annot(se = SE_intersect,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
m6ALogisticModel::logistic.modeling(SE,
save_dir = "RMBase2_comprehensive",
group_list = group_list_expanded,
MCMC_iterations = 20000)
m6ALogisticModel::logistic.modeling(SE_test,
save_dir = "RMBase2_comprehensive",
group_list = group_list_expanded,
MCMC_iterations = 20000)
Intersect_x
saveRDS(Intersect_x,"Intersect.rds")
saveRDS(Annot_final,"Union.rds")
svmRMbase_se <- readRDS("svmRMbase2_human_SE.rds")
SVMRMbase_pe <- readRDS("SVMRMbase_human_PE.rds")
svmRMbase_se
SVMRMbase_pe
svmRMbase_hg19 <- cbind(svmRMbase_se,SVMRMbase_pe)
svmRMbase_hg19
coldata_TREWcons <- read.csv("coldata_TREWcons.csv")
coldata_TREWcons
colnames( svmRMbase_hg19 )
gsub(".bam","",colnames( svmRMbase_hg19 ) )
match( gsub(".bam","",colnames( svmRMbase_hg19 ) ), coldata_TREWcons$SRR_RUN)
indx <- match( gsub(".bam","",colnames( svmRMbase_hg19 ) ), coldata_TREWcons$SRR_RUN)
DataFrame( coldata_TREWcons[indx,] )$SRR_RUN
colnames( svmRMbase_hg19 )
colData(svmRMbase_hg19) <- DataFrame( coldata_TREWcons[indx,] )
colData(svmRMbase_hg19)
saveRDS(svmRMbase_hg19,"svmRMbase_hg19_count.rds")
knitr::opts_chunk$set(echo = TRUE)
svmRMbase_hg19_count <- readRDS("svmRMbase_hg19_count.rds")
svmRMbase_hg19_count <- readRDS("svmRMbase_hg19_count.rds")
library(meripQC)
setwd("/Users/zhenwei/Datasets/Sano_Pack")
hg19_txdb <- AnnotationDbi::loadDb("hg19.txdb")
Gtcoord_hg19 <- readRDS("Gtcoord_hg19.rds")
Gene_GC_hg19 <- readRDS("Gene_GC_hg19.rds")
fol <- findOverlaps( rowRanges( svmRMbase_hg19_count ), Gene_GC_hg19 )
GC_cont = rep(NA,nrow(svmRMbase_hg19_count))
GC_cont = rep(NA,nrow(svmRMbase_hg19_count))
GC_cont[queryHits(fol)] = mcols(Gene_GC_hg19)[subjectHits(fol),]
Design_DM_standard <- readRDS( se_combinded_standard.csv)
Design_DM_standard <- readRDS("se_combinded_standard.csv")
Design_DM_standard <- read.csv("se_combinded_standard.csv")
Design_DM_standard
Design_DM_standard <- read.csv("se_combinded_standard.csv")
Call_DM_design <- function(coldata_x) {
coldata_by_Exp <- split(coldata_x,coldata_x$Experiment)
Design_df <- data.frame(idx = 1:nrow(coldata_x))
for(i in names(coldata_by_Exp)) {
Idx_I = coldata_x$Experiment == i
Purt_J <- unique( coldata_by_Exp[[i]]$Perturbation )
Purt_J <- Purt_J[Purt_J != "C"]
for(j in Purt_J) {
Idx_J = Idx_I&(coldata_x$Perturbation == j|coldata_x$Perturbation == "C")
Design_df[[paste0("DM_",i,"_", gsub(":","_",j))]] = Idx_J
}
}
Design_df = Design_df[,-1]
Check_vector  <- apply(Design_df,2,function(x) {
any(c(any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation != "C","IP_input"]),
any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation == "C","IP_input"])))
})
if(any(Check_vector)) {warning(paste0("Warning: Design(s): ", paste( names(Check_vector)[Check_vector] ,collapse = ", ")," have no complete IP and input labels for at least one of the treated or control conditions.") )}
return(Design_df)
}
Call_DM_design(Design_DM_standard)
colData(svmRMbase_hg19_count)
tail( colData(svmRMbase_hg19_count),10)
tail( colData(svmRMbase_hg19_count),22)
tail( colData(svmRMbase_hg19_count),16)
Coldata_all <- colData(svmRMbase_hg19_count)
View(Coldata_all)
View(as.data.frame( Coldata_all ))
Design_DM_standard <- rbind(Design_DM_standard, colData(svmRMbase_hg19_count)[c(39:62,98:109),])
Call_DM_design(Design_DM_standard)
Call_DM_design(colData(svmRMbase_hg19_count))
Design_x <- Call_DM_design(colData(svmRMbase_hg19_count))
svmRMbase_hg19_count
colData(svmRMbase_hg19_count)
Design_x
Design_x[["DM_human-AML_METTL3-"]]
colData(svmRMbase_hg19_count) [Design_x[["DM_human-AML_METTL3-"]],]
data.frame(colData(svmRMbase_hg19_count)[Design_x[["DM_human-AML_METTL3-"]],])
View(data.frame(colData(svmRMbase_hg19_count)[Design_x[["DM_human-AML_METTL3-"]],]))
View(data.frame(colData(svmRMbase_hg19_count)))
Call_DM_design <- function(coldata_x，ignore_indx) {
Design_x <- Call_DM_design(colData(svmRMbase_hg19_count),ignore_indx = c(8,9,97))
Call_DM_design <- function(coldata_x，ignore_indx) {
Call_DM_design <- function(coldata_x,ignore_indx) {
coldata_by_Exp <- split(coldata_x,coldata_x$Experiment)
Design_df <- data.frame(idx = 1:nrow(coldata_x))
for(i in names(coldata_by_Exp)) {
Idx_I = coldata_x$Experiment == i
Purt_J <- unique( coldata_by_Exp[[i]]$Perturbation )
Purt_J <- Purt_J[Purt_J != "C"]
for(j in Purt_J) {
Idx_J = Idx_I&(coldata_x$Perturbation == j|coldata_x$Perturbation == "C")
Design_df[[paste0("DM_",i,"_", gsub(":","_",j))]] = Idx_J
}
}
Design_df = Design_df[,-1]
Check_vector  <- apply(Design_df,2,function(x) {
any(c(any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation != "C","IP_input"]),
any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation == "C","IP_input"])))
})
if(any(Check_vector)) {warning(paste0("Warning: Design(s): ", paste( names(Check_vector)[Check_vector] ,collapse = ", ")," have no complete IP and input labels for at least one of the treated or control conditions.") )}
return(Design_df)
}
#Some collumns have invalid design.
Design_x <- Call_DM_design(colData(svmRMbase_hg19_count),ignore_indx = c(8,9,97))
names(Check_vector)[Check_vector]
names(Check_vector)[Check_vector]
Call_DM_design <- function(coldata_x,Drop_incomplete = T) {
coldata_by_Exp <- split(coldata_x,coldata_x$Experiment)
Design_df <- data.frame(idx = 1:nrow(coldata_x))
for(i in names(coldata_by_Exp)) {
Idx_I = coldata_x$Experiment == i
Purt_J <- unique( coldata_by_Exp[[i]]$Perturbation )
Purt_J <- Purt_J[Purt_J != "C"]
for(j in Purt_J) {
Idx_J = Idx_I&(coldata_x$Perturbation == j|coldata_x$Perturbation == "C")
Design_df[[paste0("DM_",i,"_", gsub(":","_",j))]] = Idx_J
}
}
Design_df = Design_df[,-1]
Check_vector  <- apply(Design_df,2,function(x) {
any(c(any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation != "C","IP_input"]),
any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation == "C","IP_input"])))
})
if(any(Check_vector)) {warning(paste0("Warning: Design(s): ", paste( names(Check_vector)[Check_vector] ,collapse = ", ")," have no complete IP and input labels for at least one of the treated or control conditions.", ifelse(Drop_incomplete)("These designs are dropped by the setting of `Drop_incomplete`.","")) )}
if(Drop_incomplete) Design_df = Design_df[,!Check_vector]
return(Design_df)
}
Design_x <- Call_DM_design(colData(svmRMbase_hg19_count))
Call_DM_design <- function(coldata_x, Drop_incomplete = T) {
coldata_by_Exp <- split(coldata_x,coldata_x$Experiment)
Design_df <- data.frame(idx = 1:nrow(coldata_x))
for(i in names(coldata_by_Exp)) {
Idx_I = coldata_x$Experiment == i
Purt_J <- unique( coldata_by_Exp[[i]]$Perturbation )
Purt_J <- Purt_J[Purt_J != "C"]
for(j in Purt_J) {
Idx_J = Idx_I&(coldata_x$Perturbation == j|coldata_x$Perturbation == "C")
Design_df[[paste0("DM_",i,"_", gsub(":","_",j))]] = Idx_J
}
}
Design_df = Design_df[,-1]
Check_vector  <- apply(Design_df,2,function(x) {
any(c(any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation != "C","IP_input"]),
any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation == "C","IP_input"])))
})
if(any(Check_vector)) {warning(paste0("Warning: Design(s): ", paste( names(Check_vector)[Check_vector] ,collapse = ", ")," have no complete IP and input labels for at least one of the treated or control conditions.", ifelse(Drop_incomplete)("These designs are dropped by the setting of `Drop_incomplete`.","")) )}
if(Drop_incomplete) Design_df = Design_df[,!Check_vector]
return(Design_df)
}
Design_x <- Call_DM_design(colData(svmRMbase_hg19_count))
Call_DM_design <- function(coldata_x, Drop_incomplete = T) {
coldata_by_Exp <- split(coldata_x,coldata_x$Experiment)
Design_df <- data.frame(idx = 1:nrow(coldata_x))
for(i in names(coldata_by_Exp)) {
Idx_I = coldata_x$Experiment == i
Purt_J <- unique( coldata_by_Exp[[i]]$Perturbation )
Purt_J <- Purt_J[Purt_J != "C"]
for(j in Purt_J) {
Idx_J = Idx_I&(coldata_x$Perturbation == j|coldata_x$Perturbation == "C")
Design_df[[paste0("DM_",i,"_", gsub(":","_",j))]] = Idx_J
}
}
Design_df = Design_df[,-1]
Check_vector  <- apply(Design_df,2,function(x) {
any(c(any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation != "C","IP_input"]),
any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation == "C","IP_input"])))
})
if(any(Check_vector)) {warning(paste0("Warning: Design(s): ", paste( names(Check_vector)[Check_vector] ,collapse = ", ")," have no complete IP and input labels for at least one of the treated or control conditions.", ifelse(Drop_incomplete,"These designs are dropped by the setting of `Drop_incomplete`.","")) )}
if(Drop_incomplete) Design_df = Design_df[,!Check_vector]
return(Design_df)
}
Design_x <- Call_DM_design(colData(svmRMbase_hg19_count))
Call_DM_design <- function(coldata_x, Drop_incomplete = T) {
coldata_by_Exp <- split(coldata_x,coldata_x$Experiment)
Design_df <- data.frame(idx = 1:nrow(coldata_x))
for(i in names(coldata_by_Exp)) {
Idx_I = coldata_x$Experiment == i
Purt_J <- unique( coldata_by_Exp[[i]]$Perturbation )
Purt_J <- Purt_J[Purt_J != "C"]
for(j in Purt_J) {
Idx_J = Idx_I&(coldata_x$Perturbation == j|coldata_x$Perturbation == "C")
Design_df[[paste0("DM_",i,"_", gsub(":","_",j))]] = Idx_J
}
}
Design_df = Design_df[,-1]
Check_vector  <- apply(Design_df,2,function(x) {
any(c(any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation != "C","IP_input"]),
any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation == "C","IP_input"])))
})
if(any(Check_vector)) {warning(paste0("Warning: Design(s): ", paste( names(Check_vector)[Check_vector] ,collapse = ", ")," have no complete IP and input labels for at least one of the treated or control conditions.\n", ifelse(Drop_incomplete,"These designs are dropped by the setting of `Drop_incomplete`.","")) )}
if(Drop_incomplete) Design_df = Design_df[,!Check_vector]
return(Design_df)
}
Design_x <- Call_DM_design(colData(svmRMbase_hg19_count))
Design_x
colData(svmRMbase_hg19_count)$Experiment
View(data.frame(colData(svmRMbase_hg19_count)))
Coldata_temp$Experiment[39:62]
Coldata_temp <- colData(svmRMbase_hg19_count)
Coldata_temp$Experiment[39:62]
Coldata_temp$Experiment[39:62] <- paste0( Coldata_temp$Experiment[39:62], 2)
Coldata_temp$Experiment[39:62] <- as.character( paste0( Coldata_temp$Experiment[39:62], 2) )
Coldata_temp <- as.data.frame( colData(svmRMbase_hg19_count) )
Coldata_temp$Experiment = as.character(Coldata_temp$Experiment)
Coldata_temp$Experiment[39:62] <- as.character( paste0( Coldata_temp$Experiment[39:62], 2) )
Coldata_temp$Experiment
Design_hg19 <- Call_DM_design(Coldata_temp$Experiment)
Design_hg19 <- Call_DM_design(Coldata_temp)
Design_hg19
for(i in colnames(Design_hg19)) {
cat(paste0("Processing....: ",i,"\n"))
meRIP_mod_QC_report(se_M = svmRMbase_hg19_count[,Design_hg19[,i]],
txdb = hg19_txdb,
gtcoord = Gtcoord_hg19,
min_num_Mod = 5000,
save_title = i,
DM_analysis = T,
Expected_change = ifelse(grepl("FTO-",i,ignore.case = T),"hyper","hypo"),
DeSeq2_fdr_threshold = .05,
PCA_PLOT = F,
GC_idx_feature = GC_cont_comb)
setwd("..")
}
for(i in colnames(Design_hg19)) {
cat(paste0("Processing....: ",i,"\n"))
meRIP_mod_QC_report(se_M = svmRMbase_hg19_count[,Design_hg19[,i]],
txdb = hg19_txdb,
gtcoord = Gtcoord_hg19,
min_num_Mod = 5000,
save_title = i,
DM_analysis = T,
Expected_change = ifelse(grepl("FTO-",i,ignore.case = T),"hyper","hypo"),
DeSeq2_fdr_threshold = .05,
PCA_PLOT = F,
GC_idx_feature = GC_cont)
setwd("..")
}
library(m6ALogisticModel)
library(BSgenome.Mmusculus.UCSC.mm10)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
SE_mm10 = SummarizedExperiment(cds(TxDb.Mmusculus.UCSC.mm10.knownGene)[1:1000])
cds(TxDb.Mmusculus.UCSC.mm10.knownGene)[1:1000]
SE_mm10 = SummarizedExperiment(1:1000)
SE_mm10 = SummarizedExperiment(cbind(1:1000))
rowRanges(SE_mm10) = cds(TxDb.Mmusculus.UCSC.mm10.knownGene)[1:1000]
m6ALogisticModel::predictors.annot(SE_mm10,TxDb.Mmusculus.UCSC.mm10.knownGene,Mmusculus)
debug(predictors.annot)
m6ALogisticModel::predictors.annot(SE_mm10,TxDb.Mmusculus.UCSC.mm10.knownGene,Mmusculus)
m6ALogisticModel::predictors.annot(SE_mm10,TxDb.Mmusculus.UCSC.mm10.knownGene,Mmusculus)
debug(m6ALogisticModel::predictors.annot(SE_mm10,TxDb.Mmusculus.UCSC.mm10.knownGene,Mmusculus))
debug(predictors.annot)
m6ALogisticModel::predictors.annot(SE_mm10,TxDb.Mmusculus.UCSC.mm10.knownGene,Mmusculus)
is_motif <- function(motif,dss,exact = T) vcountPattern(DNAString(motif), dss, fixed = exact) > 0
DSS <- DNAStringSet( Views(bsgnm,row_gr + 2) )
for (m_i in motif)  {
Feature_matrix[[m_i]] <- is_motif(m_i,DSS,T)
i  = Speak(paste0("Motif --- ",m_i),i)
}
library(m6ALogisticModel)
m6ALogisticModel::predictors.annot(SE_mm10,TxDb.Mmusculus.UCSC.mm10.knownGene,Mmusculus)
Coldata_example <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/Newdatas/N1_2018_2_2_NewM14/Coldata_M14new.csv")
devtools::use_data(Coldata_example)
