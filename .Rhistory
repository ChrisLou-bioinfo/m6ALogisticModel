summary(md2)
md2
md1$coefficients
md2$coefficients
summary(md1)
summary(md2)
Design_midbr$Target = NULL
Design_test$Target = NULL
colnames(Design_test)
md3 <- glm(exons ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_test)) )
summary(md3)
md3 <- glm(CDS ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_test)) )
summary(md3)
md3 <- glm(Pos_UTR3 ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_test)) )
Design_test$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_human-A549_KIAA1429-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_test)) )
md1
Design_Sub <- as.data.frame( na.omit( Design_test))
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  Design_Sub)
coefficients(md1)
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  Design_Sub[sample.int(nrow(Design_Sub),3000),])
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  Design_Sub)
md1_rand <- glm(Target ~ .,family = binomial(link = "logit"), data =  Design_Sub[sample.int(nrow(Design_Sub),3000),])
coefficients(md1)
coefficients(md1_rand)
plot(Design_Sub)
barplot(Design_Sub)
plot(Design_Sub)
plot(Design_Sub)
cor(coefficients(md1),coefficients(md1_rand))
M_cor <- cbind( coefficients(md1),coefficients(md1_rand))
M_cor
summary(md1)
source('~/Documents/GitHub/m6ALogisticModel/R/predictors.annot.R')
?logistic.modeling
library(m6ALogisticModel)
?group_list_expanded
library(SummarizedExperiment)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_expanded_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
PARCLIP_ALKBH5 = PARCLIP_ALKBH5,
CLIP_FTO = CLIP_FTO,
eCLIP_FTO = eCLIP_FTO
)
SE_features_added <- predictors.annot(se = SE_example,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
FTO_CLIP <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/CLIP_FTO.rds")
devtools::use_data(FTO_CLIP)
FTO_eCLIP <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/eCLIP_FTO.rds")
devtools::use_data(FTO_eCLIP)
ALKBH5_PARCLIP <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/PARCLIP_ALKBH5.rds")
devtools::use_data(ALKBH5_PARCLIP)
group_list_expanded = list(
UTR5 = c("UTR5", "Pos_UTR5", "length_UTR5"),
CDS = c("CDS", "Pos_CDS", "length_CDS"),
UTR3 = c("UTR3", "Pos_UTR3", "length_UTR3"),
Exon = c("exons", "Pos_exons", "long_exon","Last_exons_50bp"),
Gene = c("Pos_Tx","length_gene_ex","length_gene_full","Isoform_num","sncRNA","lncRNA","HK_genes"),
LandMarks = c("m6Am","Start_codons","Stop_codons"),
Motif = c("AAACA","GAACA","AGACA","GGACA","AAACT","GAACT","AGACT","GGACT","AAACC","GAACC","AGACC","GGACC"),
Structure = c("struct_hybridize","struct_loop"),
Evolution = c("PC_1nt","PC_101nt","FC_1nt","FC_101nt"),
miRNA_RBP = c("HNRNPC_eCLIP", "YTHDC1_TREW", "YTHDF1_TREW", "YTHDF2_TREW", "miR_targeted_genes","TargetScan","Verified_miRtargets"),
Writers_Erasers = c("METTL3_TREW","METTL14_TREW","WTAP_TREW","METTL16_CLIP","ALKBH5_PARCLIP","FTO_CLIP","FTO_eCLIP"),
Batch = c("GC_cont_genes","GC_cont_101bp","Intercept")
)
devtools::use_data(group_list_expanded)
group_list_expanded = list(
UTR5 = c("UTR5", "Pos_UTR5", "length_UTR5"),
CDS = c("CDS", "Pos_CDS", "length_CDS"),
UTR3 = c("UTR3", "Pos_UTR3", "length_UTR3"),
Exon = c("exons", "Pos_exons", "long_exon","Last_exons_50bp"),
Gene = c("Pos_Tx","length_gene_ex","length_gene_full","Isoform_num","sncRNA","lncRNA","HK_genes"),
LandMarks = c("m6Am","Start_codons","Stop_codons"),
Motif = c("AAACA","GAACA","AGACA","GGACA","AAACT","GAACT","AGACT","GGACT","AAACC","GAACC","AGACC","GGACC"),
Structure = c("struct_hybridize","struct_loop"),
Evolution = c("PC_1nt","PC_101nt","FC_1nt","FC_101nt"),
miRNA_RBP = c("HNRNPC_eCLIP", "YTHDC1_TREW", "YTHDF1_TREW", "YTHDF2_TREW", "miR_targeted_genes","TargetScan","Verified_miRtargets"),
Writers_Erasers = c("METTL3_TREW","METTL14_TREW","WTAP_TREW","METTL16_CLIP","ALKBH5_PARCLIP","FTO_CLIP","FTO_eCLIP"),
Batch = c("GC_cont_genes","GC_cont_101bp","Intercept")
)
devtools::use_data(group_list_expanded)
library(m6ALogisticModel)
?group_list_expanded
library(SummarizedExperiment)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_expanded_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
SE_features_added <- predictors.annot(se = SE_example,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
logistic.modeling(
SE_features_added,
MCMC_iterations = 100000,
decision_method = "BPM",
save_dir = "LogisticModel_X",
sample_names_coldata = "ID",
group_list = group_list_expanded
)
knitr::opts_chunk$set(echo = TRUE)
Gr_hg19_aRMbase2 <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/A_Prepare_Annot_2017_12_4/Gr_hg19_aRMbase2.rds")
Gr_hg19_aRMbase2 <- Gr_hg19_aRMbase2[grepl("rmbase2",Gr_hg19_aRMbase2$ID)]
Gr_hg19_aRMbase2
grepl("rmbase2",Gr_hg19_aRMbase2$ID)
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
Gr_hg19_aRMbase2 <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/A_Prepare_Annot_2017_12_4/Gr_hg19_aRMbase2.rds")
Gr_hg19_aRMbase2 <- Gr_hg19_aRMbase2[grepl("rmbase2",Gr_hg19_aRMbase2$ID)]
Gr_hg19_aRMbase2 <- subsetByOverlaps( Gr_hg19_aRMbase2, exons(TxDb.Hsapiens.UCSC.hg19.knownGene) )
set.seed(100)
RMBase_sample <- Gr_hg19_aRMbase2[sample.int(length(Gr_hg19_aRMbase2),20000)]
Covered_transcripts <- reduce( unlist( subsetByOverlaps(exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by = "tx"), RMBase_sample ) ))
Control_sample <- Sample_sequence("RRACH", Covered_transcripts, Hsapiens, N = 20000)
RMBase_sample = RMBase_sample-50
Control_sample = Control_sample-2
sum(Control_sample %over% RMBase_sample) #580
m6ASB_technique <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/SINGLE_BASE.rds")
exon_indx <- m6ASB_technique %over% exons(TxDb.Hsapiens.UCSC.hg19.knownGene) #Still having
m6ASB_technique <- m6ASB_technique[exon_indx]
set.seed(101)
m6ASB_sample <- m6ASB_technique[sample.int(length(m6ASB_technique),20000)]
Covered_transcripts <- reduce( unlist( subsetByOverlaps(exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by = "tx"), m6ASB_sample ) ))
Control_sample2 <- Sample_sequence("RRACH", Covered_transcripts, Hsapiens, N = 20000)
Control_sample2 = Control_sample2-2
sum(Control_sample2 %over% m6ASB_sample) #611
SE_assay <- cbind(
c(rep(c(1,0),each = 20000), rep(NA,40000)),
c(rep(NA,40000), rep(c(1,0),each = 20000)),
c(rep(c(0,NA),each = 20000), rep(c(1,NA),each = 20000))
)
colnames(SE_assay) = c("RMbase2_hg19","SB_hg19","SB_vs_RMBase2")
SE_test <- SummarizedExperiment(SE_assay)
rowRanges(SE_test) = c(RMBase_sample,Control_sample,m6ASB_sample,Control_sample2)
mcols(RMBase_sample) = NULL
mcols(m6ASB_sample) = NULL
rowRanges(SE_test) = c(RMBase_sample,Control_sample,m6ASB_sample,Control_sample2)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_expanded_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
SE_test <- predictors.annot(se = SE_test,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
saveRDS(SE_test,"SE_RMBase2VsSB.rds")
knitr::opts_chunk$set(echo = TRUE)
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
m6ASB_technique <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/SINGLE_BASE.rds")
exon_indx <- m6ASB_technique %over% exons(TxDb.Hsapiens.UCSC.hg19.knownGene) #Still having 14% intronic sites
m6ASB_technique <- m6ASB_technique[exon_indx]
set.seed(101)
m6ASB_sample <- m6ASB_technique[sample.int(length(m6ASB_technique),20000)]
17.5*3/5
17.5*3/5
knitr::opts_chunk$set(echo = TRUE)
m6ASB_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/SINGLE_BASE.rds")
m6ASB_gr
reduce(m6ASB_gr)
?reduce
reduce( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/SINGLE_BASE.rds") ,min.gapwidth=0L)
m6ASB_gr <- reduce( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/SINGLE_BASE.rds") ,min.gapwidth=0L) #In fact there are no overlapps
m6ASB_gr
m6ASB_gr
m6ASB_gr <- reduce( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/SINGLE_BASE.rds") ,min.gapwidth=0L)
knitr::opts_chunk$set(echo = TRUE)
library(BSgenome.Hsapiens.UCSC.hg19)
vcountPattern("RRACH", DNAStringSet( Views(Hsapiens,m6ASB_gr+2) ) )
DNAStringSet( Views(Hsapiens,m6ASB_gr+2) )
indx <- vcountPattern("RRACH", DNAStringSet( Views(Hsapiens,m6ASB_gr+2) ), fixed = F)
mean(
indx)
indx
indx <- vcountPattern("DRACH", DNAStringSet( Views(Hsapiens,m6ASB_gr+2) ), fixed = F)
indx
mean(indx)
indx <- vcountPattern("DRACH", DNAStringSet( Views(Hsapiens,m6ASB_gr+2) ), fixed = F)
sum(indx)
mean(indx)
IUPAC_CODE_MAP
coldata_TREWcons <- read.csv("coldata_TREWcons.csv")
SRR_RUN <- coldata_TREWcons$SRR_RUN
SRR_RUN_human_SE <- as.character( SRR_RUN )[coldata_TREWcons$Lib == "Single" & grepl("human",coldata_TREWcons$Experiment)]
SRR_RUN_human_PE <- as.character( SRR_RUN )[coldata_TREWcons$Lib == "Paired" & grepl("human",coldata_TREWcons$Experiment)]
SRR_RUN_human_SE
SRR_RUN_human_PE
m6ASB_gr <- reduce( readRDS("RMBase.rds") ,min.gapwidth=0L) #In fact there are no overlapps
readRDS("../RMBase.rds")
readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/RMBase.rds")
m6ASB_gr <- reduce( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/RMBase.rds") ,min.gapwidth=0L)
m6ASB_gr
gsub("//$","",bamdir)
bamdir = "shit/fag/"
gsub("//$","",bamdir)
gsub("\/$","",bamdir)
gsub("\\/$","",bamdir)
RMBase_hg19 <- read.csv("/Users/zhenwei/Documents/GitHub/RMBase_hg19.csv")
RMBase_hg19
head(RMBase_hg19)
hist(RMBase_hg19$supportNum)
sum(RMBase_hg19$supportNum > 10)
sum(RMBase_hg19$supportNum > 20)
sum(RMBase_hg19$supportNum > 30)
sum(RMBase_hg19$supportNum > 30)
RMBase_hg19_gr <- GRanges(seqnames = RMBase_hg19$chromosome,ranges = IRanges(start = RMBase_hg19$modStart,end = RMBase_hg19$modEnd),strand = RMBase_hg19$strand)
RMBase_hg19_gr
RMBase_hg19_gr <- GRanges(seqnames = RMBase_hg19$chromosome,ranges = IRanges(start = RMBase_hg19$modStart,width = 1),strand = RMBase_hg19$strand)
library(BSgenome.Hsapiens.UCSC.hg19)
Views(Hsapiens,RMBase_hg19_gr)
RMBase_hg19_gr <- GRanges(seqnames = RMBase_hg19$chromosome,ranges = IRanges(start = RMBase_hg19$modEnd,width = 1),strand = RMBase_hg19$strand)
Views(Hsapiens,RMBase_hg19_gr)
RMBase_hg19$supportList
RMBase_hg19_gr$Hits = RMBase_hg19$supportNum
saveRDS(RMBase_hg19_gr,"RMBase_hg19_gr.rds")
RMBase_hg19_gr <- readRDS("RMBase_hg19_gr.rds")
RMBase_hg19_gr
RMBase2_hg19_All <- readRDS("RMBase_hg19_gr.rds")
set.seed(2)
RMBase_sample <- RMBase2_hg19_All[sample.int(length(RMBase2_hg19_All),20000)]
RMBase_sample
library(BSgenome.Hsapiens.UCSC.hg19)
RMBase2_hg19_All <- readRDS("RMBase_hg19_gr.rds")
set.seed(2)
RMBase_All_sample <- RMBase2_hg19_All[sample.int(length(RMBase2_hg19_All),20000)]
Exbytx = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by = "tx")
Control_on_ex <- function(Original_gr,Exbytx,motif = "RRACH") {
Covered_transcripts <- reduce( unlist( subsetByOverlaps(Exbytx, Original_gr) ) )
Sample_sequence(motif, Covered_transcripts, Hsapiens, N = length(Original_gr))
}
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
exbytx = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by = "tx")
Control_on_ex <- function(Original_gr,Exbytx,motif = "RRACH") {
require(m6ALogisticModel)
Covered_transcripts <- reduce( unlist( subsetByOverlaps(Exbytx, Original_gr) ) )
Sample_sequence(motif, Covered_transcripts, Hsapiens, N = length(Original_gr))
}
RMBase_All_sample_ctrl <- Control_on_ex(RMBase_All_sample,exbytx)
length(RMBase_All_sample_ctrl)
RMBase_All_sample_ctrl
mm10Conserved_hg19 <- rowRanges( m6ALogisticModel::SE_example )
mm10Conserved_hg19 <- rowRanges( m6ALogisticModel::SE_example )
set.seed(3)
mm10Conservedhg19_sample <- mm10Conserved_hg19[sample.int(length(mm10Conserved_hg19),20000)]
RMBase_All_sample_ctrl <- Control_on_ex(mm10Conservedhg19_sample,exbytx) #Notice that, the major draw back of this approach is that, the motifs on
library(BSgenome.Hsapiens.UCSC.hg19)
RMBase2_hg19_All <- readRDS("RMBase_hg19_gr.rds")
set.seed(2)
RMBase_All_sample <- RMBase2_hg19_All[sample.int(length(RMBase2_hg19_All),20000)]
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
exbytx = exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by = "tx")
Control_on_ex <- function(Original_gr,Exbytx,motif = "RRACH") {
require(m6ALogisticModel)
Covered_transcripts <- reduce( unlist( subsetByOverlaps(Exbytx, Original_gr) ) )
Sample_sequence(motif, Covered_transcripts, Hsapiens, N = length(Original_gr))
}
RMBase_All_ctrl <- Control_on_ex(RMBase_All_sample,exbytx) #Notice that, the major draw back of this approach is that, the motifs on those long
RMBase_conserved <- rowRanges( m6ALogisticModel::SE_example )
set.seed(3)
RMBase_conserved_sample <- RMBase_conserved[sample.int(length(RMBase_conserved),20000)]
RMBase_conserved_ctrl <- Control_on_ex(RMBase_conserved_sample,exbytx)
RMBase_support_30 <- RMBase2_hg19_All[RMBase2_hg19_All$Hits >= 30]
set.seed(4)
RMBase_conserved_sample <- RMBase_conserved[sample.int(length(RMBase_conserved),20000)]
et.seed(3)
set.seed(3)
RMBase_conserved_sample <- RMBase_conserved[sample.int(length(RMBase_conserved),20000)]
RMBase_support_30 <- RMBase2_hg19_All[RMBase2_hg19_All$Hits >= 30]
set.seed(4)
RMBase_support30_sample <- RMBase_support_30[sample.int(length(RMBase_support_30),20000)]
RMBase_support30_ctrl <- Control_on_ex(RMBase_support30_sample,exbytx)
RMBase <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/RMBase.rds")
RMBase
mean(RMBase$long_exon)
RMBase_SVM <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/RMBase.rds")
set.seed(5)
RMBase_SVM_sample <- RMBase_SVM[sample.int(length(RMBase_SVM),20000)]
RMBase_SVM_ctrl <- Control_on_ex(RMBase_SVM_sample,exbytx)
RMBase_SVM_ctrl
Single_base <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/SINGLE_BASE.rds")
set.seed(6)
Single_base_sample <- Single_base[sample.int(length(Single_base),20000)]
Single_base_ctrl <- Control_on_ex(Single_base_sample,exbytx)
Single_base_ctrl
Single_base_sample
Views(Hsapiens, Single_base + 2)
grepl("RRACH", Views(Hsapiens, Single_base + 2) )
mean(grepl("RRACH", Views(Hsapiens, Single_base + 2) ))
grepl("RRACH", Views(Hsapiens, Single_base + 2), fixed = F)
Single_base <- Single_base[vcountPattern("RRACH", DNAStringSet( Views(Hsapiens, Single_base + 2) ), fixed = F) > 0]
Single_base
set.seed(6)
Single_base_sample <- Single_base[sample.int(length(Single_base),20000)]
Single_base_ctrl <- Control_on_ex(Single_base_sample,exbytx)
SE_assay <- matrix(NA,ncol = 9,nrow = 5*20000*2)
colnames(SE_assay) <- c("RB2_all","RB2_cons","RB2_s30","RB2_svm","SBmotif","5 vs 4","5 vs 3","5 vs 2", "5 vs 1")
colnames(SE_assay)
SE_assay[1:40000,1] = rep(c(1,0),each = 20000)
SE_assay[40001:80000,2] = rep(c(1,0),each = 20000)
SE_assay <- matrix(NA,ncol = 9,nrow = 5*20000*2)
colnames(SE_assay) <- c("RB2_all","RB2_cons","RB2_s30","RB2_svm","SBmotif","5 vs 4","5 vs 3","5 vs 2", "5 vs 1")
for(i in 1:5) {
SE_assay[(1+40000*(i-1)):40000*i,i] = rep(c(1,0),each = 20000)
}
40000*(5-1)
5*20000*2
SE_assay <- matrix(NA,ncol = 9,nrow = 5*20000*2)
colnames(SE_assay) <- c("RB2_all","RB2_cons","RB2_s30","RB2_svm","SBmotif","5 vs 4","5 vs 3","5 vs 2", "5 vs 1")
for(i in 1:5) {
SE_assay[(1+40000*(i-1)):(40000*i),i] = rep(c(1,0),each = 20000)
}
pair_i1
pair_i1 = 1
pair_i1 = 2
i1_idx <- (1+40000*(pair_i1-1)):(40000*pair_i1 - 20000)
i2_idx <- (1+40000*(pair_i2-1)):(40000*pair_i2 - 20000)
pair_i2 = 5
i1_idx <- (1+40000*(pair_i1-1)):(40000*pair_i1 - 20000)
i2_idx <- (1+40000*(pair_i2-1)):(40000*pair_i2 - 20000)
i2_idx
ADD_VS <- function(pair_i1,pair_i2,ncol) {
i1_idx <- (1+40000*(pair_i1-1)):(40000*pair_i1 - 20000)
i2_idx <- (1+40000*(pair_i2-1)):(40000*pair_i2 - 20000)
SE_assay[i1_idx,ncol] = 1
SE_assay[i2_idx,ncol] = 0
}
SE_assay <- matrix(NA,ncol = 9,nrow = 5*20000*2)
colnames(SE_assay) <- c("RB2_all","RB2_cons","RB2_s30","RB2_svm","SBmotif","5 vs 4","5 vs 3","5 vs 2", "5 vs 1")
for(i in 1:5) {
SE_assay[(1+40000*(i-1)):(40000*i),i] = rep(c(1,0),each = 20000)
}
ADD_VS <- function(pair_i1,pair_i2,ncol) {
i1_idx <- (1+40000*(pair_i1-1)):(40000*pair_i1 - 20000)
i2_idx <- (1+40000*(pair_i2-1)):(40000*pair_i2 - 20000)
SE_assay[i1_idx,ncol] = 1
SE_assay[i2_idx,ncol] = 0
}
ADD_VS(5,4,6)
ADD_VS(5,3,7)
ADD_VS(5,2,8)
ADD_VS(5,1,9)
image(ADD_VS)
ADD_VS
image(SE_assay)
SE_assay <- matrix(NA,ncol = 9,nrow = 5*20000*2)
colnames(SE_assay) <- c("RB2_all","RB2_cons","RB2_s30","RB2_svm","SBmotif","5 vs 4","5 vs 3","5 vs 2", "5 vs 1")
for(i in 1:5) {
SE_assay[(1+40000*(i-1)):(40000*i),i] = rep(c(1,0),each = 20000)
}
image(SE_assay)
ADD_VS(5,4,6)
ADD_VS(5,3,7)
ADD_VS(5,2,8)
ADD_VS(5,1,9)
table(SE_assay[,9])
table(SE_assay[,1])
table(SE_assay[,8])
table(SE_assay[,8])
debug(ADD_VS)
ADD_VS(5,4,6)
ncol
undebug(ADD_VS)
ADD_VS <- function(pair_i1,pair_i2,ncol) {
i1_idx <- (1+40000*(pair_i1-1)):(40000*pair_i1 - 20000)
i2_idx <- (1+40000*(pair_i2-1)):(40000*pair_i2 - 20000)
SE_assay[i1_idx,ncol] = 1
SE_assay[i2_idx,ncol] = 0
return(SE_assay)
}
SE_assay <- ADD_VS(5,4,6)
SE_assay <- ADD_VS(5,3,7)
SE_assay <- ADD_VS(5,2,8)
SE_assay <- ADD_VS(5,1,9)
image(SE_assay)
rowRanges(SE_X) = c(RMBase_All_sample,RMBase_All_ctrl,
RMBase_conserved_sample,RMBase_conserved_ctrl,
RMBase_support30_sample,RMBase_support30_ctrl,
RMBase_SVM_sample,RMBase_SVM_ctrl,
Single_base_sample,Single_base_ctrl)
RMBase_conserved_sample
RMBase_All_sample
mcols(RMBase_All_sample) = NULL
rowRanges(SE_X) = c(RMBase_All_sample,RMBase_All_ctrl,
RMBase_conserved_sample,RMBase_conserved_ctrl,
RMBase_support30_sample,RMBase_support30_ctrl,
RMBase_SVM_sample,RMBase_SVM_ctrl,
Single_base_sample,Single_base_ctrl)
mcols(RMBase_support30_sample) = NULL
rowRanges(SE_X) = c(RMBase_All_sample,RMBase_All_ctrl,
RMBase_conserved_sample,RMBase_conserved_ctrl,
RMBase_support30_sample,RMBase_support30_ctrl,
RMBase_SVM_sample,RMBase_SVM_ctrl,
Single_base_sample,Single_base_ctrl)
RMBase_SVM_sample
mcols(RMBase_SVM_sample) = NULL
rowRanges(SE_X) = c(RMBase_All_sample,RMBase_All_ctrl,
RMBase_conserved_sample,RMBase_conserved_ctrl,
RMBase_support30_sample,RMBase_support30_ctrl,
RMBase_SVM_sample,RMBase_SVM_ctrl,
Single_base_sample,Single_base_ctrl)
SE_X <- SummarizedExperiment(SE_assay)
rowRanges(SE_X) = c(RMBase_All_sample,RMBase_All_ctrl,
RMBase_conserved_sample,RMBase_conserved_ctrl,
RMBase_support30_sample,RMBase_support30_ctrl,
RMBase_SVM_sample,RMBase_SVM_ctrl,
Single_base_sample,Single_base_ctrl)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_expanded_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
SE_test <- predictors.annot(se = SE_X,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
width(RMBase_conserved_sample)
table(RMBase_conserved_sample)
table(width(RMBase_conserved_sample))
rowRanges(SE_X) = c(RMBase_All_sample,RMBase_All_ctrl-2,
RMBase_conserved_sample,RMBase_conserved_ctrl-2,
RMBase_support30_sample,RMBase_support30_ctrl-2,
RMBase_SVM_sample,RMBase_SVM_ctrl-2,
Single_base_sample,Single_base_ctrl-2)
table(width(rowRanges(SE_X)))
SE_test <- predictors.annot(se = SE_X,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
saveRDS(SE_test,"SE_RMBaseVS.rds")
mcols(SE_test)
