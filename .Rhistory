decision_method = "BPM",
save_dir = "LogisticModel_x"
)
logistic.modeling
group_list_default = list(
UTR5 = c("UTR5", "Pos_UTR5", "length_UTR5"),
CDS = c("CDS", "Pos_CDS", "length_CDS"),
UTR3 = c("UTR3", "Pos_UTR3", "length_UTR3"),
Exon = c("exons", "Pos_exons", "long_exon","Last_exons_50bp"),
Gene = c("Pos_Tx","length_gene_ex","length_gene_full","Isoform_num","sncRNA","lncRNA","HK_genes"),
LandMarks = c("m6Am","Start_codons","Stop_codons"),
Motif = c("AAACA","GAACA","AGACA","GGACA","AAACT","GAACT","AGACT","GGACT","AAACC","GAACC","AGACC","GGACC"),
Structure = c("struct_hybridize","struct_loop"),
Evolution = c("PC_1nt","PC_101nt","FC_1nt","FC_101nt"),
miRNA_RBP = c("HNRNPC_eCLIP", "YTHDC1_TREW", "YTHDF1_TREW", "YTHDF2_TREW", "miR_targeted_genes","TargetScan","Verified_miRtargets"),
Batch = c("GC_cont_genes","GC_cont_101bp","Intercept")
)
names(group_list_default) = c("5'UTR","CDS","3'UTR","Exon","Gene","Marks","Motif","Struc","Evolution","miRNA & RBP","Batch")
devtools::use_data(group_list_default, m6ALogisticModel)
devtools::use_data(group_list_default, "/Users/zhenwei/Documents/GitHub/m6ALogisticModel")
devtools::use_data("/Users/zhenwei/Documents/GitHub/m6ALogisticModel",group_list_default)
?devtools::use_data
setwd("/Users/zhenwei/Documents/GitHub/m6ALogisticModel")
devtools::use_data(group_list_default)
devtools::use_data(group_list_default)
?m6ALogisticModel::logistic.modeling
Feature_lst_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
miRanda = miRanda_hg19_gr,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr
)
setwd("/Users/zhenwei/Documents/GitHub/m6ALogisticModel")
eCLIP_HNRNPC_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/eCLIP_HNRNPC.rds")
devtools::use_data(eCLIP_HNRNPC_gr)
YTHDC1_TREW_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/YTHDC1_TREW_gr.rds")
devtools::use_data(YTHDC1_TREW_gr)
YTHDF1_TREW_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/YTHDF1_TREW_gr.rds")
devtools::use_data(YTHDF1_TREW_gr)
YTHDF2_TREW_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/YTHDF2_TREW_gr.rds")
devtools::use_data(YTHDF2_TREW_gr)
miR_targeted_genes_grl <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/miR_targeted_genes_grl.rds")
devtools::use_data(miR_targeted_genes_grl)
TargetScan_hg19_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/TargetScan_hg19_gr.rds")
devtools::use_data(TargetScan_hg19_gr)
verified_targets_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/verified_targets.rds")
devtools::use_data(verified_targets_gr)
HK_hg19_eids = names(readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/HK_genes_gr.rds"))
devtools::use_data(HK_hg19_eids)
knitr::opts_chunk$set(echo = TRUE)
library(m6ALogisticModel)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
source('~/Documents/GitHub/m6ALogisticModel/R/predictors.annot.R')
library(SummarizedExperiment)
RMBase2_hg19_gr <- rowRanges( SE_example )
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
mean(RMBase2_hg19_gr %over% exons(TxDb.Hsapiens.UCSC.hg19.knownGene))
RMBase2_hg19_gr <- subsetByOverlaps(RMBase2_hg19_gr,exons(TxDb.Hsapiens.UCSC.hg19.knownGene))
Num <- length(RMBase2_hg19_gr)
exbytx_hg19 <- exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by = c("tx"))
Subset_regions <- unlist( subsetByOverlaps( exbytx_hg19 , RMBase2_hg19_gr) )
Random_RRACH <-  m6ALogisticModel::Sample_sequence("RRACH", reduce( Subset_regions ), Hsapiens, N = Num) - 2
Random_A <-  m6ALogisticModel::Sample_sequence("A", reduce( Subset_regions ), Hsapiens, N = Num)
width(Random_RRACH)
library(m6ALogisticModel)
knitr::opts_chunk$set(echo = TRUE)
exbytx_hg19 <- exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene, by = c("tx"))
Subset_regions <- unlist( subsetByOverlaps( exbytx_hg19 , RMBase2_hg19_gr) )
Random_RRACH <-  m6ALogisticModel::Sample_sequence("RRACH", reduce( Subset_regions ), Hsapiens, N = Num) - 2
Random_A <-  m6ALogisticModel::Sample_sequence("A", reduce( Subset_regions ), Hsapiens, N = Num)
Row_Ranges <-
reduce(c(RMBase2_hg19_gr,
Random_RRACH,
Random_A))
SE <- SummarizedExperiment( matrix(rep(NA,6*length(Row_Ranges)) ,ncol = 6) )
rowRanges(SE) = Row_Ranges
library(dplyr)
GR_list <- list(RMBase2_hg19_gr,Random_RRACH,Random_A)
PhastCons_scores_all <- scores(phastCons100way.UCSC.hg19, rowRanges(SE))$scores
FitCons_scores_all <- scores(fitCons.UCSC.hg19, rowRanges(SE))$scores
for (i in 1:3) {
indx <- rowRanges(SE) %over% GR_list[[i]]
assay(SE)[indx,i] = PhastCons_scores_all[indx]
assay(SE)[indx,i+3] = FitCons_scores_all[indx]
}
colnames(SE) = paste0( rep(c("PastCons","FitCons"),
each = 3),"_",
rep(c("m6A","RRACH","A"),2) )
Plot_df <- reshape2::melt(assay(SE))
Plot_df$X_intercept = NA
cut_offs <- c(.9,.9,.9,.5,.5,.5)
for (i in 1:(2*3)){
Plot_df$X_intercept[Plot_df$Var2 == colnames(SE)[i]] <- cut_offs[i]
}
library(ggplot2)
ggplot(Plot_df) + geom_histogram(aes(x = value),fill = "grey") + facet_wrap(~Var2, nrow = 2, scales = "free_y") + theme_classic() + geom_vline(aes(xintercept = X_intercept),colour = "blue")
for(i in 1:6) {
assay(SE)[,i] <- as.numeric(assay(SE)[,i] > cut_offs[i])
}
#Calculate proportions of positive instances in Target
for(i in 1:6) {
cat( paste0(colnames(SE)[i],": ", round( mean( assay(SE)[,i],na.rm = T) ,3) , "\n"))
}
Plot_df <- reshape2::melt(assay(SE))
Plot_df$X_intercept = NA
cut_offs <- c(.9,.9,.9,.4,.4,.4)
for (i in 1:(2*3)){
Plot_df$X_intercept[Plot_df$Var2 == colnames(SE)[i]] <- cut_offs[i]
}
library(ggplot2)
ggplot(Plot_df) + geom_histogram(aes(x = value),fill = "grey") + facet_wrap(~Var2, nrow = 2, scales = "free_y") + theme_classic() + geom_vline(aes(xintercept = X_intercept),colour = "blue")
for(i in 1:6) {
assay(SE)[,i] <- as.numeric(assay(SE)[,i] > cut_offs[i])
}
#Calculate proportions of positive instances in Target
for(i in 1:6) {
cat( paste0(colnames(SE)[i],": ", round( mean( assay(SE)[,i],na.rm = T) ,3) , "\n"))
}
SE <- SummarizedExperiment( matrix(rep(NA,6*length(Row_Ranges)) ,ncol = 6) )
rowRanges(SE) = Row_Ranges
for (i in 1:3) {
indx <- rowRanges(SE) %over% GR_list[[i]]
assay(SE)[indx,i] = PhastCons_scores_all[indx]
assay(SE)[indx,i+3] = FitCons_scores_all[indx]
}
colnames(SE) = paste0( rep(c("PastCons","FitCons"),
each = 3),"_",
rep(c("m6A","RRACH","A"),2) )
Plot_df <- reshape2::melt(assay(SE))
Plot_df$X_intercept = NA
cut_offs <- c(.9,.9,.9,.4,.4,.4)
for (i in 1:(2*3)){
Plot_df$X_intercept[Plot_df$Var2 == colnames(SE)[i]] <- cut_offs[i]
}
library(ggplot2)
ggplot(Plot_df) + geom_histogram(aes(x = value),fill = "grey") + facet_wrap(~Var2, nrow = 2, scales = "free_y") + theme_classic() + geom_vline(aes(xintercept = X_intercept),colour = "blue")
for(i in 1:6) {
assay(SE)[,i] <- as.numeric(assay(SE)[,i] > cut_offs[i])
}
#Calculate proportions of positive instances in Target
for(i in 1:6) {
cat( paste0(colnames(SE)[i],": ", round( mean( assay(SE)[,i],na.rm = T) ,3) , "\n"))
}
saveRDS(SE,"SE2.rds")
SE
library(m6ALogisticModel)
library(SummarizedExperiment)
Group_list <- group_list_default[names(group_list_default) != "Evolution"]
set.seed(2)
m6ALogisticModel::logistic.modeling(SE,
save_dir = "Conservation_scores",
group_list = Group_list,
MCMC_iterations = 100000)
colnames(SE)
assay(SE)
debug(logistic.modeling)
m6ALogisticModel::logistic.modeling(SE,
save_dir = "Conservation_scores",
group_list = Group_list,
MCMC_iterations = 100000)
m6ALogisticModel::logistic.modeling(SE,
save_dir = "Conservation_scores",
group_list = Group_list,
MCMC_iterations = 100000)
Design$Y
Design
Features
SE <- m6ALogisticModel::predictors.annot(se = SE,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = BSgenome.Hsapiens.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_hg19,
HK_genes_list = HK_hg19_eids)
Feature_List_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr
)
SE <- m6ALogisticModel::predictors.annot(se = SE,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = BSgenome.Hsapiens.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_hg19,
HK_genes_list = HK_hg19_eids)
table(width(RMBase2_hg19_gr))
table(width(Random_RRACH))
width(table(Random_A))
table(width(Random_A))
table(rowRanges(SE))
table(width(rowRanges(SE)))
?reduce
Row_Ranges <-
reduce(c(RMBase2_hg19_gr,
Random_RRACH,
Random_A),min.gapwidth=0L)
table(width(Row_Ranges))
Row_Ranges <-
reduce(c(RMBase2_hg19_gr,
Random_RRACH,
Random_A), min.gapwidth=0L)
SE <- SummarizedExperiment( matrix(rep(NA,6*length(Row_Ranges)) ,ncol = 6) )
rowRanges(SE) = Row_Ranges
library(dplyr)
GR_list <- list(RMBase2_hg19_gr,Random_RRACH,Random_A)
PhastCons_scores_all <- scores(phastCons100way.UCSC.hg19, rowRanges(SE))$scores
FitCons_scores_all <- scores(fitCons.UCSC.hg19, rowRanges(SE))$scores
for (i in 1:3) {
indx <- rowRanges(SE) %over% GR_list[[i]]
assay(SE)[indx,i] = PhastCons_scores_all[indx]
assay(SE)[indx,i+3] = FitCons_scores_all[indx]
}
colnames(SE) = paste0( rep(c("PastCons","FitCons"),
each = 3),"_",
rep(c("m6A","RRACH","A"),2) )
Plot_df <- reshape2::melt(assay(SE))
Plot_df$X_intercept = NA
cut_offs <- c(.9,.9,.9,.4,.4,.4)
for (i in 1:(2*3)){
Plot_df$X_intercept[Plot_df$Var2 == colnames(SE)[i]] <- cut_offs[i]
}
library(ggplot2)
ggplot(Plot_df) + geom_histogram(aes(x = value),fill = "grey") + facet_wrap(~Var2, nrow = 2, scales = "free_y") + theme_classic() + geom_vline(aes(xintercept = X_intercept),colour = "blue")
for(i in 1:6) {
assay(SE)[,i] <- as.numeric(assay(SE)[,i] > cut_offs[i])
}
#Calculate proportions of positive instances in Target
for(i in 1:6) {
cat( paste0(colnames(SE)[i],": ", round( mean( assay(SE)[,i],na.rm = T) ,3) , "\n"))
}
Feature_List_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr
)
SE <- m6ALogisticModel::predictors.annot(se = SE,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = BSgenome.Hsapiens.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_hg19,
HK_genes_list = HK_hg19_eids)
SE <- readRDS("SE.rds")
saveRDS(SE,"SE2.rds")
getwd()
rbind(c(1,2,3))%*%cbind(c(1,2,3),c(2,3,4))
cat("Summary plots are generated.\n")
2^100
2^90
1000*0.516344+1000* 0.054151
1000*0.516344+1000* 0.054151
-5000.000000 * 0.483656 + -100.000000 * 0.945849
-2512.865 +  570.495
(10n* x+ 1/2)/10n
(10^n* x+ 1/2)/10^n
n = 1
x = -685.95
(10^n* x+ 1/2)/10^n
(10 * x + (1/2))/10
10 * x
(10 * x + (.5))/10
knitr::opts_chunk$set(echo = TRUE)
read_eCLIP <- function(Connection){
eCLIP_df <- read.table(Connection, header = F, sep = "\t")
eCLIP_gr <- GRanges(seqnames = eCLIP_df$V1,
strand = eCLIP_df$V6,
ranges = IRanges(
eCLIP_df$V2,
eCLIP_df$V3
))
eCLIP_gr$Log2_FC <- eCLIP_df$V7
eCLIP_gr$p_value <-  10^(-1*eCLIP_df$V8)
eCLIP_gr$fdr <- p.adjust(eCLIP_gr$p_value, method = "fdr")
eCLIP_gr
}
HNRNPC_rep1 <- read_eCLIP("/Users/zhenwei/Documents/GitHub/TREW-cons/eCLIP_collection/HNRNPC_rep1_ENCFF401SPQ.bed")
read_eCLIP <- function(Connection){
require(GenomicRanges)
eCLIP_df <- read.table(Connection, header = F, sep = "\t")
eCLIP_gr <- GRanges(seqnames = eCLIP_df$V1,
strand = eCLIP_df$V6,
ranges = IRanges(
eCLIP_df$V2,
eCLIP_df$V3
))
eCLIP_gr$Log2_FC <- eCLIP_df$V7
eCLIP_gr$p_value <-  10^(-1*eCLIP_df$V8)
eCLIP_gr$fdr <- p.adjust(eCLIP_gr$p_value, method = "fdr")
eCLIP_gr
}
HNRNPC_rep1 <- read_eCLIP("/Users/zhenwei/Documents/GitHub/TREW-cons/eCLIP_collection/HNRNPC_rep1_ENCFF401SPQ.bed")
HNRNPC_rep2 <- read_eCLIP("/Users/zhenwei/Documents/GitHub/TREW-cons/eCLIP_collection/HNRNPC_rep2_ENCFF738FJS.bed")
HNRNPC_rep1_f <- HNRNPC_rep1[HNRNPC_rep1$fdr < .05 & HNRNPC_rep1$Log2_FC > 1]
HNRNPC_rep2_f <- HNRNPC_rep2[HNRNPC_rep2$fdr < .05 & HNRNPC_rep2$Log2_FC > 1]
sum(HNRNPC_rep1_f %over% HNRNPC_rep2_f)
Consistent_HNRNPC <- reduce(c(
subsetByOverlaps(HNRNPC_rep1_f,HNRNPC_rep2_f),
subsetByOverlaps(HNRNPC_rep2_f,HNRNPC_rep1_f)
))
width(Consistent_HNRNPC)
length(width(Consistent_HNRNPC))
FTO_rep1 <- read_eCLIP("/Users/zhenwei/Documents/GitHub/TREW-cons/eCLIP_collection/FTO_Rep1_ENCFF465VTS.bed")
FTO_rep2 <- read_eCLIP("/Users/zhenwei/Documents/GitHub/TREW-cons/eCLIP_collection/FTO_Rep2_ENCFF485IYX.bed")
FTO_rep1_f <- FTO_rep1[FTO_rep1$fdr < .05 & FTO_rep1$Log2_FC > 1]
FTO_rep2_f <- FTO_rep2[FTO_rep2$fdr < .05 & FTO_rep2$Log2_FC > 1]
sum(FTO_rep1_f %over% FTO_rep2_f)
Consistent_FTO <- reduce(c(
subsetByOverlaps(FTO_rep1_f,FTO_rep2_f),
subsetByOverlaps(FTO_rep2_f,FTO_rep1_f)
))
length(Consistent_FTO)
width(Consistent_FTO)
library(m6ALogisticModel)
RMBASE@<- rowRanges( m6ALogisticModel::SE_example )
RMBASE2+gr<- rowRanges( m6ALogisticModel::SE_example )
RMBASE2_gr<- rowRanges( m6ALogisticModel::SE_example )
sum( RMBASE2_gr%over%Consistent_FTO)
sum( RMBASE2_gr%over%(Consistent_FTO + 100))
sum( RMBASE2_gr%over%(Consistent_HNRNPC + 100))
saveRDS( Consistent_FTO, "eCLIP_FTO.rds")
saveRDS( Consistent_FTO + 100, "eCLIP_FTO_flk100.rds")
?m6ALogisticModel::logistic.modeling
knitr::opts_chunk$set(echo = TRUE)
library(m6ALogisticModel)
library(SummarizedExperiment)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
eCLIP_FTO = readRDS("eCLIP_FTO.rds"),
eCLIP_FTO_p100 = readRDS("eCLIP_FTO_flk100.rds")
)
SE_features_added <- predictors.annot(se = SE_example,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_hg19,
HK_genes_list = HK_hg19_eids)
?logistic.modeling
SE_features_added$ID
grepl("fto",SE_features_added$ID,ignore.case = T)
group_list_default
group_list2 = group_list_default
group_list2$`miRNA & RBP`
group_list2 = group_list_default
group_list2$`miRNA & RBP` = c(group_list2$`miRNA & RBP`,"eCLIP_FTO","eCLIP_FTO_p100")
logistic.modeling(
SE_features_added[,grepl("fto",SE_features_added$ID,ignore.case = T)],
MCMC_iterations = 20000,
decision_method = "BPM",
save_dir = "LogisticModel_x",
sample_names_coldata = "ID",
group_list = group_list2
)
Design_midbr <- mcols(SE_features_added)
Design_midbr
SE_features_added$ID
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-midbrain_Fto-"]
?glm
glm(Target ~ .,family = binomial(link = "logit"), data = Design_midbr)
Design_midbr
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  na.omit( Design_midbr) > 0 )
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-midbrain_Fto-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
Design_midbr = Design_midbr[,colnames(Design_midbr)!="eCLIP_FTO_p100"]
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
SE_features_added$ID
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_human-HEK293A_METTL16-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
SE_features_added$ID
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_human-A549_KIAA1429-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
SE_features_added$ID
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-liver-N_FTO+"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
SE_features_added$ID
Design_midbr <- mcols(SE_features_added)
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-MEF-S_ALKBH5-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
Design_midbr$Target = NULL
md1 <- glm(eCLIP_FTO ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
TREW_hg19 <- read.csv("TREW-hg19.corrected.txt")
knitr::opts_chunk$set(echo = TRUE)
TREW_hg19 <- read.csv("TREW-hg19.corrected.txt")
unique(TREW_hg19$Technique)
unique( TREW_hg19$Target[TREW_hg19$Technique == "ParCLIP"] )
Extract_ParCLIP_gr <- function(Target_name,TREW_table){
TREW_sub  <- TREW_table[(TREW_table$Target == Target_name) & (TREW_hg19$Technique == "ParCLIP"),]
Gr_targ <- GRanges(seqnames = TREW_sub$Chromosome, strand = TREW_sub$Strand,
ranges = IRanges(start = TREW_sub$Start, end = TREW_sub$End))
saveRDS(Gr_targ,paste0(Target_name,"_TREW_gr.rds"))
}
Extract_gr("METTL3", TREW_hg19)
unique( TREW_hg19$Target[is.na(TREW_hg19$Technique)] )
TREW_hg19_Technique[is.na(TREW_hg19$Technique)] = "ParCLIP"
TREW_hg19$Technique[is.na(TREW_hg19$Technique)] = "ParCLIP"
Extract_ParCLIP_gr <- function(Target_name,TREW_table){
TREW_sub  <- TREW_table[(TREW_table$Target == Target_name) & (TREW_hg19$Technique == "ParCLIP"),]
Gr_targ <- GRanges(seqnames = TREW_sub$Chromosome, strand = TREW_sub$Strand,
ranges = IRanges(start = TREW_sub$Start, end = TREW_sub$End))
saveRDS(Gr_targ,paste0(Target_name,"_TREW_gr.rds"))
}
Extract_ParCLIP_gr("METTL3", TREW_hg19)
TREW_hg19 <- read.csv("TREW-hg19.corrected.txt")
unique( TREW_hg19$Target[TREW_hg19$Technique == "ParCLIP"] )
TREW_hg19_Target = as.character(TREW_hg19$Target)
TREW_hg19_Target[is.na(TREW_hg19$Target)] = "YTHDF2"
TREW_hg19$Target = TREW_hg19_Target
TREW_hg19$Technique[is.na(TREW_hg19$Technique)] = "ParCLIP"
Extract_ParCLIP_gr <- function(Target_name,TREW_table){
TREW_sub  <- TREW_table[(TREW_table$Target == Target_name) & (TREW_hg19$Technique == "ParCLIP"),]
Gr_targ <- GRanges(seqnames = TREW_sub$Chromosome, strand = TREW_sub$Strand,
ranges = IRanges(start = TREW_sub$Start, end = TREW_sub$End))
saveRDS(Gr_targ,paste0(Target_name,"_TREW_gr.rds"))
}
Extract_ParCLIP_gr("METTL3", TREW_hg19)
Extract_ParCLIP_gr("METTL14", TREW_hg19)
Extract_ParCLIP_gr("WTAP", TREW_hg19)
METTL16mRNAs <- read.table( "GSE103948_METTL16mRNAs.txt" , sep = "\t")
METTL16mRNAs <- read.table( "GSE103948_METTL16mRNAs.txt" , sep = "/t")
METTL16mRNAs <- read.table( "GSE103948_METTL16mRNAs.txt" , sep = "/t", header = T)
read.table("GSE103948_METTL16mRNAs.txt" , sep = "/t", header = T)
METTL16mRNAs <- read.table("GSE103948_METTL16mRNAs.txt" , sep = "/t", header = T)
METTL16mRNAs <- read.table("GSE103948_METTL16mRNAs.txt" , sep = "\t", header = T)
METTL16mRNAs <- read.table("GSE103948_METTL16mRNAs.txt" , sep = " ", header = T)
METTL16mRNAs <- read.table("GSE103948_METTL16mRNAs.txt" , sep = "\t", header = T)
METTL16mRNAs <- read.table("GSE103948_METTL16mRNAs.txt" , sep = "\t", header = T,row.names = F)
METTL16mRNAs <- read.csv("GSE103948_METTL16mRNAs.csv")
METTL16mRNAs <- read.csv("GSE103948_METTL16mRNAs.csv")
METTL16lncRNAs <- read.csv("GSE103948_METTL16lncRNAs.csv")
METTL16sncRNAs <- read.csv("GSE103948_METTL16sncRNAs.csv")
METTL16mRNAs <- read.csv("GSE103948_METTL16mRNAs.csv")
METTL16lncRNAs <- read.csv("GSE103948_METTL16lncRNAs.csv")
METTL16sncRNAs <- read.csv("GSE103948_METTL16ncRNAs.csv")
METTL16sncRNAs
GRanges(strand = M16_df$Strand, seqnames = M16_df$Chromosome, ranges  = IRanges(start = M16_df[,2],end = M16_df[,3]))
to_GR <- function(M16_df){
require(GenomicRanges)
GRanges(strand = M16_df$Strand, seqnames = M16_df$Chromosome, ranges  = IRanges(start = M16_df[,2],end = M16_df[,3]))
}
to_GR(METTL16mRNAs)
GR_M16 <- c(to_GR(METTL16mRNAs),
to_GR(METTL16lncRNAs),
to_GR(METTL16sncRNAs))
GR_M16
View(SE_features_added)
sum( rowRanges(m6ALogisticModel::SE_example) %over% GR_M16 )
M16_df$Chromosome
METTL16mRNAs
to_GR <- function(M16_df){
require(GenomicRanges)
GRanges(strand = M16_df$Strand, seqnames = tolower( M16_df$Chromosome ), ranges  = IRanges(start = M16_df[,2],end = M16_df[,3]))
}
GR_M16 <- c(to_GR(METTL16mRNAs),
to_GR(METTL16lncRNAs),
to_GR(METTL16sncRNAs))
GR_M16
sum( rowRanges(m6ALogisticModel::SE_example) %over% GR_M16 )
sum( rowRanges(m6ALogisticModel::SE_example) %over% (GR_M16 + 100) )
saveRDS(GR_M16 + 100,"METTL16_CLIP.rds")
read.table("GSM936506_PARCLIP_ALKBH5_sites.bed",sep = "\t")
read.table("GSM936506_PARCLIP_ALKBH5_sites.bed",sep = "/t")
liftOver()
library(AnnotationHub)
library(AnnotationHub)
ahub <- AnnotationHub()
ahub.chain <- subset(ahub, rdataclass == "ChainFile")
query(ahub.chain, c("hg18", "hg19"))
chain <- ahub.chain[ahub.chain$title == "hg18ToHg19.over.chain.gz"]
chain <- chain[[1]]
saveRDS(chain,"/Users/zhenwei/Datasets/ChainFiles/chain-hg18ToHg19.rds")
chain <- readRDS("/Users/zhenwei/Datasets/ChainFiles/chain-hg18ToHg19.rds")
?liftOver
readr::read_tsv("GSM936506_PARCLIP_ALKBH5_sites.bed.txt")
PARCLIP_ALKBH5 <- readr::read_tsv("GSM936506_PARCLIP_ALKBH5_sites.bed.txt")
PARCLIP_ALKBH5 <- import.bed("GSM936506_PARCLIP_ALKBH5_sites.bed.txt")
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome")
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.UCSC.hg18")
library("BSgenome.Hsapiens.UCSC.hg18")
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.UCSC.hg18")
