subtitle = HDER,
x = "predictors")
suppressWarnings( ggsave("miCLIPHits_logistic_model.pdf", p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
glm_regular <- function(Y,
PREDICTORS,
HDER = "glm",
family = c("gaussian","binomial","poisson"),
CUT_OFF = 5,
Critical_value = 0.05) {
stopifnot(length(Y) == nrow(PREDICTORS))
family <- match.arg(family)
indx_no_info <- sapply( PREDICTORS, function(x) { if (is.logical(x)){
return( (sum(x) <= CUT_OFF | sum(!x) <= CUT_OFF) )
} else {
return(F)
}
} )
if(any(indx_no_info)){
warning(paste0("dropped dummy variable feature(s): ", paste0( gsub("TRUE","",names(indx_no_info[which(indx_no_info)])) , collapse=", "), "; the threshold is defined by the CUT_OFF argument (sum of TRUE / FALSE entries <= ",CUT_OFF,")."),call. = F, immediate. = T)
}
Model = PREDICTORS[,!indx_no_info]
Model$Y = Y
if( family == "gaussian") {
Fitted_model <-  glm(Y~.,family = gaussian(link = "identity"),data = Model)
}
if( family == "binomial") {
Fitted_model <- glm(Y~., family = binomial(link = "logit"),data = Model)
}
if( family == "poisson") {
Fitted_model <- glm(Y~., family = poisson(link = "log"),data = Model)
}
summary_glm <- summary(Fitted_model)
Critical_value <- qnorm((.05/2)/(ncol(Model)),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
library(ggplot2)
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) +
geom_bar(stat = "identity", width = .4, fill = "blue2", colour = "red", size = 0.1) +
geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) +
coord_flip() + facet_grid(~variable,scales = "free") +
theme_classic() +
labs(title = paste0(family, " linear model on genomic features" ),
subtitle = HDER,
x = "predictors")
suppressWarnings( ggsave( paste0(HDER,"_",family,"_glm.pdf"), p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
}
glm_regular(Y,
mcols(rowgr),
"YTHDF1")
debug(glm_regular)
glm_regular(Y,
mcols(rowgr),
"YTHDF1")
glm_regular(Y,
mcols(rowgr),
"YTHDF1")
glm_regular(Y,
mcols(rowgr),
"YTHDF1",
"poisson")
undebug(glm_regular)
glm_regular(Y,
mcols(rowgr),
"YTHDF1",
"poisson")
Y <- countOverlaps(rowgr,example_ythdf1)
rowgr
row_ranges = rowRanges(rowgr)
dir_plot = "./Confidence"
list.files(dir_plot)
RDS_dir <- list.files(dir_plot)
i = RDS_dir[1]
RDS_dir <- gsub(".rds","", list.files(dir_plot))
example_ythdf1 <- readRDS(paste0("./Confidence/",RDS_dir,".rds"))
i = RDS_dir[1]
readRDS(paste0("./Confidence/",RDS_dir,".rds"))
paste0("./Confidence/",RDS_dir,".rds")
example_ythdf1 <- readRDS(paste0("./Confidence/",i,".rds"))
ranges_i <- readRDS(paste0("./Confidence/",i,".rds"))
Y <- countOverlaps(row_ranges,ranges_i)
glm_regular(Y,
mcols(row_ranges),
i,
"poisson")
Plot_dir_poisson_model <- function(row_ranges,dir_plot = "./Confidence") {
RDS_dir <- gsub(".rds","", list.files(dir_plot))
for(i in RDS_dir) {
ranges_i <- readRDS(paste0("./Confidence/",i,".rds"))
Y <- countOverlaps(row_ranges,ranges_i)
glm_regular(Y,
mcols(row_ranges),
i,
"poisson")
}
}
Plot_dir_poisson_model(rowRanges(rowgr), dir_plot = "./Confidence")
Plot_dir_poisson_model(rowRanges(rowgr), dir_plot = "./All")
Plot_dir_poisson_model <- function(row_ranges,dir_plot = "./Confidence") {
RDS_dir <- gsub(".rds","", list.files(dir_plot))
for(i in RDS_dir) {
ranges_i <- readRDS(paste0(dir_plot,"/",i,".rds"))
Y <- countOverlaps(row_ranges,ranges_i)
glm_regular(Y,
mcols(row_ranges),
i,
"poisson")
}
}
Plot_dir_poisson_model(rowRanges(rowgr), dir_plot = "./All")
gr_features <- rowRanges(rowgr)
mcols(gr_features)
gr_features <- rowRanges(rowgr)
mcols(gr_features) <- mcols(gr_features)[,-c("YTHDF1_TREW","YTHDF2_TREW","YTHDF3_TREW")]
gr_features <- rowRanges(rowgr)
mcols(gr_features) <- mcols(gr_features)[,! colnames(mcols(gr_features)) %in% c("YTHDF1_TREW","YTHDF2_TREW","YTHDF3_TREW")]
Plot_dir_poisson_model(rowRanges(rowgr), dir_plot = "./Confidence")
gr_features <- rowRanges(rowgr)
mcols(gr_features) <- mcols(gr_features)[,! colnames(mcols(gr_features)) %in% c("YTHDF1_TREW","YTHDF2_TREW","YTHDF3_TREW")]
Plot_dir_poisson_model(gr_features, dir_plot = "./Confidence")
Y
hist(Y)
hist(Y,breaks = 100)
hist(Y[Y >0],breaks = 100)
YTHDF1_support_num
YTHDF1_support_num = Y
hist(YTHDF1_support_num[YTHDF1_support_num >0],breaks = 100)
YTHDF1_support_num = Y[Y>0]
hist(YTHDF1_support_num[YTHDF1_support_num >0],breaks = 100)
YTHDF1_support_num = Y[Y>0]
hist(YTHDF1_support_num,breaks = 100)
rpois(length(Y),mean(Y))
rpois(length(YTHDF1_support_num),mean(YTHDF1_support_num))
hist(rpois(length(YTHDF1_support_num),mean(YTHDF1_support_num)))
hist(YTHDF1_support_num,breaks = 100)
hist(rpois(length(YTHDF1_support_num),mean(YTHDF1_support_num)))
hist(YTHDF1_support_num,breaks = 100)
knitr::opts_chunk$set(echo = TRUE)
library(golite)
library(magrittr)
library(org.Hs.eg.db)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
all_eids_hg19 <- names(genes(txdb))
set.seed(1)
eids_bg <- sample(all_eids_hg19, 3500)
eids_set <- sample(eids_bg,300)
gose_result1 <- GOEA(gene_set = eids_set,
back_ground = eids_bg,
orgDb = org.Hs.eg.db,
interpret_term = T,
min_gs_count = 10,
max_gs_count = 1000,
GO_Slim = F)
set.seed(1)
eids_bg <- sample(all_eids_hg19, 3500)
eids_set <- lapply(1:100, sample(eids_bg,300))
eids_set <- lapply(1:100, function(x) sample(eids_bg,300))
gose_result1 <- system.time( goea(gene_set = eids_set,
back_ground = eids_bg,
orgDb = org.Hs.eg.db,
interpret_term = T,
min_gs_count = 10,
max_gs_count = 1000,
GO_Slim = F) )
gose_result1
ego <- system.time( enrichGO(gene          = eids_set[[1]],
universe      = eids_bg,
OrgDb         = org.Hs.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 1,
qvalueCutoff  = 1,
readable      = TRUE))
library(clusterProfiler)
ego <- system.time( enrichGO(gene          = eids_set[[1]],
universe      = eids_bg,
OrgDb         = org.Hs.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 1,
qvalueCutoff  = 1,
readable      = TRUE))
ego
25.016 * 100
gose_result1
library(topGO)
ose_result1 <-  goea(gene_set = eids_set[[1]],
back_ground = eids_bg,
orgDb = org.Hs.eg.db,
interpret_term = T,
min_gs_count = 10,
max_gs_count = 1000,
GO_Slim = F)
gose_result1 <-  goea(gene_set = eids_set[[1]],
back_ground = eids_bg,
orgDb = org.Hs.eg.db,
interpret_term = T,
min_gs_count = 10,
max_gs_count = 1000,
GO_Slim = F)
library(clusterProfiler)
ego <- enrichGO(gene          = eids_set[[1]],
universe      = eids_bg,
OrgDb         = org.Hs.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 1,
qvalueCutoff  = 1,
readable      = TRUE)
readable <- as.data.frame(ego)[,c("ID","Description","pvalue")]
head(readable)
head(readable)
head(gose_result1 )
match(gose_result1$ID,readable$ID)
readable$ID
match(as.character( gose_result1$ID),readable$ID)
head(gose_result1)
match(as.character( gose_result1$term),readable$ID)
gose_result1 <-  goea(gene_set = eids_set[[1]],
back_ground = eids_bg,
orgDb = org.Hs.eg.db,
interpret_term = T,
min_gs_count = 1,
max_gs_count = Inf,
GO_Slim = F)
match(as.character( gose_result1$term),readable$ID)
readable$pvalue[ match(as.character( gose_result1$term),readable$ID) ]
plot_df <- data.frame(
pvalue_golite = gose_result1$p
pvalue_cp = readable$pvalue[ match(as.character( gose_result1$term),readable$ID) ] )
plot_df <- data.frame(
pvalue_golite = gose_result1$p,
pvalue_cp = readable$pvalue[ match(as.character( gose_result1$term),readable$ID) ] )
cor.test(plot_df[,1],plot_df[,2])
cor.test(plot_df[,1],plot_df[,2])
gose_result1 <-  goea(gene_set = eids_set[[1]],
back_ground = eids_bg,
orgDb = org.Hs.eg.db,
interpret_term = T,
min_gs_count = 10,
max_gs_count = 500,
GO_Slim = F)
readable <- as.data.frame(ego)[,c("ID","Description","pvalue")]
head(readable)
plot_df <- data.frame(
pvalue_golite = gose_result1$p,
pvalue_cp = readable$pvalue[ match(as.character( gose_result1$term),readable$ID) ] )
cor.test(plot_df[,1],plot_df[,2])
reshape2::melt( plot_df )
reshape2::melt( plot_df )
ggplot( reshape2::melt( plot_df ) , aes(x = variable, y = value)) + geom_point()
ggplot( reshape2::melt( plot_df ) , aes(x = variable, y = value)) + geom_point() + geom_smooth(method = "lm")
ggplot( reshape2::melt( plot_df ) , aes(x = variable, y = value)) + geom_point() + geom_smooth(method = "lm")
ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm")
ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm")
ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm") + theme_bw()
p1 <- ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm") + theme_classic()
ggsave(p1,"contrast.pdf",width = 3, height = 2)
p1 <- ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm") + theme_classic()
ggsave(p1,"contrast.pdf",width = 3, height = 2)
ggsave("contrast.pdf",p1,width = 3, height = 2)
ggsave("contrast.pdf",p1,width = 5, height = 4)
cor.test(plot_df[,1],plot_df[,2])
summary( lm(pvalue_golite ~ pvalue_cp,data = plot_df) )
p1 <- ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm") + theme_classic() + labs(x = "p values cluster profiler", y = "p values GO lite")
p1 <- ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm") + theme_classic() + labs(x = "p values cluster profiler", y = "p values golite")
ggsave("contrast.pdf",p1,width = 5, height = 4)
library(m6ALogisticModel)
SE_CQN <- readRDS("SE_CQN_filtered.rds")
Y <- plot_row_joint(SE_CQN,RETURN_INDX = T)
set.seed(1)
Y <- plot_row_joint(SE_CQN,RETURN_INDX = T)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
go_multinomial(Y,
row_ranges = rowRanges(SE_CQN),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
orgDb = org.Hs.eg.db,
HDER = "GO_test",
GO_Slim = T
)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
go_multinomial(Y,
row_ranges = rowRanges(SE_CQN),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
orgDb = org.Hs.eg.db,
HDER = "GO_test",
GO_Slim = T
)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
go_multinomial(Y,
row_ranges = rowRanges(SE_CQN),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
orgDb = org.Hs.eg.db,
HDER = "GO_test",
GO_Slim = F
)
glm_multinomial(Y,mcols(SE_CQN),"GLM_bg")
knitr::opts_chunk$set(echo = TRUE)
require(wavClusteR)
?fitMixtureModel
samples <- replicate(10000, sum(rnbinom(n = 10000,p = 0.5,size = 1)))
mean(samples)
t.test(samples)
?t.test
t.test(samples,mu = 10000)
rnbinom(n = 10000,p = 0.5,size = 1)
sum(rnbinom(n = 10000,p = 0.5,size = 1))
replicate(10000, sum(rnbinom(n = 10000,p = 0.5,size = 1)))
replicate(10000, sum(rnbinom(n = 10000,p = 0.5,size = 1)))
samples <- replicate(10000, sum(rnbinom(n = 10000,p = 0.5,size = 1)))
samples
t.test(samples,mu = 10000)
rnbinom(n = 10000,p = 0.5,size = 1)
sum(rnbinom(n = 10000,p = 0.5,size = 1))
hist(samples)
t.test(samples,mu = 10000)
(mean(samples) - 10000)/sd(samples)
mean(samples)
(mean(samples) - 10000)/var(samples)
(mean(samples) - 10000)/sd(samples)
pnorm( (mean(samples) - 10000)/sd(samples) )
sd(samples)
mean(samples)
mean(samples)
t.statistics
( mean(samples) - 10000 )/sd(samples)
( mean(samples) - 10000 ) / sd(samples)
pnorm( ( mean(samples) - 10000 )/( sd(samples) / sqrt(10000) ))
t.test(samples,mu = 10000)
( mean(samples) - 10000 )/( sd(samples) / sqrt(10000) ) #t statistics
1+sqrt(3)
1+sqrt(5)
-1+sqrt(5)
-1+sqrt(3)
-1+sqrt(5)/2
-1+sqrt(5)/2
-1-sqrt(5)/2
-1+(sqrt(5)/2)
-1+(sqrt(3)/2)
-1-(sqrt(3)/2)
x^2 - 2x + 1/4
x = -1 -sqrt(3)/2
x^2 - 2x + 1/4
x^2 - 2*x + 1/4
x^2 + 2*x - 1/4
x^2 + 2*x + 1/4
-1 -sqrt(3)/2
-1 -sqrt(3)/2
1+sqrt(3/2)
1+sqrt(3)/2
x = 1+sqrt(3)/2
x^2 - 2*x + 1/4
1/1.366
-1 + sqrt(3)
1- sqrt(3)
1 + sqrt(3)/2
1 - sqrt(3)/2
rnorm(10000,0,0.1)/rnorm(10000,0,10000)
mean(rnorm(10000,0,0.1)/rnorm(10000,0,10000))
mean(rnorm(10000,0,0.1)/rnorm(10000,0,1000000))
rnorm(10000,0,1000000)
mean(rnorm(10000,0,0.1)/rnorm(10000,0,1000000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
mean(rnorm(10000,1000,0.1)/rpois(10000,1000))
ratio <- replicate(10000,mean(rnorm(10000,1000,0.1)/rpois(10000,1000)))
t.test(ratio,mu = 1)
ratios <- 10000/replicate(10000, sum(rnbinom(n = 10000,p = 0.5,size = 1)))
t.test(ratios)
ratios
t.test(ratios)
ratios <- replicate(10000,mean(rpois(10000,1)/rnorm(10000,1000,1000)))
t.test(ratios)
ratios <- replicate(10000,mean(1000/rnorm(10000,1000,1000)))
t.test(ratios)
ratios
ratios <- replicate(10000, 1000/rnorm(10000,1000,1000) )
mean(ratios )
t.test(ratios,mu = 1)
var(rnbinom(n = 10000,p = 0.5,size = 1))
sd(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 2))
var(rnbinom(n = 10000,p = 0.5,size = 3))
var(rnbinom(n = 10000,p = 0.5,size = 4))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 2))
mean(rnbinom(n = 10000,p = 0.5,size = 2))
var(rnbinom(n = 10000,p = 0.5,size = 2))
var(rnbinom(n = 10000,p = 0.5,size = 2))
var(rnbinom(n = 10000,p = 0.5,size = 100))
mean(rnbinom(n = 10000,p = 0.5,size = 100))
mean(rnbinom(n = 10000,p = 0.5,size = 100))
t.test(ratios)
ratios <- 10000/replicate(10000, sum(rnbinom(n = 10000,p = 0.5,size = 1)))
t.test(ratios) #p-value < 2.2e-16
t.test(ratios,mu=1) #p-value < 2.2e-16
ratios <- 100000/replicate(1e6, sum(rnbinom(n = 100000,p = 0.5,size = 1)))
ratios <- 10000/replicate(1e6, sum(rnbinom(n = 10000,p = 0.5,size = 1)))
all_rnum <- rnbinom(n = 1e10,p = 0.5,size = 1)
10/3 + 3*5*5
235/3
3 + 54*-1 - 5
17+7+17
17+7+17+2+2-1+2
17+7+17+1+1-1+3
17+7+17+1+1-1+3
18/(18+18+7)
45*18/(18+18+7)
knitr::opts_chunk$set(echo = TRUE)
coldata_example <- read.csv("./coldata_example.csv")
coldata_example$SRR_RUN
paste0("tar -cvzf ep2_examples.tar.gz ", coldata_example$SRR_RUN , ".bam")
paste0("tar -cvzf ep2_examples.tar.gz ", collapse( coldata_example$SRR_RUN , sep = " ") , ".bam")
paste0("tar -cvzf ep2_examples.tar.gz ", paste( coldata_example$SRR_RUN ,collapse = " ") , ".bam")
paste0("tar -cvzf ep2_examples.tar.gz ", paste( paste0(coldata_example$SRR_RUN,".bam") ,collapse = " "))
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/sh_A549/bam", paste0("SRR",1182621:1182624) )
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/sh_A549/bam/", paste0("SRR",1182621:1182624), ".bam")
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/sh_A549/bam/", paste0("SRR",1182621:1182624), "/accepted_Hits.bam")
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/sh_A549/bam/", paste0("SRR",1182621:1182624), "/accepted_hits.bam")
coldata_example
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/WTAP/Human/bam/", paste0("SRR",1182603:1182606), "/accepted_hits.bam")
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/WTAP/Human/bam/", paste0("SRR",1182603:1182606), "/accepted_hits.bam" )
bam_directories <- c(paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/sh_A549/bam/", paste0("SRR",1182621:1182624), "/accepted_hits.bam" ),
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/WTAP/Human/bam/", paste0("SRR",1182603:1182606), "/accepted_hits.bam" ),
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/WTAP/si_A549/bam/", paste0("SRR",1182619:1182620), "/accepted_hits.bam" ))
bam_directories
paste0("tar -cvzf ep2_examples.tar.gz ", paste(bam_directories ,collapse = " "))
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/si_A549/bam/", paste0("SRR",1182619:1182620), "/accepted_hits.bam" ))
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/si_A549/bam/", paste0("SRR",1182619:1182620), "/accepted_hits.bam" ))
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/si_A549/bam/", paste0("SRR",1182619:1182620), "/accepted_hits.bam" )
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/si_A549/bam/", paste0("SRR",1182619:1182620), "/accepted_hits.bam" )
bam_directories <- c(paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/sh_A549/bam/", paste0("SRR",1182621:1182624), "/accepted_hits.bam" ),
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/WTAP/Human/bam/", paste0("SRR",1182603:1182606), "/accepted_hits.bam" ),
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/si_A549/bam/", paste0("SRR",1182619:1182620), "/accepted_hits.bam" ))
paste0("tar -cvzf ep2_examples.tar.gz ", paste(bam_directories ,collapse = " "))
library(GenomicAlignments)
Genomic
?summarizeJunctions
summarizeOverlaps()
?summarizeOverlaps()
?summarizeOverlaps
paste0("mv .",bam_directories, " ./bam")
commands <- paste(paste0("mv .",bam_directories, " ./bam"), collapse = ";")
system(commands)
commands <- paste(paste0("mv .",bam_directories, " ./bam/SRR",c(1182621:1182624,
1182603:1182606,
1182619:1182620),".bam"), collapse = ";")
commands
commands <- paste(paste0("mv .",bam_directories, " ./bam/SRR",c(1182621:1182624,
1182603:1182606,
1182619:1182620),".bam"), collapse = ";")
system(commands)
commands <- paste(paste0("mv .",bam_directories, " ./bam/SRR",c(1182621:1182624,
1182603:1182606,
1182619:1182620),".bam"), collapse = ";")
system(commands)
