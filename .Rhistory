decision_method = "BPM",
save_dir = "LogisticModel_x",
sample_names_coldata = "ID",
group_list = group_list2
)
Design_midbr <- mcols(SE_features_added)
Design_midbr
SE_features_added$ID
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-midbrain_Fto-"]
?glm
glm(Target ~ .,family = binomial(link = "logit"), data = Design_midbr)
Design_midbr
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  na.omit( Design_midbr) > 0 )
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-midbrain_Fto-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
Design_midbr = Design_midbr[,colnames(Design_midbr)!="eCLIP_FTO_p100"]
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
SE_features_added$ID
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_human-HEK293A_METTL16-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
SE_features_added$ID
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_human-A549_KIAA1429-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
SE_features_added$ID
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-liver-N_FTO+"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
SE_features_added$ID
Design_midbr <- mcols(SE_features_added)
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-MEF-S_ALKBH5-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
Design_midbr$Target = NULL
md1 <- glm(eCLIP_FTO ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
TREW_hg19 <- read.csv("TREW-hg19.corrected.txt")
knitr::opts_chunk$set(echo = TRUE)
TREW_hg19 <- read.csv("TREW-hg19.corrected.txt")
unique(TREW_hg19$Technique)
unique( TREW_hg19$Target[TREW_hg19$Technique == "ParCLIP"] )
Extract_ParCLIP_gr <- function(Target_name,TREW_table){
TREW_sub  <- TREW_table[(TREW_table$Target == Target_name) & (TREW_hg19$Technique == "ParCLIP"),]
Gr_targ <- GRanges(seqnames = TREW_sub$Chromosome, strand = TREW_sub$Strand,
ranges = IRanges(start = TREW_sub$Start, end = TREW_sub$End))
saveRDS(Gr_targ,paste0(Target_name,"_TREW_gr.rds"))
}
Extract_gr("METTL3", TREW_hg19)
unique( TREW_hg19$Target[is.na(TREW_hg19$Technique)] )
TREW_hg19_Technique[is.na(TREW_hg19$Technique)] = "ParCLIP"
TREW_hg19$Technique[is.na(TREW_hg19$Technique)] = "ParCLIP"
Extract_ParCLIP_gr <- function(Target_name,TREW_table){
TREW_sub  <- TREW_table[(TREW_table$Target == Target_name) & (TREW_hg19$Technique == "ParCLIP"),]
Gr_targ <- GRanges(seqnames = TREW_sub$Chromosome, strand = TREW_sub$Strand,
ranges = IRanges(start = TREW_sub$Start, end = TREW_sub$End))
saveRDS(Gr_targ,paste0(Target_name,"_TREW_gr.rds"))
}
Extract_ParCLIP_gr("METTL3", TREW_hg19)
TREW_hg19 <- read.csv("TREW-hg19.corrected.txt")
unique( TREW_hg19$Target[TREW_hg19$Technique == "ParCLIP"] )
TREW_hg19_Target = as.character(TREW_hg19$Target)
TREW_hg19_Target[is.na(TREW_hg19$Target)] = "YTHDF2"
TREW_hg19$Target = TREW_hg19_Target
TREW_hg19$Technique[is.na(TREW_hg19$Technique)] = "ParCLIP"
Extract_ParCLIP_gr <- function(Target_name,TREW_table){
TREW_sub  <- TREW_table[(TREW_table$Target == Target_name) & (TREW_hg19$Technique == "ParCLIP"),]
Gr_targ <- GRanges(seqnames = TREW_sub$Chromosome, strand = TREW_sub$Strand,
ranges = IRanges(start = TREW_sub$Start, end = TREW_sub$End))
saveRDS(Gr_targ,paste0(Target_name,"_TREW_gr.rds"))
}
Extract_ParCLIP_gr("METTL3", TREW_hg19)
Extract_ParCLIP_gr("METTL14", TREW_hg19)
Extract_ParCLIP_gr("WTAP", TREW_hg19)
METTL16mRNAs <- read.table( "GSE103948_METTL16mRNAs.txt" , sep = "\t")
METTL16mRNAs <- read.table( "GSE103948_METTL16mRNAs.txt" , sep = "/t")
METTL16mRNAs <- read.table( "GSE103948_METTL16mRNAs.txt" , sep = "/t", header = T)
read.table("GSE103948_METTL16mRNAs.txt" , sep = "/t", header = T)
METTL16mRNAs <- read.table("GSE103948_METTL16mRNAs.txt" , sep = "/t", header = T)
METTL16mRNAs <- read.table("GSE103948_METTL16mRNAs.txt" , sep = "\t", header = T)
METTL16mRNAs <- read.table("GSE103948_METTL16mRNAs.txt" , sep = " ", header = T)
METTL16mRNAs <- read.table("GSE103948_METTL16mRNAs.txt" , sep = "\t", header = T)
METTL16mRNAs <- read.table("GSE103948_METTL16mRNAs.txt" , sep = "\t", header = T,row.names = F)
METTL16mRNAs <- read.csv("GSE103948_METTL16mRNAs.csv")
METTL16mRNAs <- read.csv("GSE103948_METTL16mRNAs.csv")
METTL16lncRNAs <- read.csv("GSE103948_METTL16lncRNAs.csv")
METTL16sncRNAs <- read.csv("GSE103948_METTL16sncRNAs.csv")
METTL16mRNAs <- read.csv("GSE103948_METTL16mRNAs.csv")
METTL16lncRNAs <- read.csv("GSE103948_METTL16lncRNAs.csv")
METTL16sncRNAs <- read.csv("GSE103948_METTL16ncRNAs.csv")
METTL16sncRNAs
GRanges(strand = M16_df$Strand, seqnames = M16_df$Chromosome, ranges  = IRanges(start = M16_df[,2],end = M16_df[,3]))
to_GR <- function(M16_df){
require(GenomicRanges)
GRanges(strand = M16_df$Strand, seqnames = M16_df$Chromosome, ranges  = IRanges(start = M16_df[,2],end = M16_df[,3]))
}
to_GR(METTL16mRNAs)
GR_M16 <- c(to_GR(METTL16mRNAs),
to_GR(METTL16lncRNAs),
to_GR(METTL16sncRNAs))
GR_M16
View(SE_features_added)
sum( rowRanges(m6ALogisticModel::SE_example) %over% GR_M16 )
M16_df$Chromosome
METTL16mRNAs
to_GR <- function(M16_df){
require(GenomicRanges)
GRanges(strand = M16_df$Strand, seqnames = tolower( M16_df$Chromosome ), ranges  = IRanges(start = M16_df[,2],end = M16_df[,3]))
}
GR_M16 <- c(to_GR(METTL16mRNAs),
to_GR(METTL16lncRNAs),
to_GR(METTL16sncRNAs))
GR_M16
sum( rowRanges(m6ALogisticModel::SE_example) %over% GR_M16 )
sum( rowRanges(m6ALogisticModel::SE_example) %over% (GR_M16 + 100) )
saveRDS(GR_M16 + 100,"METTL16_CLIP.rds")
read.table("GSM936506_PARCLIP_ALKBH5_sites.bed",sep = "\t")
read.table("GSM936506_PARCLIP_ALKBH5_sites.bed",sep = "/t")
liftOver()
library(AnnotationHub)
library(AnnotationHub)
ahub <- AnnotationHub()
ahub.chain <- subset(ahub, rdataclass == "ChainFile")
query(ahub.chain, c("hg18", "hg19"))
chain <- ahub.chain[ahub.chain$title == "hg18ToHg19.over.chain.gz"]
chain <- chain[[1]]
saveRDS(chain,"/Users/zhenwei/Datasets/ChainFiles/chain-hg18ToHg19.rds")
chain <- readRDS("/Users/zhenwei/Datasets/ChainFiles/chain-hg18ToHg19.rds")
?liftOver
readr::read_tsv("GSM936506_PARCLIP_ALKBH5_sites.bed.txt")
PARCLIP_ALKBH5 <- readr::read_tsv("GSM936506_PARCLIP_ALKBH5_sites.bed.txt")
PARCLIP_ALKBH5 <- import.bed("GSM936506_PARCLIP_ALKBH5_sites.bed.txt")
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome")
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.UCSC.hg18")
library("BSgenome.Hsapiens.UCSC.hg18")
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.UCSC.hg18")
knitr::opts_chunk$set(echo = TRUE)
PARCLIP_ALKBH5 <- read.csv("GSM936506_PARCLIP_ALKBH5_sites.bed.csv")
PARCLIP_ALKBH5
PARCLIP_ALKBH5 <- read.csv("GSM936506_PARCLIP_ALKBH5_sites.bed.csv",header = F)
PARCLIP_ALKBH5
PARCLIP_ALKBH5 <- read.csv("GSM936506_PARCLIP_ALKBH5_sites.bed.csv",header = T)
PARCLIP_ALKBH5
PARCLIP_ALKBH5 <- read.csv("GSM936506_PARCLIP_ALKBH5_sites.bed.csv",header = F)
PARCLIP_ALKBH5
PARCLIP_ALKBH5_gr <- GRanges(seqnames = PARCLIP_ALKBH5$V1,ranges = IRanges(start = PARCLIP_ALKBH5$V2,end = PARCLIP_ALKBH5$V3), strand = PARCLIP_ALKBH5$V6)
PARCLIP_ALKBH5_gr <- GenomicRanges::GRanges(seqnames = PARCLIP_ALKBH5$V1,ranges = IRanges(start = PARCLIP_ALKBH5$V2,end = PARCLIP_ALKBH5$V3), strand = PARCLIP_ALKBH5$V6)
library(GenomicRanges)
PARCLIP_ALKBH5_gr <- GRanges(seqnames = PARCLIP_ALKBH5$V1,ranges = IRanges(start = PARCLIP_ALKBH5$V2,end = PARCLIP_ALKBH5$V3), strand = PARCLIP_ALKBH5$V6)
PARCLIP_ALKBH5_gr
liftOver(PARCLIP_ALKBH5_gr,chain)
library(rtracklayer)
liftOver(PARCLIP_ALKBH5_gr,chain)
chain <- readRDS("/Users/zhenwei/Datasets/ChainFiles/chain-hg18ToHg19.rds")
liftOver(PARCLIP_ALKBH5_gr,chain)
PARCLIP_ALKBH5_hg19 <- unlist(liftOver(PARCLIP_ALKBH5_gr,chain))
sum( rowRanges(m6ALogisticModel::SE_example) %over%  PARCLIP_ALKBH5_hg19 )
library(SummarizedExperiment)
sum( rowRanges(m6ALogisticModel::SE_example) %over%  PARCLIP_ALKBH5_hg19 )
sum( rowRanges(m6ALogisticModel::SE_example) %over%  PARCLIP_ALKBH5_hg19 +100 )
sum( rowRanges(m6ALogisticModel::SE_example) %over%  PARCLIP_ALKBH5_hg19 +100 )
sum( rowRanges(m6ALogisticModel::SE_example) %over%  (PARCLIP_ALKBH5_hg19 +100 ))
length(PARCLIP_ALKBH5_hg19)
hist(width(PARCLIP_ALKBH5_hg19))
sum( rowRanges(m6ALogisticModel::SE_example) %over%  (PARCLIP_ALKBH5_hg19 +50 ))
saveRDS(PARCLIP_ALKBH5_hg19,"PARCLIP_ALKBH5.rds")
saveRDS(PARCLIP_ALKBH5_hg19,"PARCLIP_ALKBH5.rds")
saveRDS(PARCLIP_ALKBH5_hg19 + 50,"PARCLIP_ALKBH5_flk50.rds")
saveRDS(PARCLIP_ALKBH5_hg19 + 100,"PARCLIP_ALKBH5_flk100.rds")
FTO_RIP <- read.csv("GSE79577_FTO_clusters.csv")
FTO_RIP
FTO_RIP_gr <- GRanges(seqnames = FTO_RIP$X.chrom,ranges = IRanges(start = FTO_RIP$start,end = FTO_RIP$end),strand = FTO_RIP$strand)
FTO_RIP_gr
head(FTO_RIP)
mcols(FTO_RIP_gr)  <- data.frame(FTO_RIP[,c(5:8)])
mcols(FTO_RIP_gr)
sum( rowRanges(m6ALogisticModel::SE_example) %over%  (FTO_RIP_gr))
Effective_Over_rate = rep(0,10)
Effective_Over_rate <- function(GR){
mean(GR %over% rowRanges(m6ALogisticModel::SE_example))
}
Effective_Over_rate(FTO_RIP_gr)
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 50])
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 100])
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 200])
rowMedians(mcols(FTO_RIP_gr)[,2:4]) > 4
mcols(FTO_RIP_gr)[,2:4]
rowMedians( as.matrix( mcols(FTO_RIP_gr)[,2:4]))
as.matrix( mcols(FTO_RIP_gr)[,2:4])
as.data.frame( mcols(FTO_RIP_gr)[,2:4])
rowMedians( as.data.frame( mcols(FTO_RIP_gr)[,2:4]))
ENRICH_DF <- as.data.frame( mcols(FTO_RIP_gr)[,2:4])
ENRICH_DF
ENRICH_DF[ENRICH_DF == "#NAME?"] = 0
ENRICH_DF == "#NAME?"
ENRICH_DF[is.na(ENRICH_DF == "#NAME?")] = 0
Effective_Over_rate(FTO_RIP_gr)
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 200 & rowMedians(ENRICH_DF) > 4])
as.matrix(ENRICH_DF)
ENRICH_DF[is.na(ENRICH_DF == "#NAME?")] = 0
ENRICH_DF
is.na(ENRICH_DF == "#NAME?")
ENRICH_DF[is.na(ENRICH_DF == "#NAME?")]
ENRICH_DF[is.na(ENRICH_DF == "#NAME?")] = 0
ENRICH_DF[is.na(ENRICH_DF == "#NAME?")] = 0
ENRICH_DF[is.na(ENRICH_DF == "#NAME?")] = 0
ENRICH_DF[is.na(ENRICH_DF == "#NAME?")] = 0
ENRICH_DF[is.na(ENRICH_DF == "#NAME?")] = 0
ENRICH_DF <- as.matrix( as.data.frame( mcols(FTO_RIP_gr)[,2:4]) )
ENRICH_DF
ENRICH_DF[ENRICH_DF == "#NAME?"] = 0
ENRICH_DF
as.numeric(ENRICH_DF)
rowMedians(ENRICH_DF)
head(ENRICH_DF)
matrix(as.numeric(ENRICH_DF),ncol = 3)
head(ENRICH_DF)
ENRICH_DF <- matrix(as.numeric(ENRICH_DF),ncol = 3)
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 200 & rowMedians(ENRICH_DF) > 4])
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 200 & rowMedians(ENRICH_DF) > 3])
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 200 & rowMedians(ENRICH_DF) > 2])
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 200 & rowMedians(ENRICH_DF) > 1])
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 200 & rowMedians(ENRICH_DF) > 0])
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 100 & rowMedians(ENRICH_DF) > 0])
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 100 & rowMins(ENRICH_DF) != 0])
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 50 & rowMins(ENRICH_DF) != 0])
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 50])
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 25])
sum(FTO_RIP_gr$Nreads > 25)
sum(FTO_RIP_gr$Nreads > 50)
sum(FTO_RIP_gr$Nreads > 25)
FTO_RIP_gr = FTO_RIP_gr[FTO_RIP_gr$Nreads > 25]
saveRDS(FTO_RIP_gr,"FTO_RIP.rds")
Effective_Over_rate(FTO_RIP_gr)
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 25])
FTO_RIP_gr <- GRanges(seqnames = FTO_RIP$X.chrom,ranges = IRanges(start = FTO_RIP$start,end = FTO_RIP$end),strand = FTO_RIP$strand)
mcols(FTO_RIP_gr)  <- data.frame(FTO_RIP[,c(5:8)])
ENRICH_DF <- matrix(as.numeric(ENRICH_DF),ncol = 3)
Effective_Over_rate(FTO_RIP_gr)
Effective_Over_rate(FTO_RIP_gr[FTO_RIP_gr$Nreads > 25])
FTO_RIP_gr = FTO_RIP_gr[FTO_RIP_gr$Nreads > 25]
sum( rowRanges(m6ALogisticModel::SE_example) %over%  (FTO_RIP_gr)) #198
length(FTO_RIP_gr)
knitr::opts_chunk$set(echo = TRUE)
library(m6ALogisticModel)
library(SummarizedExperiment)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
ALKBH5_flk0 = readRDS("PARCLIP_ALKBH5_flk0.rds"),
ALKBH5_flk50 = readRDS("PARCLIP_ALKBH5_flk50.rds"),
ALKBH5_flk100 = readRDS("PARCLIP_ALKBH5_flk100.rds")
)
Feature_List_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
ALKBH5_flk0 = readRDS("PARCLIP_ALKBH5.rds"),
ALKBH5_flk50 = readRDS("PARCLIP_ALKBH5_flk50.rds"),
ALKBH5_flk100 = readRDS("PARCLIP_ALKBH5_flk100.rds")
)
SE_features_added <- predictors.annot(se = SE_example,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_hg19,
HK_genes_list = HK_hg19_eids)
Design_midbr <- mcols(SE_features_added)
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-MEF-S_ALKBH5-"] > 0
Design_midbr$Target = NULL
md1 <- glm(eCLIP_FTO ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-MEF-S_ALKBH5-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
Design_midbr$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-MEF-N_ALKBH5-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
Design <- mcols(SE_features_added)
Design$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-MEF-N_ALKBH5-"] > 0
Design <- na.omit( Design)
table( Design$ALKBH5_flk0, Design$Target)
fisher.test( table( Design$ALKBH5_flk0, Design$Target) )
fisher.test( table( Design$ALKBH5_flk50, Design$Target) )
Design <- mcols(SE_features_added)
Design$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_mouse-MEF-S_ALKBH5-"] > 0
Design <- na.omit( Design)
fisher.test( table( Design$ALKBH5_flk50, Design$Target) )
fisher.test( table( Design$ALKBH5_flk, Design$Target) )
fisher.test( table( Design$ALKBH5_flk0, Design$Target) )
Design <- mcols(SE_features_added)
md1 <- glm(ALKBH5_flk0 ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
md1 <- glm(ALKBH5_flk50 ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
Design$ALKBH5_flk50
mean(Design$ALKBH5_flk50)
md1 <- glm(ALKBH5_flk100 ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
Design <- mcols(SE_features_added)
md1 <- glm(ALKBH5_flk0 ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
md1 <- glm(ALKBH5_flk0 ~ PC_1ntTRUE,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
md1 <- glm(ALKBH5_flk0 ~ PC_1nt,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
md1 <- glm(ALKBH5_flk100 ~ PC_1nt,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_midbr)) )
summary(md1)
METTL16_CLIP <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/METTL16_CLIP.rds")
METTL16_CLIP <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/METTL16_CLIP.rds")
devtools::use_data(METTL16_CLIP)
PARCLIP_ALKBH5 <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/PARCLIP_ALKBH5.rds")
devtools::use_data(PARCLIP_ALKBH5)
CLIP_FTO <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/CLIP_FTO.rds")
devtools::use_data(CLIP_FTO)
eCLIP_FTO <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/eCLIP_FTO.rds")
devtools::use_data(eCLIP_FTO)
METTL3_TREW <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/METTL3_TREW_gr.rds")
devtools::use_data(METTL3_TREW)
METTL14_TREW <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/METTL14_TREW_gr.rds")
devtools::use_data(METTL14_TREW)
WTAP_TREW <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/WTAP_TREW_gr.rds")
devtools::use_data(WTAP_TREW)
group_list_expanded = list(
UTR5 = c("UTR5", "Pos_UTR5", "length_UTR5"),
CDS = c("CDS", "Pos_CDS", "length_CDS"),
UTR3 = c("UTR3", "Pos_UTR3", "length_UTR3"),
Exon = c("exons", "Pos_exons", "long_exon","Last_exons_50bp"),
Gene = c("Pos_Tx","length_gene_ex","length_gene_full","Isoform_num","sncRNA","lncRNA","HK_genes"),
LandMarks = c("m6Am","Start_codons","Stop_codons"),
Motif = c("AAACA","GAACA","AGACA","GGACA","AAACT","GAACT","AGACT","GGACT","AAACC","GAACC","AGACC","GGACC"),
Structure = c("struct_hybridize","struct_loop"),
Evolution = c("PC_1nt","PC_101nt","FC_1nt","FC_101nt"),
miRNA_RBP = c("HNRNPC_eCLIP", "YTHDC1_TREW", "YTHDF1_TREW", "YTHDF2_TREW", "miR_targeted_genes","TargetScan","Verified_miRtargets"),
Writers_erasers = c("METTL3_TREW","METTL14_TREW","WTAP_TREW","METTL16_CLIP","PARCLIP_ALKBH5","CLIP_FTO","eCLIP_FTO"),
Batch = c("GC_cont_genes","GC_cont_101bp","Intercept")
)
devtools::use_data(group_list_expanded)
Design_midbr <- mcols(SE_features_added)
SE_features_added$ID
Design_test <- mcols(SE_features_added)
Design_test$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_human-A549_KIAA1429-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_test)) )
md1
md2 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_test[,-1*(sample.int(ncol(Design_test)-1))])) )
ncol(Design_test)-1
Design_test[,52]
colnames(Design_test)
sample.int(ncol(Design_test)-1)
sample.int(ncol(Design_test)-1,10)
md2 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_test[,-1*(sample.int(ncol(Design_test)-1,10))])) )
md2
summary(md1)
summary(md2)
md2
md1$coefficients
md2$coefficients
summary(md1)
summary(md2)
Design_midbr$Target = NULL
Design_test$Target = NULL
colnames(Design_test)
md3 <- glm(exons ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_test)) )
summary(md3)
md3 <- glm(CDS ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_test)) )
summary(md3)
md3 <- glm(Pos_UTR3 ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_test)) )
Design_test$Target <- assay(SE_features_added)[,SE_features_added$ID == "DM_human-A549_KIAA1429-"] > 0
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  as.data.frame( na.omit( Design_test)) )
md1
Design_Sub <- as.data.frame( na.omit( Design_test))
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  Design_Sub)
coefficients(md1)
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  Design_Sub[sample.int(nrow(Design_Sub),3000),])
md1 <- glm(Target ~ .,family = binomial(link = "logit"), data =  Design_Sub)
md1_rand <- glm(Target ~ .,family = binomial(link = "logit"), data =  Design_Sub[sample.int(nrow(Design_Sub),3000),])
coefficients(md1)
coefficients(md1_rand)
plot(Design_Sub)
barplot(Design_Sub)
plot(Design_Sub)
plot(Design_Sub)
cor(coefficients(md1),coefficients(md1_rand))
M_cor <- cbind( coefficients(md1),coefficients(md1_rand))
M_cor
summary(md1)
source('~/Documents/GitHub/m6ALogisticModel/R/predictors.annot.R')
?logistic.modeling
library(m6ALogisticModel)
?group_list_expanded
library(SummarizedExperiment)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_expanded_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
PARCLIP_ALKBH5 = PARCLIP_ALKBH5,
CLIP_FTO = CLIP_FTO,
eCLIP_FTO = eCLIP_FTO
)
SE_features_added <- predictors.annot(se = SE_example,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
FTO_CLIP <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/CLIP_FTO.rds")
devtools::use_data(FTO_CLIP)
FTO_eCLIP <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/eCLIP_FTO.rds")
devtools::use_data(FTO_eCLIP)
ALKBH5_PARCLIP <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/PARCLIP_ALKBH5.rds")
devtools::use_data(ALKBH5_PARCLIP)
group_list_expanded = list(
UTR5 = c("UTR5", "Pos_UTR5", "length_UTR5"),
CDS = c("CDS", "Pos_CDS", "length_CDS"),
UTR3 = c("UTR3", "Pos_UTR3", "length_UTR3"),
Exon = c("exons", "Pos_exons", "long_exon","Last_exons_50bp"),
Gene = c("Pos_Tx","length_gene_ex","length_gene_full","Isoform_num","sncRNA","lncRNA","HK_genes"),
LandMarks = c("m6Am","Start_codons","Stop_codons"),
Motif = c("AAACA","GAACA","AGACA","GGACA","AAACT","GAACT","AGACT","GGACT","AAACC","GAACC","AGACC","GGACC"),
Structure = c("struct_hybridize","struct_loop"),
Evolution = c("PC_1nt","PC_101nt","FC_1nt","FC_101nt"),
miRNA_RBP = c("HNRNPC_eCLIP", "YTHDC1_TREW", "YTHDF1_TREW", "YTHDF2_TREW", "miR_targeted_genes","TargetScan","Verified_miRtargets"),
Writers_Erasers = c("METTL3_TREW","METTL14_TREW","WTAP_TREW","METTL16_CLIP","ALKBH5_PARCLIP","FTO_CLIP","FTO_eCLIP"),
Batch = c("GC_cont_genes","GC_cont_101bp","Intercept")
)
devtools::use_data(group_list_expanded)
group_list_expanded = list(
UTR5 = c("UTR5", "Pos_UTR5", "length_UTR5"),
CDS = c("CDS", "Pos_CDS", "length_CDS"),
UTR3 = c("UTR3", "Pos_UTR3", "length_UTR3"),
Exon = c("exons", "Pos_exons", "long_exon","Last_exons_50bp"),
Gene = c("Pos_Tx","length_gene_ex","length_gene_full","Isoform_num","sncRNA","lncRNA","HK_genes"),
LandMarks = c("m6Am","Start_codons","Stop_codons"),
Motif = c("AAACA","GAACA","AGACA","GGACA","AAACT","GAACT","AGACT","GGACT","AAACC","GAACC","AGACC","GGACC"),
Structure = c("struct_hybridize","struct_loop"),
Evolution = c("PC_1nt","PC_101nt","FC_1nt","FC_101nt"),
miRNA_RBP = c("HNRNPC_eCLIP", "YTHDC1_TREW", "YTHDF1_TREW", "YTHDF2_TREW", "miR_targeted_genes","TargetScan","Verified_miRtargets"),
Writers_Erasers = c("METTL3_TREW","METTL14_TREW","WTAP_TREW","METTL16_CLIP","ALKBH5_PARCLIP","FTO_CLIP","FTO_eCLIP"),
Batch = c("GC_cont_genes","GC_cont_101bp","Intercept")
)
devtools::use_data(group_list_expanded)
library(m6ALogisticModel)
?group_list_expanded
library(SummarizedExperiment)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Feature_List_expanded_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
SE_features_added <- predictors.annot(se = SE_example,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
logistic.modeling(
SE_features_added,
MCMC_iterations = 100000,
decision_method = "BPM",
save_dir = "LogisticModel_X",
sample_names_coldata = "ID",
group_list = group_list_expanded
)
