assays(m6A_raw) = assays(m6A_raw)[c("mlevel","IP","input")]
row_features <- read.csv("Features_row.csv")
mcols(SE_CQN ) = row_features
mcols(SE_noCQN ) = row_features
mcols(m6A_raw) = row_features
m6A_raw
SE_noCQN
sum( rowRanges( m6A_raw) %in% rowRanges(SE_noCQN ))
m6A_raw = m6A_raw[rowRanges( m6A_raw) %in% rowRanges(SE_noCQN ),]
mcols(m6A_raw) = row_features
saveRDS(m6A_raw,"SE_naive.rds")
saveRDS(SE_noCQN,"SE_DESeq2.rds")
saveRDS(SE_CQN,"SE_CQN.rds")
knitr::opts_chunk$set(echo = TRUE)
library(m6ALogisticModel)
SE_naive <- readRDS("SE_naive.rds")
SE_DESeq2 <- readRDS("SE_DESeq2.rds")
SE_CQN <- readRDS("SE_CQN.rds")
SE_naive <- readRDS("SE_naive.rds")
SE_DESeq2 <- readRDS("SE_DESeq2.rds")
SE_CQN <- readRDS("SE_CQN.rds")
assays(SE_DESeq2)$m6Alog2FC[assays(SE_DESeq2)$geneExpression < 8.5] = NA
indx_keep <- rowSums( is.na(assay(SE_DESeq2)) ) <= 10
SE_DESeq2 <- SE_DESeq2[indx_keep,]
assays(SE_DESeq2)$m6Alog2FC = scale(assays(SE_DESeq2)$m6Alog2FC)
Eval_row_joint(SE_DESeq2[rowMads(assay(SE_DESeq2),na.rm = T) > .8,],
"DESeq2",K = 2)
mcols(SE_DESeq2)
mcols(SE_DESeq2)$m6Am
table(mcols(SE_DESeq2)$m6Am)
Eval_row_joint <- function(SE, HDER = "Row_joint", K = 3, ROW_STAND = T) {
stopifnot(class(SE)=="RangedSummarizedExperiment")
stopifnot(!is.null(mcols(SE)))
#Cluster: K-means
if(ROW_STAND){
assay_M <- t(scale(t(assay(SE))))
}else{
assay_M <- assay(SE)
}
row_cluster <- pam(x = dist(assay_M), K)
Mean_row_clusters <- apply(assay_M,2, function(x)tapply(x, row_cluster$clustering, mean, na.rm = T))
mat.melted <- melt(Mean_row_clusters)
colnames(mat.melted) = c("Clusters","Samples","mean_value")
#Plot simplified heat map with ggplot2
#Extract the table of the cluster statistics
Df_x = data.frame(Clusters = as.character( 1:K ),
Obs_number = c(table(row_cluster$clustering)),
MeanSh_widths = round( c( row_cluster$silinfo$clus.avg.widths),3),
X = min( 5, ncol(SE)/2))
Df_x$Label = paste0("Mean sil width: ",Df_x$MeanSh_widths,"; Obs #:",Df_x$Obs_number)
p1 <- ggplot(mat.melted) + geom_tile(aes(y = Clusters, x = Samples, fill = mean_value)) +
scale_fill_gradient(low = "Blue", high = "Yellow") +
theme_classic() +
theme(axis.text.x = element_text(angle = 310, vjust =1, hjust = 0),
plot.margin = margin(1,1,1,1,"cm")) +
labs(title = paste0("K Medoids Clustering With K = ",K,"; ",HDER),
subtitle = paste0("total mean silinfo width: ",round(row_cluster$silinfo$avg.width,3))) + geom_label(data = Df_x,mapping = aes(x = X,y = Clusters - .25,label = Label),size = 3,label.size = .05)
fig_height_p1 = 3.4 + .3*K + .05 * max(nchar(as.character(colnames(SE))))
fig_width_p1 = 4 + .2 * ncol(SE)
ggsave(paste0(HDER,"_kmedoids.pdf"),p1,width = fig_width_p1,height = fig_height_p1)
#Fit multinomial GLM to analysis the clustering label
GLM_df = mcols(SE)
GLM_df$Y = factor( paste0("Cluster ",row_cluster$clustering) )
GLM_df$Y = relevel(GLM_df$Y, "Cluster 1")
Null_model <-  multinom(Y ~ 1, data = GLM_df)
Proposed_model <-  multinom(Y ~ ., data = GLM_df)
stat_test <- summary(Proposed_model)
z <- stat_test$coefficients/stat_test$standard.errors
#Prepare a data frame for the ggplot.
Plot_df_Z <- melt(z)
Plot_df_Z$Stat <- "Wald_Z"
Plot_df_Estimate <- melt(stat_test$coefficients)
Plot_df_Estimate$Stat <- "log(OddsRatio)"
if(ncol(Plot_df_Z) == 2) {
Plot_df_Z = cbind("Cluster 2", rownames(Plot_df_Z), Plot_df_Z )
colnames(Plot_df_Z) = c("Clusters","Covariates","values","Statistics")
Plot_df_Estimate = cbind("Cluster 2", rownames(Plot_df_Estimate), Plot_df_Estimate)
colnames(Plot_df_Estimate) = c("Clusters","Covariates","values","Statistics")
}
Plot_df <- rbind(Plot_df_Z,Plot_df_Estimate)
colnames(Plot_df) <- c("Clusters","Covariates","values","Statistics")
Plot_df$Covariates = gsub("TRUE","",Plot_df$Covariates)
Indx <- names( sort( tapply(Plot_df$values[Plot_df$Statistics == "Wald_Z"] ,
Plot_df$Covariates[Plot_df$Statistics == "Wald_Z"],
function(x) sum(abs(x))) , decreasing = F))
Plot_df$Covariates = factor(Plot_df$Covariates, levels = Indx)
Plot_df$values_abs = abs(Plot_df$values)
Plot_df$Sign = "positive"
Plot_df$Sign[Plot_df$values < 0] = "negative"
Plot_df$Group = paste0(Plot_df$Statistics,":",Plot_df$Clusters)
Indx_Group = unique(Plot_df$Group)
Plot_df$Group = factor( Plot_df$Group,
levels = c(Indx_Group[seq(1,length(Indx_Group)-1,by= K-1)],
Indx_Group[seq(2,length(Indx_Group),by= K-1)]) )
Z = Plot_df$values[Plot_df$Statistics == "Wald_Z"]
p <- (1 - pnorm(abs(z), 0, 1))*2
Sig_indx <- p.adjust(p,method = "fdr") < .05
Plot_df$FDR_sig = "Insig"
Plot_df$FDR_sig[Plot_df$Statistics == "Wald_Z"][Sig_indx] = "< .05"
p2 <- ggplot(Plot_df) +
geom_bar(stat = "identity",aes(x = Covariates, y = values_abs, fill = Sign, colour = FDR_sig), width = .75,size = .35, linetype = 1) +
facet_wrap(~Group,nrow = 1,scales = "free_x") +
theme_classic() + coord_flip() + theme(axis.text.y = element_text(size = 7),
plot.margin = margin(1,1.5,1,1,"cm")) +
scale_fill_brewer(direction = -1) + scale_colour_manual(values = c("red", 0)) +
labs(title = paste0("Multinomial logistic model for clustering result: ",HDER),
subtitle = paste0("Proposed model Chisq statistics: ",
round(  Null_model$deviance-Proposed_model$deviance, 3),
" on ",length(Indx) * (K-1) - 1 ," df"),
y = "abs(values)")
fig_width_p2 = 5 + 2.5*(K-1) + .01 * max(nchar(Indx))
fig_height_p2 = 4 + .08 * length(Indx)
ggsave(paste0(HDER,"_GLMestimates.pdf"),p2,width = fig_width_p2,height = fig_height_p2)
#Calculate the total statistical significance of the proposed model.
Stat_df <- data.frame(
NULL_Deviance = Null_model$deviance,
Residual_Deviance = Proposed_model$deviance
)
Stat_df$Reduced_prop = 1 - Stat_df$Residual_Deviance/Stat_df$NULL_Deviance
Stat_df$Cost_df = length(Indx) * (K-1) - 1
Stat_df$Chisq_stat = Stat_df$NULL_Deviance - Stat_df$Residual_Deviance
write.table(t(Stat_df),paste0("Model_report_",HDER,".txt"),col.names = F)
}
library(ggplot2)
library(cluster)
library(nnet)
library(reshape2)
Eval_row_joint(SE,"Row_Joint_test",K = 3)
Eval_row_joint(SE_DESeq2[rowMads(assay(SE_DESeq2),na.rm = T) > .8,],
"DESeq2",K = 3)
Eval_row_joint <- function(SE, HDER = "Row_joint", K = 3, ROW_STAND = T) {
stopifnot(class(SE)=="RangedSummarizedExperiment")
stopifnot(!is.null(mcols(SE)))
#Cluster: K-means
if(ROW_STAND){
assay_M <- t(scale(t(assay(SE))))
}else{
assay_M <- assay(SE)
}
row_cluster <- pam(x = dist(assay_M), K)
Mean_row_clusters <- apply(assay_M,2, function(x)tapply(x, row_cluster$clustering, mean, na.rm = T))
mat.melted <- melt(Mean_row_clusters)
colnames(mat.melted) = c("Clusters","Samples","mean_value")
#Plot simplified heat map with ggplot2
#Extract the table of the cluster statistics
Df_x = data.frame(Clusters =  1:K ,
Obs_number = c(table(row_cluster$clustering)),
MeanSh_widths = round( c( row_cluster$silinfo$clus.avg.widths),3),
X = min( 5, ncol(SE)/2))
Df_x$Label = paste0("Mean sil width: ",Df_x$MeanSh_widths,"; Obs #:",Df_x$Obs_number)
p1 <- ggplot(mat.melted) + geom_tile(aes(y = Clusters, x = Samples, fill = mean_value)) +
scale_fill_gradient(low = "Blue", high = "Yellow") +
theme_classic() +
theme(axis.text.x = element_text(angle = 310, vjust =1, hjust = 0),
plot.margin = margin(1,1,1,1,"cm")) +
labs(title = paste0("K Medoids Clustering With K = ",K,"; ",HDER),
subtitle = paste0("total mean silinfo width: ",round(row_cluster$silinfo$avg.width,3))) + geom_label(data = Df_x,mapping = aes(x = X,y = Clusters - .25,label = Label),size = 3,label.size = .05)
fig_height_p1 = 3.4 + .3*K + .05 * max(nchar(as.character(colnames(SE))))
fig_width_p1 = 4 + .2 * ncol(SE)
ggsave(paste0(HDER,"_kmedoids.pdf"),p1,width = fig_width_p1,height = fig_height_p1)
#Fit multinomial GLM to analysis the clustering label
GLM_df = mcols(SE)
GLM_df$Y = factor( paste0("Cluster ",row_cluster$clustering) )
GLM_df$Y = relevel(GLM_df$Y, "Cluster 1")
Null_model <-  multinom(Y ~ 1, data = GLM_df)
Proposed_model <-  multinom(Y ~ ., data = GLM_df)
stat_test <- summary(Proposed_model)
z <- stat_test$coefficients/stat_test$standard.errors
#Prepare a data frame for the ggplot.
Plot_df_Z <- melt(z)
Plot_df_Z$Stat <- "Wald_Z"
Plot_df_Estimate <- melt(stat_test$coefficients)
Plot_df_Estimate$Stat <- "log(OddsRatio)"
if(ncol(Plot_df_Z) == 2) {
Plot_df_Z = cbind("Cluster 2", rownames(Plot_df_Z), Plot_df_Z )
colnames(Plot_df_Z) = c("Clusters","Covariates","values","Statistics")
Plot_df_Estimate = cbind("Cluster 2", rownames(Plot_df_Estimate), Plot_df_Estimate)
colnames(Plot_df_Estimate) = c("Clusters","Covariates","values","Statistics")
}
Plot_df <- rbind(Plot_df_Z,Plot_df_Estimate)
colnames(Plot_df) <- c("Clusters","Covariates","values","Statistics")
Plot_df$Covariates = gsub("TRUE","",Plot_df$Covariates)
Indx <- names( sort( tapply(Plot_df$values[Plot_df$Statistics == "Wald_Z"] ,
Plot_df$Covariates[Plot_df$Statistics == "Wald_Z"],
function(x) sum(abs(x))) , decreasing = F))
Plot_df$Covariates = factor(Plot_df$Covariates, levels = Indx)
Plot_df$values_abs = abs(Plot_df$values)
Plot_df$Sign = "positive"
Plot_df$Sign[Plot_df$values < 0] = "negative"
Plot_df$Group = paste0(Plot_df$Statistics,":",Plot_df$Clusters)
Indx_Group = unique(Plot_df$Group)
Plot_df$Group = factor( Plot_df$Group,
levels = c(Indx_Group[seq(1,length(Indx_Group)-1,by= K-1)],
Indx_Group[seq(2,length(Indx_Group),by= K-1)]) )
Z = Plot_df$values[Plot_df$Statistics == "Wald_Z"]
p <- (1 - pnorm(abs(z), 0, 1))*2
Sig_indx <- p.adjust(p,method = "fdr") < .05
Plot_df$FDR_sig = "Insig"
Plot_df$FDR_sig[Plot_df$Statistics == "Wald_Z"][Sig_indx] = "< .05"
p2 <- ggplot(Plot_df) +
geom_bar(stat = "identity",aes(x = Covariates, y = values_abs, fill = Sign, colour = FDR_sig), width = .75,size = .35, linetype = 1) +
facet_wrap(~Group,nrow = 1,scales = "free_x") +
theme_classic() + coord_flip() + theme(axis.text.y = element_text(size = 7),
plot.margin = margin(1,1.5,1,1,"cm")) +
scale_fill_brewer(direction = -1) + scale_colour_manual(values = c("red", 0)) +
labs(title = paste0("Multinomial logistic model for clustering result: ",HDER),
subtitle = paste0("Proposed model Chisq statistics: ",
round(  Null_model$deviance-Proposed_model$deviance, 3),
" on ",length(Indx) * (K-1) - 1 ," df"),
y = "abs(values)")
fig_width_p2 = 5 + 2.5*(K-1) + .01 * max(nchar(Indx))
fig_height_p2 = 4 + .08 * length(Indx)
ggsave(paste0(HDER,"_GLMestimates.pdf"),p2,width = fig_width_p2,height = fig_height_p2)
#Calculate the total statistical significance of the proposed model.
Stat_df <- data.frame(
NULL_Deviance = Null_model$deviance,
Residual_Deviance = Proposed_model$deviance
)
Stat_df$Reduced_prop = 1 - Stat_df$Residual_Deviance/Stat_df$NULL_Deviance
Stat_df$Cost_df = length(Indx) * (K-1) - 1
Stat_df$Chisq_stat = Stat_df$NULL_Deviance - Stat_df$Residual_Deviance
write.table(t(Stat_df),paste0("Model_report_",HDER,".txt"),col.names = F)
}
Eval_row_joint(SE,"Row_Joint_test",K = 2)
Eval_row_joint(SE,"Row_Joint_test",K = 3)
Eval_row_joint(SE_DESeq2[rowMads(assay(SE_DESeq2),na.rm = T) > .8,],
"DESeq2",K = 3)
debug(Eval_row_joint)
Eval_row_joint(SE_DESeq2[rowMads(assay(SE_DESeq2),na.rm = T) > .8,],
"DESeq2",K = 3)
z
stat_test
head(mcols(SE))
library(m6ALogisticModel)
library(SummarizedExperiment)
SE_CQN <- readRDS( "m6A_DESEQ2_cqn.rds" )
SE_noCQN <- readRDS( "m6A_DESEQ2_nocqn.rds" )
m6A_raw <- readRDS("m6A_raw.rds")
assays(m6A_raw)[["m6Alog2FC"]] <- log2(assays(m6A_raw)$IP/colSums(assays(m6A_raw)$IP) + .01) - log2(assays(m6A_raw)$input/colSums(assays(m6A_raw)$input) + .01)
assays(m6A_raw) = assays(m6A_raw)[c("m6Alog2FC","IP","input")]
row_features <- read.csv("Features_row.csv")
mcols(SE_CQN ) = row_features
mcols(SE_noCQN ) = row_features
m6A_raw = m6A_raw[rowRanges( m6A_raw) %in% rowRanges(SE_noCQN ),]
mcols(m6A_raw) = row_features[,-1]
head(row_features[,-1])
mcols(SE_CQN ) = row_features[,-1]
mcols(SE_noCQN ) = row_features[,-1]
m6A_raw = m6A_raw[rowRanges( m6A_raw) %in% rowRanges(SE_noCQN ),]
mcols(m6A_raw) = row_features[,-1]
saveRDS(m6A_raw,"SE_naive.rds")
saveRDS(SE_noCQN,"SE_DESeq2.rds")
saveRDS(SE_CQN,"SE_CQN.rds")
SE_naive <- readRDS("SE_naive.rds")
SE_DESeq2 <- readRDS("SE_DESeq2.rds")
SE_CQN <- readRDS("SE_CQN.rds")
assays(SE_DESeq2)$m6Alog2FC[assays(SE_DESeq2)$geneExpression < 8.5] = NA
indx_keep <- rowSums( is.na(assay(SE_DESeq2)) ) <= 10
SE_DESeq2 <- SE_DESeq2[indx_keep,]
assays(SE_DESeq2)$m6Alog2FC = scale(assays(SE_DESeq2)$m6Alog2FC)
Eval_row_joint(SE_DESeq2[rowMads(assay(SE_DESeq2),na.rm = T) > .8,],
"DESeq2",K = 3)
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8.5] = NA
indx_keep <- rowSums( is.na(assay(SE_CQN)) ) <= 10
SE_CQN <- SE_CQN[indx_keep,]
assays(SE_CQN)$m6Alog2FC = scale(assays(SE_CQN)$m6Alog2FC)
Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .8,],
"CQN",K = 3)
summary(assays(SE_naive)$IP + assays(SE_naive)$input)
Eval_row_joint(SE_DESeq2[rowMads(assay(SE_DESeq2),na.rm = T) > .8,],
"DESeq2",K = 3)
colSums(assays(SE_naive)$IP)
summary(assays(SE_naive)$input/colSums(assays(SE_naive)$input))
summary(assays(SE_naive)$input*1e6/colSums(assays(SE_naive)$input))
apply(assays(SE_naive)$input*1e6/colSums(assays(SE_naive)$input),2,sum)
apply((assays(SE_naive)$input*1e6)/colSums(assays(SE_naive)$input),2,sum)
apply(assays(SE_naive)$input/colSums(assays(SE_naive)$input),2,sum)
assays(SE_naive)$input
knitr::opts_chunk$set(echo = TRUE)
assays(SE_naive)$m6Alog2FC[assays(SE_naive)$input < 25] = NA
indx_keep <- rowSums( is.na(assay(SE_naive)) ) <= 10
table(indx_keep )
SE_naive <- SE_naive[indx_keep,]
assays(SE_naive)$m6Alog2FC = scale(assays(SE_naive)$m6Alog2FC)
Eval_row_joint
hist(rowMads(assay(SE_naive),na.rm = T))
summary(rowMads(assay(SE_naive),na.rm = T))
sum(rowMads(assay(SE_naive),na.rm = T) > .2)
Eval_row_joint(SE_naive[rowMads(assay(SE_naive),na.rm = T) > .2,],
"CQN",K = 3)
Eval_row_joint(SE_naive[rowMads(assay(SE_naive),na.rm = T) > .2,],
"naive",K = 3)
library(m6ALogisticModel)
SE_naive <- readRDS("SE_naive.rds")
SE_naive <- SE_naive[,!colnames(SE_naive)%in%samples_exclude]
samples_exclude <- c("human_gsc11_C",
"human_gsc11_ALKBH5_",
"human_MonoMac6_C",
"human_MonoMac6_METTL14_",
"human_NB4_C",
"human_NB4_METTL14_")
library(m6ALogisticModel)
SE_naive <- readRDS("SE_naive.rds")
SE_naive <- SE_naive[,!colnames(SE_naive)%in%samples_exclude]
SE_DESeq2 <- SE_DESeq2[,!colnames(SE_DESeq2)%in%samples_exclude]
SE_naive <- readRDS("SE_naive.rds")
SE_naive <- SE_naive[,!colnames(SE_naive)%in%samples_exclude]
SE_DESeq2 <- readRDS("SE_DESeq2.rds")
SE_DESeq2 <- SE_DESeq2[,!colnames(SE_DESeq2)%in%samples_exclude]
SE_CQN <- readRDS("SE_CQN.rds")
SE_CQN <- SE_CQN[,!colnames(SE_CQN)%in%samples_exclude]
SE_CQN
assays(SE_DESeq2)$m6Alog2FC[assays(SE_DESeq2)$geneExpression < 8.5] = NA
indx_keep <- rowSums( is.na(assay(SE_DESeq2)) ) <= 10
sum(indx_keep)
indx_keep <- rowSums( is.na(assay(SE_DESeq2)) ) <= 10
SE_DESeq2 <- SE_DESeq2[indx_keep,]
assays(SE_DESeq2)$m6Alog2FC = scale(assays(SE_DESeq2)$m6Alog2FC)
hist(rowMads(assay(SE_DESeq2),na.rm = T))
Eval_row_joint(SE_DESeq2[rowMads(assay(SE_DESeq2),na.rm = T) > .7,],
"DESeq2",K = 3)
Eval_row_joint(SE_DESeq2[rowMads(assay(SE_DESeq2),na.rm = T) > .7,],
"DESeq2_sampleset2",K = 3)
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8.5] = NA
indx_keep <- rowSums( is.na(assay(SE_CQN)) ) <= 10
SE_CQN <- SE_CQN[indx_keep,]
assays(SE_CQN)$m6Alog2FC = scale(assays(SE_CQN)$m6Alog2FC)
Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .7,],
"DESeq2_sampleset2",K = 3)
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8.5] = NA
indx_keep <- rowSums( is.na(assay(SE_CQN)) ) <= 10
SE_CQN <- SE_CQN[indx_keep,]
assays(SE_CQN)$m6Alog2FC = scale(assays(SE_CQN)$m6Alog2FC)
Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .7,],
"CQN_sampleset2",K = 3)
assays(SE_naive)$m6Alog2FC[assays(SE_naive)$input < 25] = NA
indx_keep <- rowSums( is.na(assay(SE_naive)) ) <= 10
SE_naive <- SE_naive[indx_keep,]
assays(SE_naive)$m6Alog2FC = scale(assays(SE_naive)$m6Alog2FC)
rowMads(assay(SE_naive),na.rm = T)
summary(rowMads(assay(SE_naive),na.rm = T))
table(rowMads(assay(SE_naive),na.rm = T) > .2)
table(rowMads(assay(SE_naive),na.rm = T) > .15)
Eval_row_joint(SE_naive[rowMads(assay(SE_naive),na.rm = T) > .15,],
"naive_sampleset2",K = 3)
library(m6ALogisticModel)
knitr::opts_chunk$set(echo = TRUE)
SE_CQN <- readRDS("SE_CQN.rds")
samples_exclude <- c("human_gsc11_C",
"human_gsc11_ALKBH5_",
"human_MonoMac6_C",
"human_MonoMac6_METTL14_",
"human_NB4_C",
"human_NB4_METTL14_")
library(m6ALogisticModel)
SE_CQN <- readRDS("SE_CQN.rds")
samples_exclude <- c("human_gsc11_C",
"human_gsc11_ALKBH5_",
"human_MonoMac6_C",
"human_MonoMac6_METTL14_",
"human_NB4_C",
"human_NB4_METTL14_")
SE_CQN <- SE_CQN[,!colnames(SE_CQN)%in%samples_exclude]
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8.5] = NA
indx_keep <- rowSums( is.na(assay(SE_CQN)) ) <= 10
SE_CQN <- SE_CQN[indx_keep,]
assays(SE_CQN)$m6Alog2FC = scale(assays(SE_CQN)$m6Alog2FC)
Indx_row_cluster <- Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .7,],
"CQN_sampleset2",K = 3,RETURN_INDX = T)
set.seed(1)
Indx_row_cluster <- Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .7,],
"CQN_sampleset2",K = 3,RETURN_INDX = T)
head(v)
Indx_row_cluster
human_sb_SE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/SB_80k_human_SE.rds")
head(human_sb_SE)
human_sb_gr <- rowRanges( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/SB_80k_human_SE.rds") )
human_sb_gr
SB_index <- rowRanges(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .7,]) %over% human_sb_gr
table(SB_index)
table(SB_index,Indx_row_cluster)
table(SB_index,Indx_row_cluster == "2")
fisher.test( table(SB_index,Indx_row_cluster == "2") )
fisher.test( table(!SB_index,Indx_row_cluster == "2") )
table(SB_index,Indx_row_cluster)
sum(rowRanges(SE_naive) %over% human_sb_gr)
rowRanges(SE_naive)
library(m6ALogisticModel)
SE_naive <- readRDS("SE_naive.rds")
SE_DESeq2 <- readRDS("SE_DESeq2.rds")
SE_CQN <- readRDS("SE_CQN.rds")
human_sb_gr <- rowRanges( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/SB_80k_human_SE.rds") )
sum(rowRanges(SE_naive) %over% human_sb_gr)
length( human_sb_gr)
rowRanges(SE_naive)
sum(rowRanges(SE_CQN) %over% human_sb_gr)
SE_CQN <- SE_CQN[rowRanges(SE_CQN) %over% human_sb_gr,]
Plot_column_joint(assay( SE_CQN ), METRIC = "pearson",HDER = "SB_only",GROUP_LABEL = SE_CQN$Tissue)
library(meripQC)
Plot_column_joint(assay( SE_CQN ), METRIC = "pearson",HDER = "SB_only",GROUP_LABEL = SE_CQN$Tissue)
Plot_column_joint(assay( SE_CQN ), METRIC = "pearson",HDER = "SB_only",GROUP_LABEL = SE_CQN$Tissue, VISUAL = "dendrogram")
mean(assays(SE_CQN)$geneExpression < 5)
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 5] = NA
Plot_column_joint(assay( SE_CQN ), METRIC = "pearson",HDER = "SB_only_exfilt",GROUP_LABEL = SE_CQN$Tissue, VISUAL = "dendrogram")
assays(SE_CQN)$geneExpression < 8.5
mean(assays(SE_CQN)$geneExpression < 5)
mean(assays(SE_CQN)$geneExpression < 8)
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8] = NA
Plot_column_joint(assay( SE_CQN ), METRIC = "pearson",HDER = "SB_only_exfilt",GROUP_LABEL = SE_CQN$Tissue, VISUAL = "dendrogram")
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "mds")
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "MDS")
SE_CQN <- readRDS("SE_CQN.rds")
human_sb_gr <- rowRanges( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/SB_80k_human_SE.rds") )
SE_CQN <- SE_CQN[rowRanges(SE_CQN) %over% human_sb_gr,]
samples_exclude <- c("human_gsc11_C",
"human_gsc11_ALKBH5_",
"human_MonoMac6_C",
"human_MonoMac6_METTL14_",
"human_NB4_C",
"human_NB4_METTL14_")
SE_CQN <- SE_CQN[,!colnames(SE_CQN)%in%samples_exclude]
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 6] = NA #Questionable.
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "MDS") #The change is not so big then.
mean(assays(SE_CQN)$geneExpression < 6)
!colnames(SE_CQN)%in%samples_exclude
colnames(SE_CQN)
colnames(SE_CQN )
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "MDS") #The change is not so big after all.
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "dg") #The change is not so big after all.
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "dendrogram")
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 7] = NA #Questionable what specific filter we need to get.
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "dendrogram") #The change is not so big after all.
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8] = NA #Questionable what specific filter we need to get.
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "dendrogram") #The change is not so big after all.
rowSums( is.na(assay(SE_CQN)) )
rowSums( is.na(assay(SE_CQN)) ) <= 10
table( rowSums( is.na(assay(SE_CQN)) ) <= 10)
indx_keep <- rowSums( is.na(assay(SE_CQN)) ) <= 10
SE_CQN <- SE_CQN[indx_keep,]
assays(SE_CQN)$m6Alog2FC = scale(assays(SE_CQN)$m6Alog2FC)
hist(rowMads(assay(SE_CQN),na.rm = T))
mean(rowMads(assay(SE_CQN),na.rm = T) > .5)
sum(rowMads(assay(SE_CQN),na.rm = T) > .5)
Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .5,],
"CQN_SB_only",K = 3)
sum(rowMads(assay(SE_CQN),na.rm = T) > .6)
Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .6,],
"CQN_SB_only",K = 3)
sum(rowMads(assay(SE_CQN),na.rm = T) > .5)
sum(rowMads(assay(SE_CQN),na.rm = T) > .55)
indx_keep <- rowSums( is.na(assay(SE_CQN)) ) <= 10
SE_CQN <- SE_CQN[indx_keep,]
assays(SE_CQN)$m6Alog2FC = scale(assays(SE_CQN)$m6Alog2FC)
set.seed(1)
Indx_kmeans <- Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .55,],
"CQN_SB_only",K = 3)
devtools::install_github("skyhorsetomoon/Trumpet")
library(Trumpet)
f1 <- system.file("extdata", "IP1.bam", package="Trumpet")
f2 <- system.file("extdata", "IP2.bam", package="Trumpet")
f3 <- system.file("extdata", "IP3.bam", package="Trumpet")
f4 <- system.file("extdata", "IP4.bam", package="Trumpet")
f5 <- system.file("extdata", "Input1.bam", package="Trumpet")
f6 <- system.file("extdata", "Input2.bam", package="Trumpet")
f7 <- system.file("extdata", "Input3.bam", package="Trumpet")
f8 <- system.file("extdata", "treated_IP1.bam", package="Trumpet")
f9 <- system.file("extdata", "treated_Input1.bam", package="Trumpet")
ip_bam <- c(f1,f2,f3,f4)
input_bam <- c(f5,f6,f7)
contrast_ip_bam <- c(f8)
contrast_input_bam <- c(f9)
gtf <- system.file("extdata", "hg19toy.gtf", package="Trumpet")
trumpet_report <- Trumpet_report(IP_BAM = ip_bam, Input_BAM = input_bam, contrast_IP_BAM = contrast_ip_bam, contrast_Input_BAM = contrast_input_bam, condition1 = "untreated", condition2 = "treat, GENE_ANNO_GTF = gtf)
)
)))))
ajaof
""""
trumpet_report <- Trumpet_report(IP_BAM = ip_bam, Input_BAM = input_bam, contrast_IP_BAM = contrast_ip_bam, contrast_Input_BAM = contrast_input_bam, condition1 = "untreated", condition2 = "treat", GENE_ANNO_GTF = gtf)
library(Trumpet)
trumpet_report <- Trumpet_report(IP_BAM = ip_bam, Input_BAM = input_bam, contrast_IP_BAM = contrast_ip_bam, contrast_Input_BAM = contrast_input_bam, condition1 = "untreated", condition2 = "treat", GENE_ANNO_GTF = gtf)
