var(rnbinom(n = 10000,p = 0.5,size = 4))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
var(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 1))
mean(rnbinom(n = 10000,p = 0.5,size = 2))
mean(rnbinom(n = 10000,p = 0.5,size = 2))
var(rnbinom(n = 10000,p = 0.5,size = 2))
var(rnbinom(n = 10000,p = 0.5,size = 2))
var(rnbinom(n = 10000,p = 0.5,size = 100))
mean(rnbinom(n = 10000,p = 0.5,size = 100))
mean(rnbinom(n = 10000,p = 0.5,size = 100))
t.test(ratios)
ratios <- 10000/replicate(10000, sum(rnbinom(n = 10000,p = 0.5,size = 1)))
t.test(ratios) #p-value < 2.2e-16
t.test(ratios,mu=1) #p-value < 2.2e-16
ratios <- 100000/replicate(1e6, sum(rnbinom(n = 100000,p = 0.5,size = 1)))
ratios <- 10000/replicate(1e6, sum(rnbinom(n = 10000,p = 0.5,size = 1)))
all_rnum <- rnbinom(n = 1e10,p = 0.5,size = 1)
10/3 + 3*5*5
235/3
3 + 54*-1 - 5
17+7+17
17+7+17+2+2-1+2
17+7+17+1+1-1+3
17+7+17+1+1-1+3
18/(18+18+7)
45*18/(18+18+7)
knitr::opts_chunk$set(echo = TRUE)
coldata_example <- read.csv("./coldata_example.csv")
coldata_example$SRR_RUN
paste0("tar -cvzf ep2_examples.tar.gz ", coldata_example$SRR_RUN , ".bam")
paste0("tar -cvzf ep2_examples.tar.gz ", collapse( coldata_example$SRR_RUN , sep = " ") , ".bam")
paste0("tar -cvzf ep2_examples.tar.gz ", paste( coldata_example$SRR_RUN ,collapse = " ") , ".bam")
paste0("tar -cvzf ep2_examples.tar.gz ", paste( paste0(coldata_example$SRR_RUN,".bam") ,collapse = " "))
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/sh_A549/bam", paste0("SRR",1182621:1182624) )
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/sh_A549/bam/", paste0("SRR",1182621:1182624), ".bam")
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/sh_A549/bam/", paste0("SRR",1182621:1182624), "/accepted_Hits.bam")
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/sh_A549/bam/", paste0("SRR",1182621:1182624), "/accepted_hits.bam")
coldata_example
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/WTAP/Human/bam/", paste0("SRR",1182603:1182606), "/accepted_hits.bam")
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/WTAP/Human/bam/", paste0("SRR",1182603:1182606), "/accepted_hits.bam" )
bam_directories <- c(paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/sh_A549/bam/", paste0("SRR",1182621:1182624), "/accepted_hits.bam" ),
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/WTAP/Human/bam/", paste0("SRR",1182603:1182606), "/accepted_hits.bam" ),
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/WTAP/si_A549/bam/", paste0("SRR",1182619:1182620), "/accepted_hits.bam" ))
bam_directories
paste0("tar -cvzf ep2_examples.tar.gz ", paste(bam_directories ,collapse = " "))
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/si_A549/bam/", paste0("SRR",1182619:1182620), "/accepted_hits.bam" ))
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/si_A549/bam/", paste0("SRR",1182619:1182620), "/accepted_hits.bam" ))
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/si_A549/bam/", paste0("SRR",1182619:1182620), "/accepted_hits.bam" )
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/si_A549/bam/", paste0("SRR",1182619:1182620), "/accepted_hits.bam" )
bam_directories <- c(paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/sh_A549/bam/", paste0("SRR",1182621:1182624), "/accepted_hits.bam" ),
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/WTAP/Human/bam/", paste0("SRR",1182603:1182606), "/accepted_hits.bam" ),
paste0( "/media/sano/easystore/ZhenWei/Targets/m6A/Controls/si_A549/bam/", paste0("SRR",1182619:1182620), "/accepted_hits.bam" ))
paste0("tar -cvzf ep2_examples.tar.gz ", paste(bam_directories ,collapse = " "))
library(GenomicAlignments)
Genomic
?summarizeJunctions
summarizeOverlaps()
?summarizeOverlaps()
?summarizeOverlaps
paste0("mv .",bam_directories, " ./bam")
commands <- paste(paste0("mv .",bam_directories, " ./bam"), collapse = ";")
system(commands)
commands <- paste(paste0("mv .",bam_directories, " ./bam/SRR",c(1182621:1182624,
1182603:1182606,
1182619:1182620),".bam"), collapse = ";")
commands
commands <- paste(paste0("mv .",bam_directories, " ./bam/SRR",c(1182621:1182624,
1182603:1182606,
1182619:1182620),".bam"), collapse = ";")
system(commands)
commands <- paste(paste0("mv .",bam_directories, " ./bam/SRR",c(1182621:1182624,
1182603:1182606,
1182619:1182620),".bam"), collapse = ";")
system(commands)
library(m6ALogisticModel)
m6ALogisticModel::hg19_miCLIP_se
head(rowData( hg19_miCLIP_se ))
rowData( hg19_miCLIP_se )
hg19_miCLIP_se
hg19_miCLIP_gr <- readRDS("/Users/zhenwei/Documents/GitHub/Project_X/hg19_miCLIP_ml.rds")
devtools::use_data(hg19_miCLIP_gr,overwrite = TRUE,pkg = "/Users/zhenwei/Documents/GitHub/m6ALogisticModel")
knitr::opts_chunk$set(echo = TRUE)
hg19_miCLIP_se <- SummarizedExperiment(rowRanges = hg19_miCLIP_gr)
rowData(hg19_miCLIP_se)
rowData(hg19_miCLIP_se)$Target
library(m6ALogisticModel)
FTO_eCLIP <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/More\ Modeling\ triles/eCLIP_FTO.rds")
devtools::use_data(FTO_eCLIP)
eCLIP_HNRNPC_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/eCLIP_HNRNPC.rds")
devtools::use_data(eCLIP_HNRNPC_gr)
setwd("/Users/zhenwei/Documents/GitHub/m6ALogisticModel")
eCLIP_HNRNPC_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/I_GLM_feature_prep_2018_1_4/eCLIP_HNRNPC.rds")
devtools::use_data(eCLIP_HNRNPC_gr,overwrite = TRUE)
library(m6ALogisticModel)
?glm_regular
knitr::opts_chunk$set(echo = TRUE)
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Additional_features_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
hg19_miCLIP_se <- SummarizedExperiment(rowRanges = hg19_miCLIP_gr)
hg19_miCLIP_se <- predictors_annot(se = hg19_miCLIP_se,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids)
glm_regular(Y = rowData(hg19_miCLIP_se)$Target > 0,
PREDICTORS = rowData(hg19_miCLIP_se)[,-1],
family = "binomial")
rowData(hg19_miCLIP_se)$Target > 0
rowData(hg19_miCLIP_se)
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = rowData(hg19_miCLIP_se)[,-1],
family = "binomial")
hg19_miCLIP_gr$Target > 0
rowData(hg19_miCLIP_se)[,-1]
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial")
glm_regular
debug(glm_regular)
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial")
indx_no_info
indx_no_info <- sapply( PREDICTORS, function(x) { if (is.logical(x)){
return( (sum(x) <= CUT_OFF | sum(!x) <= CUT_OFF) )
} else {
return(F)
}
} )
library(m6ALogisticModel)
glm_regular <- function(Y,
PREDICTORS,
HDER = "glm",
family = c("gaussian","binomial","poisson"),
CUT_OFF = 5,
Critical_value = 0.05,
Exclude_intercept = F) {
stopifnot( is.null(ncol(Y)) | family == "binomial" )
stopifnot( is.null(ncol(Y)) | ncol(Y) == 2 )
stopifnot(length(Y) == nrow(PREDICTORS) | nrow(Y) == nrow(PREDICTORS))
family <- match.arg(family)
Y_na <- is.na(Y)
if(any(Y_na)){
warning(paste0(sum(Y_na),"response rows contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
X_na <- apply(is.na(PREDICTORS),1,any)
if(any(X_na)){
warning(paste0(sum(X_na),"feature rows contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
Y <- Y[!(Y_na|X_na)]
PREDICTORS <- PREDICTORS[!(Y_na|X_na),]
indx_no_info <- sapply( PREDICTORS, function(x) { if (is.logical(x)){
return( (sum(x) <= CUT_OFF | sum(!x) <= CUT_OFF) )
} else {
return(F)
}
} )
if(any(indx_no_info)){
warning(paste0("dropped dummy variable feature(s): ", paste0( gsub("TRUE","",names(indx_no_info[which(indx_no_info)])) , collapse=", "), "; the threshold is defined by the CUT_OFF argument (sum of TRUE / FALSE entries <= ",CUT_OFF,")."),call. = F, immediate. = T)
}
Model = PREDICTORS[,!indx_no_info]
if( family == "gaussian") {
Fitted_model <-  glm(Y~.,family = gaussian(link = "identity"),data = Model)
}
if( family == "binomial") {
Fitted_model <- glm(Y~., family = binomial(link = "logit"),data = Model)
}
if( family == "poisson") {
Fitted_model <- glm(Y~., family = poisson(link = "log"),data = Model)
}
summary_glm <- summary(Fitted_model)
Critical_value <- qnorm((.05/2)/(ncol(Model)),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
if(Exclude_intercept) {
plot_df =  plot_df[plot_df$X_lab != "Intercept",]
plot_df$X_lab <- as.character(plot_df$X_lab)
}
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
library(ggplot2)
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) +
geom_bar(stat = "identity", width = .4, fill = "blue2", colour = "red", size = 0.1) +
geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) +
coord_flip() + facet_grid(~variable,scales = "free") +
theme_classic() +
labs(title = paste0(family, " linear model on genomic features" ),
subtitle = HDER,
x = "predictors")
suppressWarnings( ggsave( paste0(HDER,"_",family,"_glm.pdf"), p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
return(p1)
}
knitr::opts_chunk$set(echo = TRUE)
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial")
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial")
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial")
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial")
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial",
HDER = "hg19_miCLIP")
glm_regular <- function(Y,
PREDICTORS,
HDER = "glm",
family = c("gaussian","binomial","poisson"),
CUT_OFF = 5,
Critical_value = 0.05,
Exclude_intercept = F,
Sort_by = c("byZstat","byLogit")) {
stopifnot( is.null(ncol(Y)) | family == "binomial" )
stopifnot( is.null(ncol(Y)) | ncol(Y) == 2 )
stopifnot(length(Y) == nrow(PREDICTORS) | nrow(Y) == nrow(PREDICTORS))
family <- match.arg(family)
Y_na <- is.na(Y)
if(any(Y_na)){
warning(paste0(sum(Y_na),"response rows contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
X_na <- apply(is.na(PREDICTORS),1,any)
if(any(X_na)){
warning(paste0(sum(X_na),"feature rows contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
Y <- Y[!(Y_na|X_na)]
PREDICTORS <- PREDICTORS[!(Y_na|X_na),]
indx_no_info <- sapply( PREDICTORS, function(x) { if (is.logical(x)){
return( (sum(x) <= CUT_OFF | sum(!x) <= CUT_OFF) )
} else {
return(F)
}
} )
if(any(indx_no_info)){
warning(paste0("dropped dummy variable feature(s): ", paste0( gsub("TRUE","",names(indx_no_info[which(indx_no_info)])) , collapse=", "), "; the threshold is defined by the CUT_OFF argument (sum of TRUE / FALSE entries <= ",CUT_OFF,")."),call. = F, immediate. = T)
}
Model = PREDICTORS[,!indx_no_info]
if( family == "gaussian") {
Fitted_model <-  glm(Y~.,family = gaussian(link = "identity"),data = Model)
}
if( family == "binomial") {
Fitted_model <- glm(Y~., family = binomial(link = "logit"),data = Model)
}
if( family == "poisson") {
Fitted_model <- glm(Y~., family = poisson(link = "log"),data = Model)
}
summary_glm <- summary(Fitted_model)
Critical_value <- qnorm((.05/2)/(ncol(Model)),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
if(Exclude_intercept) {
plot_df =  plot_df[plot_df$X_lab != "Intercept",]
plot_df$X_lab <- as.character(plot_df$X_lab)
}
Sort_by <- match.arg(Sort_by)
if(Sort_by == "byZstat" ) {
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
}else {
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$`z.value`,decreasing = F)])
}
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
library(ggplot2)
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) +
geom_bar(stat = "identity", width = .4, fill = "darkblue", colour = "red", size = 0.1) +
geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) +
coord_flip() + facet_grid(~variable,scales = "free") +
theme_classic() +
labs(title = paste0(family, " linear model on genomic features" ),
subtitle = HDER,
x = "predictors")
suppressWarnings( ggsave( paste0(HDER,"_",family,"_glm.pdf"), p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
return(p1)
}
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial",
HDER = "hg19_miCLIP")
glm_regular <- function(Y,
PREDICTORS,
HDER = "glm",
family = c("gaussian","binomial","poisson"),
CUT_OFF = 5,
Critical_value = 0.05,
Exclude_intercept = F,
Sort_by = c("byZstat","byLogit")) {
stopifnot( is.null(ncol(Y)) | family == "binomial" )
stopifnot( is.null(ncol(Y)) | ncol(Y) == 2 )
stopifnot(length(Y) == nrow(PREDICTORS) | nrow(Y) == nrow(PREDICTORS))
family <- match.arg(family)
Y_na <- is.na(Y)
if(any(Y_na)){
warning(paste0(sum(Y_na),"response rows contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
X_na <- apply(is.na(PREDICTORS),1,any)
if(any(X_na)){
warning(paste0(sum(X_na),"feature rows contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
Y <- Y[!(Y_na|X_na)]
PREDICTORS <- PREDICTORS[!(Y_na|X_na),]
indx_no_info <- sapply( PREDICTORS, function(x) { if (is.logical(x)){
return( (sum(x) <= CUT_OFF | sum(!x) <= CUT_OFF) )
} else {
return(F)
}
} )
if(any(indx_no_info)){
warning(paste0("dropped dummy variable feature(s): ", paste0( gsub("TRUE","",names(indx_no_info[which(indx_no_info)])) , collapse=", "), "; the threshold is defined by the CUT_OFF argument (sum of TRUE / FALSE entries <= ",CUT_OFF,")."),call. = F, immediate. = T)
}
Model = PREDICTORS[,!indx_no_info]
if( family == "gaussian") {
Fitted_model <-  glm(Y~.,family = gaussian(link = "identity"),data = Model)
}
if( family == "binomial") {
Fitted_model <- glm(Y~., family = binomial(link = "logit"),data = Model)
}
if( family == "poisson") {
Fitted_model <- glm(Y~., family = poisson(link = "log"),data = Model)
}
summary_glm <- summary(Fitted_model)
Critical_value <- qnorm((.05/2)/(ncol(Model)),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
if(Exclude_intercept) {
plot_df =  plot_df[plot_df$X_lab != "Intercept",]
plot_df$X_lab <- as.character(plot_df$X_lab)
}
Sort_by <- match.arg(Sort_by)
if(Sort_by == "byZstat" ) {
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$`z.value`,decreasing = F)])
}else {
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
}
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
library(ggplot2)
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) +
geom_bar(stat = "identity", width = .4, fill = "darkblue", colour = "red", size = 0.1) +
geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) +
coord_flip() + facet_grid(~variable,scales = "free") +
theme_classic() +
labs(title = paste0(family, " linear model on genomic features" ),
subtitle = HDER,
x = "predictors")
suppressWarnings( ggsave( paste0(HDER,"_",family,"_glm.pdf"), p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
return(p1)
}
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial",
HDER = "hg19_miCLIP")
glm_regular <- function(Y,
PREDICTORS,
HDER = "glm",
family = c("gaussian","binomial","poisson"),
CUT_OFF = 5,
Critical_value = 0.05,
Exclude_intercept = F,
Sort_by = c("byZstat","byLogit")) {
stopifnot( is.null(ncol(Y)) | family == "binomial" )
stopifnot( is.null(ncol(Y)) | ncol(Y) == 2 )
stopifnot(length(Y) == nrow(PREDICTORS) | nrow(Y) == nrow(PREDICTORS))
family <- match.arg(family)
Y_na <- is.na(Y)
if(any(Y_na)){
warning(paste0(sum(Y_na),"response rows contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
X_na <- apply(is.na(PREDICTORS),1,any)
if(any(X_na)){
warning(paste0(sum(X_na),"feature rows contain missing values,
they are dropped from the model."),call.=FALSE,immediate. = TRUE)
}
Y <- Y[!(Y_na|X_na)]
PREDICTORS <- PREDICTORS[!(Y_na|X_na),]
indx_no_info <- sapply( PREDICTORS, function(x) { if (is.logical(x)){
return( (sum(x) <= CUT_OFF | sum(!x) <= CUT_OFF) )
} else {
return(F)
}
} )
if(any(indx_no_info)){
warning(paste0("dropped dummy variable feature(s): ", paste0( gsub("TRUE","",names(indx_no_info[which(indx_no_info)])) , collapse=", "), "; the threshold is defined by the CUT_OFF argument (sum of TRUE / FALSE entries <= ",CUT_OFF,")."),call. = F, immediate. = T)
}
Model = PREDICTORS[,!indx_no_info]
if( family == "gaussian") {
Fitted_model <-  glm(Y~.,family = gaussian(link = "identity"),data = Model)
}
if( family == "binomial") {
Fitted_model <- glm(Y~., family = binomial(link = "logit"),data = Model)
}
if( family == "poisson") {
Fitted_model <- glm(Y~., family = poisson(link = "log"),data = Model)
}
summary_glm <- summary(Fitted_model)
Critical_value <- qnorm((.05/2)/(ncol(Model)),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
if(Exclude_intercept) {
plot_df =  plot_df[plot_df$X_lab != "Intercept",]
plot_df$X_lab <- as.character(plot_df$X_lab)
}
Sort_by <- match.arg(Sort_by)
if(Sort_by == "byZstat" ) {
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$`z.value`,decreasing = F)])
}else {
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
}
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
if(Sort_by == "byZstat" ) {
plot_df$variable = factor(plot_df$variable,levels = c("z.value","Estimate"))
}else {
plot_df$variable = factor(plot_df$variable,levels = c("z.value","Estimate"))
}
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) +
geom_bar(stat = "identity", width = .4, fill = "darkblue", colour = "red", size = 0.1) +
geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) +
coord_flip() + facet_grid(~ variable,scales = "free") +
theme_classic() +
labs(title = paste0(family, " linear model on genomic features" ),
subtitle = HDER,
x = "predictors")
suppressWarnings( ggsave( paste0(HDER,"_",family,"_glm.pdf"), p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
return(p1)
}
glm_regular(Y = hg19_miCLIP_gr$Target > 0,
PREDICTORS = as.data.frame( rowData(hg19_miCLIP_se)[,-1] ),
family = "binomial",
HDER = "hg19_miCLIP")
rm(glm_regular)
?(glm_regular)
?glm_regular
library(m6ALogisticModel)
