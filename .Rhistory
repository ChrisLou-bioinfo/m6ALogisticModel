Eval_row_joint(SE_DESeq2[rowMads(assay(SE_DESeq2),na.rm = T) > .8,],
"DESeq2",K = 3)
colSums(assays(SE_naive)$IP)
summary(assays(SE_naive)$input/colSums(assays(SE_naive)$input))
summary(assays(SE_naive)$input*1e6/colSums(assays(SE_naive)$input))
apply(assays(SE_naive)$input*1e6/colSums(assays(SE_naive)$input),2,sum)
apply((assays(SE_naive)$input*1e6)/colSums(assays(SE_naive)$input),2,sum)
apply(assays(SE_naive)$input/colSums(assays(SE_naive)$input),2,sum)
assays(SE_naive)$input
knitr::opts_chunk$set(echo = TRUE)
assays(SE_naive)$m6Alog2FC[assays(SE_naive)$input < 25] = NA
indx_keep <- rowSums( is.na(assay(SE_naive)) ) <= 10
table(indx_keep )
SE_naive <- SE_naive[indx_keep,]
assays(SE_naive)$m6Alog2FC = scale(assays(SE_naive)$m6Alog2FC)
Eval_row_joint
hist(rowMads(assay(SE_naive),na.rm = T))
summary(rowMads(assay(SE_naive),na.rm = T))
sum(rowMads(assay(SE_naive),na.rm = T) > .2)
Eval_row_joint(SE_naive[rowMads(assay(SE_naive),na.rm = T) > .2,],
"CQN",K = 3)
Eval_row_joint(SE_naive[rowMads(assay(SE_naive),na.rm = T) > .2,],
"naive",K = 3)
library(m6ALogisticModel)
SE_naive <- readRDS("SE_naive.rds")
SE_naive <- SE_naive[,!colnames(SE_naive)%in%samples_exclude]
samples_exclude <- c("human_gsc11_C",
"human_gsc11_ALKBH5_",
"human_MonoMac6_C",
"human_MonoMac6_METTL14_",
"human_NB4_C",
"human_NB4_METTL14_")
library(m6ALogisticModel)
SE_naive <- readRDS("SE_naive.rds")
SE_naive <- SE_naive[,!colnames(SE_naive)%in%samples_exclude]
SE_DESeq2 <- SE_DESeq2[,!colnames(SE_DESeq2)%in%samples_exclude]
SE_naive <- readRDS("SE_naive.rds")
SE_naive <- SE_naive[,!colnames(SE_naive)%in%samples_exclude]
SE_DESeq2 <- readRDS("SE_DESeq2.rds")
SE_DESeq2 <- SE_DESeq2[,!colnames(SE_DESeq2)%in%samples_exclude]
SE_CQN <- readRDS("SE_CQN.rds")
SE_CQN <- SE_CQN[,!colnames(SE_CQN)%in%samples_exclude]
SE_CQN
assays(SE_DESeq2)$m6Alog2FC[assays(SE_DESeq2)$geneExpression < 8.5] = NA
indx_keep <- rowSums( is.na(assay(SE_DESeq2)) ) <= 10
sum(indx_keep)
indx_keep <- rowSums( is.na(assay(SE_DESeq2)) ) <= 10
SE_DESeq2 <- SE_DESeq2[indx_keep,]
assays(SE_DESeq2)$m6Alog2FC = scale(assays(SE_DESeq2)$m6Alog2FC)
hist(rowMads(assay(SE_DESeq2),na.rm = T))
Eval_row_joint(SE_DESeq2[rowMads(assay(SE_DESeq2),na.rm = T) > .7,],
"DESeq2",K = 3)
Eval_row_joint(SE_DESeq2[rowMads(assay(SE_DESeq2),na.rm = T) > .7,],
"DESeq2_sampleset2",K = 3)
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8.5] = NA
indx_keep <- rowSums( is.na(assay(SE_CQN)) ) <= 10
SE_CQN <- SE_CQN[indx_keep,]
assays(SE_CQN)$m6Alog2FC = scale(assays(SE_CQN)$m6Alog2FC)
Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .7,],
"DESeq2_sampleset2",K = 3)
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8.5] = NA
indx_keep <- rowSums( is.na(assay(SE_CQN)) ) <= 10
SE_CQN <- SE_CQN[indx_keep,]
assays(SE_CQN)$m6Alog2FC = scale(assays(SE_CQN)$m6Alog2FC)
Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .7,],
"CQN_sampleset2",K = 3)
assays(SE_naive)$m6Alog2FC[assays(SE_naive)$input < 25] = NA
indx_keep <- rowSums( is.na(assay(SE_naive)) ) <= 10
SE_naive <- SE_naive[indx_keep,]
assays(SE_naive)$m6Alog2FC = scale(assays(SE_naive)$m6Alog2FC)
rowMads(assay(SE_naive),na.rm = T)
summary(rowMads(assay(SE_naive),na.rm = T))
table(rowMads(assay(SE_naive),na.rm = T) > .2)
table(rowMads(assay(SE_naive),na.rm = T) > .15)
Eval_row_joint(SE_naive[rowMads(assay(SE_naive),na.rm = T) > .15,],
"naive_sampleset2",K = 3)
library(m6ALogisticModel)
knitr::opts_chunk$set(echo = TRUE)
SE_CQN <- readRDS("SE_CQN.rds")
samples_exclude <- c("human_gsc11_C",
"human_gsc11_ALKBH5_",
"human_MonoMac6_C",
"human_MonoMac6_METTL14_",
"human_NB4_C",
"human_NB4_METTL14_")
library(m6ALogisticModel)
SE_CQN <- readRDS("SE_CQN.rds")
samples_exclude <- c("human_gsc11_C",
"human_gsc11_ALKBH5_",
"human_MonoMac6_C",
"human_MonoMac6_METTL14_",
"human_NB4_C",
"human_NB4_METTL14_")
SE_CQN <- SE_CQN[,!colnames(SE_CQN)%in%samples_exclude]
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8.5] = NA
indx_keep <- rowSums( is.na(assay(SE_CQN)) ) <= 10
SE_CQN <- SE_CQN[indx_keep,]
assays(SE_CQN)$m6Alog2FC = scale(assays(SE_CQN)$m6Alog2FC)
Indx_row_cluster <- Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .7,],
"CQN_sampleset2",K = 3,RETURN_INDX = T)
set.seed(1)
Indx_row_cluster <- Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .7,],
"CQN_sampleset2",K = 3,RETURN_INDX = T)
head(v)
Indx_row_cluster
human_sb_SE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/SB_80k_human_SE.rds")
head(human_sb_SE)
human_sb_gr <- rowRanges( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/SB_80k_human_SE.rds") )
human_sb_gr
SB_index <- rowRanges(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .7,]) %over% human_sb_gr
table(SB_index)
table(SB_index,Indx_row_cluster)
table(SB_index,Indx_row_cluster == "2")
fisher.test( table(SB_index,Indx_row_cluster == "2") )
fisher.test( table(!SB_index,Indx_row_cluster == "2") )
table(SB_index,Indx_row_cluster)
sum(rowRanges(SE_naive) %over% human_sb_gr)
rowRanges(SE_naive)
library(m6ALogisticModel)
SE_naive <- readRDS("SE_naive.rds")
SE_DESeq2 <- readRDS("SE_DESeq2.rds")
SE_CQN <- readRDS("SE_CQN.rds")
human_sb_gr <- rowRanges( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/SB_80k_human_SE.rds") )
sum(rowRanges(SE_naive) %over% human_sb_gr)
length( human_sb_gr)
rowRanges(SE_naive)
sum(rowRanges(SE_CQN) %over% human_sb_gr)
SE_CQN <- SE_CQN[rowRanges(SE_CQN) %over% human_sb_gr,]
Plot_column_joint(assay( SE_CQN ), METRIC = "pearson",HDER = "SB_only",GROUP_LABEL = SE_CQN$Tissue)
library(meripQC)
Plot_column_joint(assay( SE_CQN ), METRIC = "pearson",HDER = "SB_only",GROUP_LABEL = SE_CQN$Tissue)
Plot_column_joint(assay( SE_CQN ), METRIC = "pearson",HDER = "SB_only",GROUP_LABEL = SE_CQN$Tissue, VISUAL = "dendrogram")
mean(assays(SE_CQN)$geneExpression < 5)
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 5] = NA
Plot_column_joint(assay( SE_CQN ), METRIC = "pearson",HDER = "SB_only_exfilt",GROUP_LABEL = SE_CQN$Tissue, VISUAL = "dendrogram")
assays(SE_CQN)$geneExpression < 8.5
mean(assays(SE_CQN)$geneExpression < 5)
mean(assays(SE_CQN)$geneExpression < 8)
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8] = NA
Plot_column_joint(assay( SE_CQN ), METRIC = "pearson",HDER = "SB_only_exfilt",GROUP_LABEL = SE_CQN$Tissue, VISUAL = "dendrogram")
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "mds")
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "MDS")
SE_CQN <- readRDS("SE_CQN.rds")
human_sb_gr <- rowRanges( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/SB_80k_human_SE.rds") )
SE_CQN <- SE_CQN[rowRanges(SE_CQN) %over% human_sb_gr,]
samples_exclude <- c("human_gsc11_C",
"human_gsc11_ALKBH5_",
"human_MonoMac6_C",
"human_MonoMac6_METTL14_",
"human_NB4_C",
"human_NB4_METTL14_")
SE_CQN <- SE_CQN[,!colnames(SE_CQN)%in%samples_exclude]
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 6] = NA #Questionable.
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "MDS") #The change is not so big then.
mean(assays(SE_CQN)$geneExpression < 6)
!colnames(SE_CQN)%in%samples_exclude
colnames(SE_CQN)
colnames(SE_CQN )
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "MDS") #The change is not so big after all.
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "dg") #The change is not so big after all.
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "dendrogram")
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 7] = NA #Questionable what specific filter we need to get.
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "dendrogram") #The change is not so big after all.
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8] = NA #Questionable what specific filter we need to get.
Plot_column_joint(assay( SE_CQN ),
METRIC = "pearson",
HDER = "SB_only_exfilt",
GROUP_LABEL = SE_CQN$Tissue,
VISUAL = "dendrogram") #The change is not so big after all.
rowSums( is.na(assay(SE_CQN)) )
rowSums( is.na(assay(SE_CQN)) ) <= 10
table( rowSums( is.na(assay(SE_CQN)) ) <= 10)
indx_keep <- rowSums( is.na(assay(SE_CQN)) ) <= 10
SE_CQN <- SE_CQN[indx_keep,]
assays(SE_CQN)$m6Alog2FC = scale(assays(SE_CQN)$m6Alog2FC)
hist(rowMads(assay(SE_CQN),na.rm = T))
mean(rowMads(assay(SE_CQN),na.rm = T) > .5)
sum(rowMads(assay(SE_CQN),na.rm = T) > .5)
Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .5,],
"CQN_SB_only",K = 3)
sum(rowMads(assay(SE_CQN),na.rm = T) > .6)
Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .6,],
"CQN_SB_only",K = 3)
sum(rowMads(assay(SE_CQN),na.rm = T) > .5)
sum(rowMads(assay(SE_CQN),na.rm = T) > .55)
indx_keep <- rowSums( is.na(assay(SE_CQN)) ) <= 10
SE_CQN <- SE_CQN[indx_keep,]
assays(SE_CQN)$m6Alog2FC = scale(assays(SE_CQN)$m6Alog2FC)
set.seed(1)
Indx_kmeans <- Eval_row_joint(SE_CQN[rowMads(assay(SE_CQN),na.rm = T) > .55,],
"CQN_SB_only",K = 3)
devtools::install_github("skyhorsetomoon/Trumpet")
library(Trumpet)
f1 <- system.file("extdata", "IP1.bam", package="Trumpet")
f2 <- system.file("extdata", "IP2.bam", package="Trumpet")
f3 <- system.file("extdata", "IP3.bam", package="Trumpet")
f4 <- system.file("extdata", "IP4.bam", package="Trumpet")
f5 <- system.file("extdata", "Input1.bam", package="Trumpet")
f6 <- system.file("extdata", "Input2.bam", package="Trumpet")
f7 <- system.file("extdata", "Input3.bam", package="Trumpet")
f8 <- system.file("extdata", "treated_IP1.bam", package="Trumpet")
f9 <- system.file("extdata", "treated_Input1.bam", package="Trumpet")
ip_bam <- c(f1,f2,f3,f4)
input_bam <- c(f5,f6,f7)
contrast_ip_bam <- c(f8)
contrast_input_bam <- c(f9)
gtf <- system.file("extdata", "hg19toy.gtf", package="Trumpet")
trumpet_report <- Trumpet_report(IP_BAM = ip_bam, Input_BAM = input_bam, contrast_IP_BAM = contrast_ip_bam, contrast_Input_BAM = contrast_input_bam, condition1 = "untreated", condition2 = "treat, GENE_ANNO_GTF = gtf)
)
)))))
ajaof
""""
trumpet_report <- Trumpet_report(IP_BAM = ip_bam, Input_BAM = input_bam, contrast_IP_BAM = contrast_ip_bam, contrast_Input_BAM = contrast_input_bam, condition1 = "untreated", condition2 = "treat", GENE_ANNO_GTF = gtf)
library(Trumpet)
trumpet_report <- Trumpet_report(IP_BAM = ip_bam, Input_BAM = input_bam, contrast_IP_BAM = contrast_ip_bam, contrast_Input_BAM = contrast_input_bam, condition1 = "untreated", condition2 = "treat", GENE_ANNO_GTF = gtf)
knitr::opts_chunk$set(echo = TRUE)
library(meripQC)
library(m6ALogisticModel)
SE_CQN <- readRDS("CQN.rds")
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8] = NA # Mask methylation value have low gene expression.
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$IP_count + assays(SE_CQN)$input_count < 50] = NA # Mask methylation value have low IP + input count/information.
SE_CQN <- SE_CQN[rowSums( is.na(assay(SE_CQN)) ) <= 15,] #Filter rows have too many missing values.
SE_CQN <- Reduce_correlated_rows(SE_CQN,"spearman",".8",101,"maxInfo",assays(SE_CQN)$IP_count + assays(SE_CQN)$input_count) #Reduce the highly correlated rows.
library(m6ALogisticModel)
knitr::opts_chunk$set(echo = TRUE)
SE_CQN <- Reduce_correlated_rows(SE_CQN,"spearman",".8",101,"maxInfo",assays(SE_CQN)$IP_count + assays(SE_CQN)$input_count) #Reduce the highly correlated rows.
SE_CQN <- Reduce_correlated_rows(SE_CQN,"spearman",.8,101,"maxInfo",assays(SE_CQN)$IP_count + assays(SE_CQN)$input_count) #Reduce the highly correlated rows.
library(m6ALogisticModel)
knitr::opts_chunk$set(echo = TRUE)
SE_CQN <- Reduce_correlated_rows(SE_CQN,"spearman",.8,101,"maxInfo",assays(SE_CQN)$IP_count + assays(SE_CQN)$input_count) #Reduce the highly correlated rows.
SE_CQN <- Reduce_correlated_rows(SE_CQN,"spearman",.8,101,"maxSum") #Reduce the highly correlated rows.
rowData(
SE_CQN)
grepl(";",rowData(SE_CQN))
grepl(";",rowData(SE_CQN)$ENTREZ_ID)
sum(grepl(";",rowData(SE_CQN)$ENTREZ_ID))
rowData(SE_CQN)$ENTREZ_ID[grepl(";",rowData(SE_CQN)$ENTREZ_ID)]
SE_CQN <- SE_CQN[grepl(";",rowData(SE_CQN)$ENTREZ_ID),] #Remove the rows mapped to multiple gene
library(meripQC)
library(m6ALogisticModel)
SE_CQN <- readRDS("CQN.rds")
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$geneExpression < 8] = NA # Mask methylation value have low gene expression.
assays(SE_CQN)$m6Alog2FC[assays(SE_CQN)$IP_count + assays(SE_CQN)$input_count < 50] = NA # Mask methylation value have low IP + input count/information.
SE_CQN <- SE_CQN[rowSums( is.na(assay(SE_CQN)) ) <= 15,] #Filter rows have too many missing values.
SE_CQN <- Reduce_correlated_rows(SE_CQN,"spearman",.8,101,"maxSum") #Reduce the highly correlated rows.
SE_CQN <- SE_CQN[!grepl(";",rowData(SE_CQN)$ENTREZ_ID),] #Remove the rows mapped to multiple gene
assays(SE_CQN)$m6Alog2FC = scale(
assays(SE_CQN)$m6Alog2FC,
scale = apply(assays(SE_CQN)$m6Alog2FC, 2, mad, na.rm = TRUE)
) #Standardize the collumns
rowData( SE_CQN )$ENTREZ_ID
#1. get the list of covariate matrix
covariate_matrix_lst <- split( assays(SE_CQN)$geneExpression , rowData( SE_CQN )$ENTREZ_ID )
covariate_matrix_lst
split(matrix(1:9,3,3),c(1,2,2))
split(matrix(1:9,3,3),c(1,2,2))
matrix(1:9,3,3)
split(data.frame(matrix(1:9,3,3)),c(1,2,2))
#1. get the list of covariate matrix
covariate_matrix_lst <- split( data.frame(assays(SE_CQN)$geneExpression) , rowData( SE_CQN )$ENTREZ_ID )
covariate_matrix_lst
#2. get the list of response variables.
assays(SE_CQN)$geneExpression[!duplicated(rowData( SE_CQN )$ENTREZ_ID),]
#2. get the list of response variables.
assays(SE_CQN)$geneExpression[!duplicated(rowData( SE_CQN )$ENTREZ_ID),]
response_df <- assays(SE_CQN)$geneExpression[!duplicated(rowData( SE_CQN )$ENTREZ_ID),]
rownames(response_df) <- rowData( SE_CQN )$ENTREZ_ID[!duplicated(rowData( SE_CQN )$ENTREZ_ID)]
response_df
covariate_df_lst
covariate_df_lst
covariate_df_lst
covariate_df_lst <- split( data.frame(assays(SE_CQN)$geneExpression) , rowData( SE_CQN )$ENTREZ_ID )
covariate_df_lst
Model_matrix  <- covariate_df_lst[[i]]
i = names(covariate_df_lst)[3]
Model_matrix  <- covariate_df_lst[[i]]
Model_matrix$Y  <- response_df[i,]
response_df[i,]
Model_matrix
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix
Model_matrix$Y  <- response_df[i,]
Model_matrix
lm(Y~.,Model_matrix)
Linear_Model <- lm(Y~.,Model_matrix)
summary(Linear_Model)
Model_matrix
covariate_df_lst <- split( data.frame(assays(SE_CQN)$m6ALog2FC) , rowData( SE_CQN )$ENTREZ_ID )
#2. get the list of response variables (Gene expression for each gene).
response_df <- assays(SE_CQN)$geneExpression[!duplicated(rowData( SE_CQN )$ENTREZ_ID),]
rownames(response_df) <- rowData( SE_CQN )$ENTREZ_ID[!duplicated(rowData( SE_CQN )$ENTREZ_ID)]
#3. construct model matrix, calculate linear model statistics for each gene
for(i in names(covariate_df_lst)[1:10]){
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix$Y  <- response_df[i,]
Linear_Model <- lm(Y~.,Model_matrix)
}
covariate_df_lst <- split( data.frame(assays(SE_CQN)$m6ALog2FC) , rowData( SE_CQN )$ENTREZ_ID )
#2. get the list of response variables (Gene expression for each gene).
response_df <- assays(SE_CQN)$geneExpression[!duplicated(rowData( SE_CQN )$ENTREZ_ID),]
rownames(response_df) <- rowData( SE_CQN )$ENTREZ_ID[!duplicated(rowData( SE_CQN )$ENTREZ_ID)]
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix$Y  <- response_df[i,]
response_df
i
response_df[i,]
Model_matrix
assays(SE_CQN)$m6ALog2FC
SE_CQN
covariate_df_lst <- split( data.frame(assays(SE_CQN)$m6Alog2FC) , rowData( SE_CQN )$ENTREZ_ID )
#2. get the list of response variables (Gene expression for each gene).
response_df <- assays(SE_CQN)$geneExpression[!duplicated(rowData( SE_CQN )$ENTREZ_ID),]
rownames(response_df) <- rowData( SE_CQN )$ENTREZ_ID[!duplicated(rowData( SE_CQN )$ENTREZ_ID)]
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix$Y  <- response_df[i,]
Linear_Model <- lm(Y~.,Model_matrix)
summary(Linear_Model)
summary(Linear_Model)
summary(Linear_Model)$p
x <- summary(Linear_Model)
str(x)
Linear_Model$model
Linear_Model$coefficients
x$coefficients
x$coefficients
result_list <- vector("list",length = length(covariate_df_lst))
names(result_list) <- names(covariate_df_lst)
result_list
for(i in names(covariate_df_lst)[1:10]){
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix$Y  <- response_df[i,]
result_list[[i]] <- summary( lm(Y~.,scale(Model_matrix)) )$coefficients[-1,]
}
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix$Y  <- response_df[i,]
result_list[[i]] <- summary( lm(Y~., data.frame(scale(Model_matrix))) )$coefficients[-1,]
}
for(i in names(covariate_df_lst)[1:10]){
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix$Y  <- response_df[i,]
result_list[[i]] <- summary( lm(Y~., data.frame(scale(Model_matrix))) )$coefficients[-1,]
}
result_list
head(result_list)
result_list <- vector("list",length = length(covariate_df_lst))
names(result_list) <- names(covariate_df_lst)
for(i in names(covariate_df_lst)[1:10]){
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix$Y  <- response_df[i,]
result_list[[i]] <- summary( lm(Y~., data.frame(scale(Model_matrix))) )$coefficients
}
result_list <- vector("list",length = length(covariate_df_lst))
names(result_list) <- names(covariate_df_lst)
for(i in names(covariate_df_lst)){
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix$Y  <- response_df[i,]
result_list[[i]] <- summary( lm(Y~., data.frame(scale(Model_matrix))) )$coefficients
}
result_list
i = "23013"
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix$Y  <- response_df[i,]
Model_matrix
na.omit(Model_matrix)
result_list <- vector("list",length = length(covariate_df_lst))
names(result_list) <- names(covariate_df_lst)
for(i in names(covariate_df_lst)){
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix$Y  <- response_df[i,]
result_list[[i]] <- summary( lm(Y~., data.frame(scale( na.omit(Model_matrix)))) )$coefficients
}
result_list
result_df <- Reduce(rbind,result_list)
result_df
na.omit(result_df)
? na.omit
result_df <- Reduce(rbind,result_list)
result_df <- rownames(result_df) != (Intercept)
result_df <- rownames(result_df) != "(Intercept)"
result_df <- data.frame( na.omit(result_df) )
result_df
result_df <- Reduce(rbind,result_list)
result_df <- rownames(result_df) != "(Intercept)"
x <- na.omit(result_df)
x
result_df <- Reduce(rbind,result_list)
result_df <- result_df[rownames(result_df) != "(Intercept)",]
result_df
class(na.omit(result_df) )
result_df <- na.omit(result_df)
result_df
result_df[1]
result_df[[1]]
class(result_df)
result_df <- data.frame( na.omit(result_df) )
result_df <- Reduce(rbind,result_list)
result_df <- result_df[rownames(result_df) != "(Intercept)",]
result_df <- data.frame( na.omit(result_df) )
result_df
result_df$t.value
hist(result_df$t.value)
max(result_df$t.value)
min(result_df$t.value)
hist(result_df$Pr...t..)
result_df$Pr...t..
hist(result_df$Pr...t..)
p.adjust( result_df$Pr...t.. , method = "fdr")
p.adjust( result_df$Pr...t.. , method = "fdr") < .05
sum(p.adjust( result_df$Pr...t.. , method = "fdr") < .05)
sum(p.adjust( result_df$Pr...t.. , method = "fdr") < 1)
sum(p.adjust( result_df$Pr...t.. , method = "fdr") < 0.1)
sum(p.adjust( result_df$Pr...t.. , method = "fdr") < 0.2)
indx_keep <- p.adjust( result_df$Pr...t.. , method = "fdr") < 0.2
indx_keep
hist(result_df$Pr...t..)[indx_keep]
hist(result_df$Pr...t..[indx_keep])
?break()
?break
result_list <- vector("list",length = length(covariate_df_lst))
names(result_list) <- names(covariate_df_lst)
for(i in names(covariate_df_lst)){
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix$Y  <- response_df[i,]
Model_matrix <- na.omit(Model_matrix)
if(nrow(Model_matrix) <= 32) next
result_list[[i]] <- summary( lm(Y~., data.frame(scale(Model_matrix )) ))$coefficients
}
result_df <- Reduce(rbind,result_list)
result_df
result_list <- vector("list",length = length(covariate_df_lst))
names(result_list) <- names(covariate_df_lst)
for(i in names(covariate_df_lst)){
Model_matrix  <- data.frame( t(covariate_df_lst[[i]]) )
Model_matrix$Y  <- response_df[i,]
Model_matrix <- na.omit(Model_matrix)
if(nrow(Model_matrix) <= 10) next
result_list[[i]] <- summary( lm(Y~., data.frame(scale(Model_matrix )) ))$coefficients
}
result_df <- Reduce(rbind,result_list)
result_df <- result_df[rownames(result_df) != "(Intercept)",] #Remove intercepts
result_df <- data.frame( na.omit(result_df) ) #Remove missing values.
hist(result_df$t.value) #Transformed partial correlation.
hist(result_df$Pr...t..) #There are some fraction of healthy significant sites.
indx_keep <- p.adjust( result_df$Pr...t.. , method = "fdr") < 0.2
hist(result_df$Pr...t..[indx_keep])
sum(indx_keep)
hist(result_df$Pr...t..[indx_keep])
hist(result_df$t.value[indx_keep])
rownames(result_df)[indx_keep]
as.numeric(gsub("X","",rownames(result_df)[indx_keep]))
mcols(SE_CQN)[indx_se,]
mcols(SE_CQN)[indx_se,]
indx_se <- as.numeric(gsub("X","",rownames(result_df)[indx_keep]))
glmodel <- mcols(SE_CQN)[indx_se,]
result_df$Estimate
result_df$Estimate
glmodel$Y <- result_df$Estimate[indx_keep] > 0
result_df$Estimate[indx_keep]
result_df$Estimate[indx_keep] > 0
#only ~ 400 sites left
#build a simple logistic model.
glm(Y~.,family = binomial(link = "logit"),data = glmodel)
glmodel
mcols(SE_CQN)
glmodel <- mcols( rowRanges(SE_CQN) )[indx_se,]
glmodel
rowRanges(SE_CQN)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
SE_CQN <- readRDS("CQN.rds")
```{r}
SE_CQN <- readRDS("CQN.rds")
SE_DESEQ2 <- readRDS("DESEQ2.rds")
SE_expression <- readRDS("expression_cqn.rds")
fol <- findOverlaps( rowRanges( SE_CQN ), rowRanges( SE_expression ) )
Genes_ids_indx <- tapply(names(rowRanges( SE_expression ) )[subjectHits(fol)],queryHits(fol), function(x) paste0(x,collapse = ";") )
Genes_row <- rep(NA,nrow(SE_CQN))
Genes_row[as.numeric( names(Genes_ids_indx) )] <- Genes_ids_indx
saveRDS( Genes_row, "ENTREZ_ID.rds")
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(fitCons.UCSC.hg19)
