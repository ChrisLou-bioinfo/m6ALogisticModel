dev.off()
pdf(paste0("Mixture_model_",SRR,".pdf"),width = 5,height = 3.5)
support <- getExpInterval( model, bayes = T, plot = T)
dev.off()
pdf(paste0("Mixture_model_",SRR,".pdf"),width = 6,height = 3.5)
support <- getExpInterval( model, bayes = T, plot = T)
dev.off()
pdf(paste0("Mixture_model_",SRR,".pdf"),width = 7,height = 4.5)
support <- getExpInterval( model, bayes = T, plot = T)
dev.off()
pdf(paste0("Mixture_model_",SRR,".pdf"),width = 7,height = 4)
support <- getExpInterval( model, bayes = T, plot = T)
dev.off()
Sub = "TC"
wavClusteR::plotSubstitutions()
plotSubstitutions()
plotSubstitutions()
?plotSubstitutions()
pdf(paste0("RSF_",SRR,".pdf"),width = 7,height = 4)
plotSubstitutions(countTable, Sub,model)
dev.off()
pdf(paste0("RSF_",SRR,".pdf"),width = 7,height = 5)
plotSubstitutions(countTable, Sub,model)
dev.off()
ParCLIP_qc <- function(SRR, Sub = "TC") {
require(wavClusteR)
Bam <- readSortedBam(filename = paste0("./Sortedbams/",SRR,"_clps_sorted.bam"))
countTable <- getAllSub( Bam, minCov = 10 )
model <- fitMixtureModel( countTable, substitution = Sub )
responsibilities <- (model$l2 * model$p2)/(model$l1 * model$p1 + model$l2 * model$p2)
if(all(responsibilities < .5)) {
warning("sample ",SRR,
" has 0 instance calssified into the PAR-CLIP class using Bayes classifier. (The mixture model will not be visualized here.)
The data might have some quality problems. The following cut off RSF boundary will be set at: (0.5,1)", call. = F)
highConfSub <- getHighConfSub( countTable,
supportStart = 0.5,
supportEnd = 1,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
} else {
pdf(paste0("RSF_",SRR,".pdf"),width = 7,height = 5)
plotSubstitutions(countTable, Sub,model)
dev.off()
pdf(paste0("Mixture_model_",SRR,".pdf"),width = 7,height = 4)
support <- getExpInterval( model, bayes = T, plot = T)
dev.off()
highConfSub <- getHighConfSub( countTable,
support = support,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
}
saveRDS(clusters, paste0(SRR,"_cluster_gr.rds"))
}
ParCLIP_qc <- function(SRR, Sub = "TC") {
require(wavClusteR)
Bam <- readSortedBam(filename = paste0("./Sortedbams/",SRR,"_clps_sorted.bam"))
countTable <- getAllSub( Bam, minCov = 10 )
model <- fitMixtureModel( countTable, substitution = Sub )
responsibilities <- (model$l2 * model$p2)/(model$l1 * model$p1 + model$l2 * model$p2)
if(all(responsibilities < .5)) {
warning("sample ",SRR,
" has 0 instance calssified into the PAR-CLIP class using Bayes classifier. (The mixture model will not be visualized here.)
The data might have some quality problems. The following cut off RSF boundary will be set at: (0.5,1)", call. = F)
highConfSub <- getHighConfSub( countTable,
supportStart = 0.5,
supportEnd = 1,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
} else {
pdf(paste0("RSF_",SRR,".pdf"),width = 7,height = 5)
plotSubstitutions(countTable, Sub,model)
dev.off()
pdf(paste0("Mixture_model_",SRR,".pdf"),width = 7,height = 4)
support <- getExpInterval( model, bayes = T, plot = T)
dev.off()
highConfSub <- getHighConfSub( countTable,
support = support,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
}
saveRDS(clusters, paste0(SRR,"_cluster_gr.rds"))
}
ParCLIP_qc("SRR5099264")
SRR = "SRR5099268"
BAM_name = paste0("./Sortedbams/",SRR,"_clps_sorted.bam")
ParCLIP_qc <- function(BAM_name, Sub = "TC") {
require(wavClusteR)
Bam <- readSortedBam(filename = BAM_name)
countTable <- getAllSub( Bam, minCov = 10 )
model <- fitMixtureModel( countTable, substitution = Sub )
responsibilities <- (model$l2 * model$p2)/(model$l1 * model$p1 + model$l2 * model$p2)
if(all(responsibilities < .5)) {
warning("sample ",BAM_name,
" has 0 instance calssified into the PAR-CLIP class using Bayes classifier. (The mixture model will not be visualized here.)
The data might have some quality problems. The following RSF cut off boundary will be set at: (0.5,1)", call. = F)
highConfSub <- getHighConfSub( countTable,
supportStart = 0.5,
supportEnd = 1,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
} else {
pdf(paste0("RSF_",BAM_name,".pdf"),width = 7,height = 5)
plotSubstitutions(countTable, Sub,model)
dev.off()
pdf(paste0("Mixture_model_",BAM_name,".pdf"),width = 7,height = 4)
support <- getExpInterval( model, bayes = T, plot = T)
dev.off()
highConfSub <- getHighConfSub( countTable,
support = support,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
}
saveRDS(clusters, paste0(BAM_name,"_cluster_gr.rds"))
}
ParCLIP_qc(BAM_name)
list.files("./Sortedbams")
SRR = "SRR5099269"
BAM_name = paste0("./Sortedbams/",SRR,"_clps_sorted.bam")
SRR = "SRR3167289"
BAM_name = paste0("./Sortedbams/",SRR,"_clps_sorted.bam")
ParCLIP_qc(BAM_name)
ParCLIP_qc <- function(BAM_dsir, Sub = "TC", Save_title = "Test") {
require(wavClusteR)
Bam <- readSortedBam(filename = BAM_name)
countTable <- getAllSub( Bam, minCov = 10 )
model <- fitMixtureModel( countTable, substitution = Sub )
responsibilities <- (model$l2 * model$p2)/(model$l1 * model$p1 + model$l2 * model$p2)
if(all(responsibilities < .5)) {
warning("sample ",BAM_name,
" has 0 instance calssified into the PAR-CLIP class using Bayes classifier. (The mixture model will not be visualized here.)
The data might have some quality problems. The following RSF cut off boundary will be set at: (0.5,1)", call. = F)
highConfSub <- getHighConfSub( countTable,
supportStart = 0.5,
supportEnd = 1,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
} else {
pdf(paste0("RSF_",BAM_name,".pdf"),width = 7,height = 5)
plotSubstitutions(countTable, Sub,model)
dev.off()
pdf(paste0("Mixture_model_",BAM_name,".pdf"),width = 7,height = 4)
support <- getExpInterval( model, bayes = T, plot = T)
dev.off()
highConfSub <- getHighConfSub( countTable,
support = support,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
}
saveRDS(clusters, paste0(BAM_name,"_cluster_gr.rds"))
}
ParCLIP_qc <- function(BAM_dsir, Save_title = "Test", Sub = "TC") {
require(wavClusteR)
Bam <- readSortedBam(filename = BAM_name)
countTable <- getAllSub( Bam, minCov = 10 )
model <- fitMixtureModel( countTable, substitution = Sub )
responsibilities <- (model$l2 * model$p2)/(model$l1 * model$p1 + model$l2 * model$p2)
if(all(responsibilities < .5)) {
warning("sample ",BAM_name,
" has 0 instance calssified into the PAR-CLIP class using Bayes classifier. (The mixture model will not be visualized here.)
The data might have some quality problems. The following RSF cut off boundary will be set at: (0.5,1)", call. = F)
highConfSub <- getHighConfSub( countTable,
supportStart = 0.5,
supportEnd = 1,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
} else {
pdf(paste0("RSF_",BAM_name,".pdf"),width = 7,height = 5)
plotSubstitutions(countTable, Sub,model)
dev.off()
pdf(paste0("Mixture_model_",BAM_name,".pdf"),width = 7,height = 4)
support <- getExpInterval( model, bayes = T, plot = T)
dev.off()
highConfSub <- getHighConfSub( countTable,
support = support,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
}
saveRDS(clusters, paste0(BAM_name,"_cluster_gr.rds"))
}
list.files("./Sortedbams")
SRR = "SRR3167289"
BAM_name = paste0("./Sortedbams/",SRR,"_clps_sorted.bam")
ParCLIP_qc(BAM_name,SRR)
ParCLIP_qc <- function(BAM_dsir, Save_title = "Test", Sub = "TC") {
require(wavClusteR)
Bam <- readSortedBam(filename = BAM_name)
countTable <- getAllSub( Bam, minCov = 10 )
model <- fitMixtureModel( countTable, substitution = Sub )
responsibilities <- (model$l2 * model$p2)/(model$l1 * model$p1 + model$l2 * model$p2)
if(all(responsibilities < .5)) {
warning("sample ",BAM_name,
" has 0 instance calssified into the PAR-CLIP class using Bayes classifier. (The mixture model will not be visualized here.)
The data might have some quality problems. The following RSF cut off boundary will be set at: (0.5,1)", call. = F)
highConfSub <- getHighConfSub( countTable,
supportStart = 0.5,
supportEnd = 1,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
} else {
pdf(paste0("RSF_",Save_title,".pdf"),width = 7,height = 5)
plotSubstitutions(countTable, Sub,model)
dev.off()
pdf(paste0("Mixture_model_",Save_title,".pdf"),width = 7,height = 4)
support <- getExpInterval( model, bayes = T, plot = T)
dev.off()
highConfSub <- getHighConfSub( countTable,
support = support,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
}
saveRDS(clusters, paste0(Save_title,"_cluster_gr.rds"))
}
ParCLIP_qc(BAM_name,SRR)
list.files("./Sortedbams")
ParCLIP_qc <- function(BAM_dsir, Save_title = "Test", Sub = "TC") {
require(wavClusteR)
Bam <- readSortedBam(filename = BAM_name)
countTable <- getAllSub( Bam, minCov = 10 )
model <- fitMixtureModel( countTable, substitution = Sub )
responsibilities <- (model$l2 * model$p2)/(model$l1 * model$p1 + model$l2 * model$p2)
if(all(responsibilities < .5)) {
warning("sample ",BAM_name,
" has 0 instance calssified into the PAR-CLIP class using Bayes classifier. (The mixture model will not be visualized here.)
The data might have some quality problems. The following RSF cut off boundary will be set at: (0.5,1)", call. = F)
highConfSub <- getHighConfSub( countTable,
supportStart = 0.5,
supportEnd = 1,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
} else {
pdf(paste0("RSF_",Save_title,".pdf"),width = 7,height = 5)
plotSubstitutions(countTable, Sub,model)
dev.off()
pdf(paste0("Mixture_model_",Save_title,".pdf"),width = 7,height = 4)
support <- getExpInterval( model, bayes = T, plot = T)
dev.off()
highConfSub <- getHighConfSub( countTable,
support = support,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
}
saveRDS(clusters, paste0(Save_title,"_cluster_gr.rds"))
}
list.files("./Sortedbams")
SRR = "SRR1373360"
BAM_name = paste0("./Sortedbams/",SRR,"_clps_sorted.bam")
ParCLIP_qc(BAM_name,SRR)
list.files("./Sortedbams")
SRR = "SRR5462303"
BAM_name = paste0("./Sortedbams/",SRR,"_clps_sorted.bam")
ParCLIP_qc(BAM_name,SRR)
list.files("./Sortedbams")
SRR = "SRR5462303"
BAM_name = paste0("./Sortedbams/",SRR,"_clps_sorted.bam")
ParCLIP_qc(BAM_name,SRR)
list.files("./Sortedbams")
SRR = "SRR3175603"
BAM_name = paste0("./Sortedbams/",SRR,"_clps_sorted.bam")
ParCLIP_qc(BAM_name,SRR)
ParCLIP_qc <- function(BAM_dsir, Save_title = "Test", Sub = "TC") {
require(wavClusteR)
Bam <- readSortedBam(filename = BAM_name)
countTable <- getAllSub( Bam, minCov = 10 )
model <- fitMixtureModel( countTable, substitution = Sub )
responsibilities <- (model$l2 * model$p2)/(model$l1 * model$p1 + model$l2 * model$p2)
if(all(responsibilities < .5)) {
warning("sample ",BAM_name,
" has 0 instance calssified into the PAR-CLIP class using Bayes classifier. (The mixture model will not be visualized here.)
The data might have some quality problems. The following RSF cut off boundary will be set at: (0.5,1)\n", call. = F)
highConfSub <- getHighConfSub( countTable,
supportStart = 0.5,
supportEnd = 1,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
saveRDS(clusters, paste0(Save_title,"_failed_gr.rds"))
} else {
pdf(paste0("RSF_",Save_title,".pdf"),width = 7,height = 5)
plotSubstitutions(countTable, Sub,model)
dev.off()
pdf(paste0("Mixture_model_",Save_title,".pdf"),width = 7,height = 4)
support <- getExpInterval( model, bayes = T, plot = T)
dev.off()
highConfSub <- getHighConfSub( countTable,
support = support,
substitution = Sub  )
coverage <- coverage( Bam )
clusters <- getClusters( highConfSub = highConfSub,
coverage = coverage,
sortedBam = Bam,
method = "mrn",
threshold = 1,
cores = 1 )
saveRDS(clusters, paste0(Save_title,"_cluster_gr.rds"))
}
}
list.files("./Sortedbams")
knitr::opts_chunk$set(echo = TRUE)
g_dict_BP_trim <- read_rds("gene_dict_trim_BP.rds")
library(readr)
g_dict_BP_trim <- read_rds("gene_dict_trim_BP.rds")
p_vals = sort(c(10^(-2), 10^(-2.5), 10^(-3), 10^(-3.5), 10^(-4), 10^(-4.5), 10^(-5), 10^(-5.5), 10^(-6), 10^(-6.5)))
p_vals
cutpval <- function(lg,p){
lapply(lg,function(n){
names(n[n < p])
})
}
nt_vec <- c(2,4,6,8,10,12,14,16,18,20)
nt_vec
fl <- "http://geneontology.org/ontology/subsets/goslim_generic.obo"
slim <- getOBOCollection(fl)
slim <- getOBOCollection(fl)
library(GSEAbase)
source("https://bioconductor.org/biocLite.R")
library(readr)
g_dict_BP_trim <- read_rds("gene_dict_trim_BP.rds")
g_dict_ran_BP_trim <- read_rds("gene_dict_ran_trim_BP.rds")
source("https://bioconductor.org/biocLite.R")
biocLite("GSEABase")
library(readr)
g_dict_BP_trim <- read_rds("gene_dict_trim_BP.rds")
g_dict_ran_BP_trim <- read_rds("gene_dict_ran_trim_BP.rds")
p_vals = sort(c(10^(-2), 10^(-2.5), 10^(-3), 10^(-3.5), 10^(-4), 10^(-4.5), 10^(-5), 10^(-5.5), 10^(-6), 10^(-6.5)))
cutpval <- function(lg,p){
lapply(lg,function(n){
names(n[n < p])
})
}
nt_vec <- c(2,4,6,8,10,12,14,16,18,20)
fl <- "http://geneontology.org/ontology/subsets/goslim_generic.obo"
library(GSEABase)
slim <- getOBOCollection(fl)
slim
enslim <- function(go){
apply(go, c(1,2), function(char){
char <- unname(unlist(char, recursive = FALSE))
if (length(char)>0){
mygo <- GOCollection(char)
temp <- goSlim(mygo, slim, 'BP')
if (!all(unique(temp$Count) == 0)){
#browser()
temp <- temp[temp$Count>0,]
temp <- temp[with(temp, order(-Count, -Percent)),]
rownames(temp)
}
else {character()}
}
else {character()}
})
}
sel.slim <- function(m, nt, selGO){
l <- split(m, col(m))
names(l) <- colnames(m)
l <- lapply(l, function(ll){
names(ll) <- rownames(selGO)
ll})
lcut <- lapply(l, function(sl){
lapply(sl, function(s){
ans <- s[1:nt]
ans[!is.na(ans)]
})
})
lcut
}
make_pa2 <- function(pval = p_vals, nts = nt_vec, eval){
sel.GO <- mapply(cutpval, p = pval, MoreArgs = list(lg = eval$GO_predict))
colnames(sel.GO) <- as.character(pval)
rownames(sel.GO) <- eval$ENID
pa2 <- mapply(sel.slim, nt = nts,
MoreArgs = list(m = enslim(sel.GO),
selGO = sel.GO))
colnames(pa2) <- as.character(nts)
pa2
}
g_dict_BP_trim
#Let's do some previous statistics
g_dict_BP_trim$GO_predict
#Let's do some previous statistics
sapply( g_dict_BP_trim$GO_predict, function(x) min(names(x)) )
#Let's do some previous statistics / check
sapply( g_dict_BP_trim$GO_predict, function(x) sum(duplicated(names(x))) )
sapply( g_dict_ran_BP_trim$GO_predict, function(x) sum(duplicated(names(x))) )
sapply( g_dict_BP_trim$GO_predict, function(x) min(x))
sapply( g_dict_BP_trim$GO_predict, function(x) max(x))
sapply( g_dict_ran_BP_trim$GO_predict, function(x) max(x))
sapply( g_dict_BP_trim$GO_predict, function(x) median(-1*log2(x)))
sapply( g_dict_ran_BP_trim$GO_predict, function(x) median(-1*log2(x)))
median_p_real <- sapply( g_dict_BP_trim$GO_predict, function(x) median(-1*log2(x)))
median_p_random <- sapply( g_dict_ran_BP_trim$GO_predict, function(x) median(-1*log2(x)))
t.test(median_p_real,median_p_random)
median_p_real <- sapply( g_dict_BP_trim$GO_predict, function(x) max(-1*log2(x)))
median_p_random <- sapply( g_dict_ran_BP_trim$GO_predict, function(x) max(-1*log2(x)))
t.test(median_p_real,median_p_random)
g_dict_BP_trim$GO_predict
max_p_random <- sapply( g_dict_ran_BP_trim$GO_predict, function(x) max(-1*log2(x)))
t.test(median_p_real,median_p_random)
max_p_real
max_p_real <- sapply( g_dict_BP_trim$GO_predict, function(x) max(-1*log2(x)))
max_p_random <- sapply( g_dict_ran_BP_trim$GO_predict, function(x) max(-1*log2(x)))
pre_num_real <- sapply( g_dict_BP_trim$GO_predict, function(x) length(x))
pre_num_random <- sapply( g_dict_ran_BP_trim$GO_predict, function(x) length(x))
t.test(pre_num_real,pre_num_random)
g_dict_BP_trim
slim_num_real <- sapply( g_dict_BP_trim$GO_slim, function(x) length(x))
slim_num_random <- sapply( g_dict_ran_BP_trim$GO_slim, function(x) length(x))
t.test(slim_num_real,slim_num_random )
slim_num_real <- sapply( g_dict_BP_trim$GO_slim, function(x) length(x))
slim_num_random <- sapply( g_dict_ran_BP_trim$GO_slim, function(x) length(x))
slim_num_real
slim_num_random
g_dict_BP_trim
GO_predict
fl <- "http://geneontology.org/ontology/subsets/goslim_generic.obo"
library(GSEABase)
slim <- getOBOCollection(fl)
slim
goSlim
?goSlim
source("https://bioconductor.org/biocLite.R")
biocLite("clusterProfiler")
?clusterProfiler::enrichGO()
browseVignettes("clusterProfiler")
