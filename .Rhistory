knitr::opts_chunk$set(echo = TRUE)
rowgr <- readRDS( "/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/SB_80k_human_SE.rds" )
example_ythdf1 <- readRDS("./Confidence/YTHDF1_confidence_gr.rds")
Y <- countOverlaps(rowgr,example_ythdf1)
Y
?go_multinomial
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
rowgr_features_added <- predictors_annot(se = SummarizedExperiment(rowRanges = rowgr),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
HK_genes_list = HK_hg19_eids)
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Additional_features_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
rowgr <- predictors_annot_old(se = SummarizedExperiment(rowRanges = rowgr),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
HK_genes_list = HK_hg19_eids)
SummarizedExperiment(rowRanges = rowgr)
SummarizedExperiment(rowRanges = rowgr)
rowgr
rowgr <- readRDS( "/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/SB_80k_human_SE.rds" )
rowgr
mcols(rowgr)
assay(rowgr)
rowgr <- predictors_annot_old(se = SummarizedExperiment(rowRanges = rowRanges(rowgr)),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
HK_genes_list = HK_hg19_eids)
infer_loop <- function(struc_sterm, length_cut_off = 30){
all_range <- reduce(unlist(range(struc_sterm)))
struc_sterm_r <- reduce(unlist( struc_sterm ))
dsj_strucs <- disjoin(c(all_range, struc_sterm_r))
fol <- findOverlaps(dsj_strucs, struc_sterm_r, type = "equal")
strucs_loop <- dsj_strucs[-1*queryHits(fol)]
strucs_loop <- strucs_loop[width(strucs_loop) <= 30]
return(strucs_loop)
}
rowgr <- predictors_annot_old(se = SummarizedExperiment(rowRanges = rowRanges(rowgr)),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
HK_genes_list = HK_hg19_eids)
rowgr
row_ranges = rowgr
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
go_regular(Y,
row_ranges = rowRanges(SE_CQN),
HDER = "glm",
family = "poisson",
CUT_OFF = 5
)
HDER = "glm"
family = "poisson"
CUT_OFF = 5
row_ranges = rowRanges(SE_CQN)
Fitted_model <-  glm(Y~.,family = gaussian(link = "identity"),data = Model)
stopifnot(length(Y) == nrow(PREDICTORS))
family <- match.arg(family)
indx_no_info <- sapply( PREDICTORS, function(x) { if (is.logical(x)){
return( (sum(x) <= CUT_OFF | sum(!x) <= CUT_OFF) )
} else {
return(F)
}
} )
if(any(indx_no_info)){
warning(paste0("dropped dummy variable feature(s): ", paste0( gsub("TRUE","",names(indx_no_info[which(indx_no_info)])) , collapse=", "), "; the threshold is defined by the CUT_OFF argument (sum of TRUE / FALSE entries <= ",CUT_OFF,")."),call. = F, immediate. = T)
}
Model = PREDICTORS[,!indx_no_info]
Model$Y = Y
PREDICTORS = mcols(rowgr)
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
Additional_features_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
SE_CQN <- readRDS("SE_CQN_filtered.rds")
SE_features_added <- predictors_annot(se = SE_CQN,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
HK_genes_list = HK_hg19_eids)
PREDICTORS = mcols(rowgr)
stopifnot(length(Y) == nrow(PREDICTORS))
family <- match.arg(family)
indx_no_info <- sapply( PREDICTORS, function(x) { if (is.logical(x)){
return( (sum(x) <= CUT_OFF | sum(!x) <= CUT_OFF) )
} else {
return(F)
}
} )
if(any(indx_no_info)){
warning(paste0("dropped dummy variable feature(s): ", paste0( gsub("TRUE","",names(indx_no_info[which(indx_no_info)])) , collapse=", "), "; the threshold is defined by the CUT_OFF argument (sum of TRUE / FALSE entries <= ",CUT_OFF,")."),call. = F, immediate. = T)
}
Model = PREDICTORS[,!indx_no_info]
Model$Y = Y
if( family == "gaussian") {
Fitted_model <-  glm(Y~.,family = gaussian(link = "identity"),data = Model)
}
Fitted_model
Fitted_model <-  glm(Y~.,family = gaussian(link = "identity"),data = Model)
Fitted_model <- glm(Y~., family = binomial(link = "logit"),data = Model)
Fitted_model <- glm(Y~., family = poisson(link = "log"),data = Model)
summary(Fitted_model )
summary_glm <- summary(Fitted_model)
Critical_value <- qnorm((.05/2)/(ncol(Model_df)-1),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
Critical_value = 0.05
summary_glm <- summary(Fitted_model)
Critical_value <- qnorm((.05/2)/(ncol(Model_df)-1),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
ncol(Fitted_model)
ncol(Model)
summary_glm <- summary(Fitted_model)
Critical_value <- qnorm((.05/2)/(ncol(Model)),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
library(ggplot2)
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) + geom_bar(stat = "identity", width = .4, fill = "red", colour = "red", size = 0.1) + geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) + coord_flip() + facet_grid(~variable,scales = "free") + theme_classic() + labs(title = "Poisson model on genomic features",subtitle = "miCLIP Hits", x = "predictors")
p1
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) + geom_bar(stat = "identity", width = .4, fill = "blue2", colour = "red", size = 0.1) + geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) + coord_flip() + facet_grid(~variable,scales = "free") + theme_classic() + labs(title = "Poisson model on genomic features",subtitle = "miCLIP Hits", x = "predictors")
p1
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) +
geom_bar(stat = "identity", width = .4, fill = "blue2", colour = "red", size = 0.1) +
geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) +
coord_flip() + facet_grid(~variable,scales = "free") +
theme_classic() +
labs(title = paste0(family, " linear model on genomic features" ),
subtitle = HDER,
x = "predictors")
suppressWarnings( ggsave("miCLIPHits_logistic_model.pdf", p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
glm_regular <- function(Y,
PREDICTORS,
HDER = "glm",
family = c("gaussian","binomial","poisson"),
CUT_OFF = 5,
Critical_value = 0.05) {
stopifnot(length(Y) == nrow(PREDICTORS))
family <- match.arg(family)
indx_no_info <- sapply( PREDICTORS, function(x) { if (is.logical(x)){
return( (sum(x) <= CUT_OFF | sum(!x) <= CUT_OFF) )
} else {
return(F)
}
} )
if(any(indx_no_info)){
warning(paste0("dropped dummy variable feature(s): ", paste0( gsub("TRUE","",names(indx_no_info[which(indx_no_info)])) , collapse=", "), "; the threshold is defined by the CUT_OFF argument (sum of TRUE / FALSE entries <= ",CUT_OFF,")."),call. = F, immediate. = T)
}
Model = PREDICTORS[,!indx_no_info]
Model$Y = Y
if( family == "gaussian") {
Fitted_model <-  glm(Y~.,family = gaussian(link = "identity"),data = Model)
}
if( family == "binomial") {
Fitted_model <- glm(Y~., family = binomial(link = "logit"),data = Model)
}
if( family == "poisson") {
Fitted_model <- glm(Y~., family = poisson(link = "log"),data = Model)
}
summary_glm <- summary(Fitted_model)
Critical_value <- qnorm((.05/2)/(ncol(Model)),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
library(ggplot2)
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) +
geom_bar(stat = "identity", width = .4, fill = "blue2", colour = "red", size = 0.1) +
geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) +
coord_flip() + facet_grid(~variable,scales = "free") +
theme_classic() +
labs(title = paste0(family, " linear model on genomic features" ),
subtitle = HDER,
x = "predictors")
suppressWarnings( ggsave( paste0(HDER,"_",family,"_glm.pdf"), p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
}
glm_regular(Y,
mcols(rowgr),
"YTHDF1")
debug(glm_regular)
glm_regular(Y,
mcols(rowgr),
"YTHDF1")
glm_regular(Y,
mcols(rowgr),
"YTHDF1")
glm_regular(Y,
mcols(rowgr),
"YTHDF1",
"poisson")
undebug(glm_regular)
glm_regular(Y,
mcols(rowgr),
"YTHDF1",
"poisson")
Y <- countOverlaps(rowgr,example_ythdf1)
rowgr
row_ranges = rowRanges(rowgr)
dir_plot = "./Confidence"
list.files(dir_plot)
RDS_dir <- list.files(dir_plot)
i = RDS_dir[1]
RDS_dir <- gsub(".rds","", list.files(dir_plot))
example_ythdf1 <- readRDS(paste0("./Confidence/",RDS_dir,".rds"))
i = RDS_dir[1]
readRDS(paste0("./Confidence/",RDS_dir,".rds"))
paste0("./Confidence/",RDS_dir,".rds")
example_ythdf1 <- readRDS(paste0("./Confidence/",i,".rds"))
ranges_i <- readRDS(paste0("./Confidence/",i,".rds"))
Y <- countOverlaps(row_ranges,ranges_i)
glm_regular(Y,
mcols(row_ranges),
i,
"poisson")
Plot_dir_poisson_model <- function(row_ranges,dir_plot = "./Confidence") {
RDS_dir <- gsub(".rds","", list.files(dir_plot))
for(i in RDS_dir) {
ranges_i <- readRDS(paste0("./Confidence/",i,".rds"))
Y <- countOverlaps(row_ranges,ranges_i)
glm_regular(Y,
mcols(row_ranges),
i,
"poisson")
}
}
Plot_dir_poisson_model(rowRanges(rowgr), dir_plot = "./Confidence")
Plot_dir_poisson_model(rowRanges(rowgr), dir_plot = "./All")
Plot_dir_poisson_model <- function(row_ranges,dir_plot = "./Confidence") {
RDS_dir <- gsub(".rds","", list.files(dir_plot))
for(i in RDS_dir) {
ranges_i <- readRDS(paste0(dir_plot,"/",i,".rds"))
Y <- countOverlaps(row_ranges,ranges_i)
glm_regular(Y,
mcols(row_ranges),
i,
"poisson")
}
}
Plot_dir_poisson_model(rowRanges(rowgr), dir_plot = "./All")
gr_features <- rowRanges(rowgr)
mcols(gr_features)
gr_features <- rowRanges(rowgr)
mcols(gr_features) <- mcols(gr_features)[,-c("YTHDF1_TREW","YTHDF2_TREW","YTHDF3_TREW")]
gr_features <- rowRanges(rowgr)
mcols(gr_features) <- mcols(gr_features)[,! colnames(mcols(gr_features)) %in% c("YTHDF1_TREW","YTHDF2_TREW","YTHDF3_TREW")]
Plot_dir_poisson_model(rowRanges(rowgr), dir_plot = "./Confidence")
gr_features <- rowRanges(rowgr)
mcols(gr_features) <- mcols(gr_features)[,! colnames(mcols(gr_features)) %in% c("YTHDF1_TREW","YTHDF2_TREW","YTHDF3_TREW")]
Plot_dir_poisson_model(gr_features, dir_plot = "./Confidence")
Y
hist(Y)
hist(Y,breaks = 100)
hist(Y[Y >0],breaks = 100)
YTHDF1_support_num
YTHDF1_support_num = Y
hist(YTHDF1_support_num[YTHDF1_support_num >0],breaks = 100)
YTHDF1_support_num = Y[Y>0]
hist(YTHDF1_support_num[YTHDF1_support_num >0],breaks = 100)
YTHDF1_support_num = Y[Y>0]
hist(YTHDF1_support_num,breaks = 100)
rpois(length(Y),mean(Y))
rpois(length(YTHDF1_support_num),mean(YTHDF1_support_num))
hist(rpois(length(YTHDF1_support_num),mean(YTHDF1_support_num)))
hist(YTHDF1_support_num,breaks = 100)
hist(rpois(length(YTHDF1_support_num),mean(YTHDF1_support_num)))
hist(YTHDF1_support_num,breaks = 100)
knitr::opts_chunk$set(echo = TRUE)
library(golite)
library(magrittr)
library(org.Hs.eg.db)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
all_eids_hg19 <- names(genes(txdb))
set.seed(1)
eids_bg <- sample(all_eids_hg19, 3500)
eids_set <- sample(eids_bg,300)
gose_result1 <- GOEA(gene_set = eids_set,
back_ground = eids_bg,
orgDb = org.Hs.eg.db,
interpret_term = T,
min_gs_count = 10,
max_gs_count = 1000,
GO_Slim = F)
set.seed(1)
eids_bg <- sample(all_eids_hg19, 3500)
eids_set <- lapply(1:100, sample(eids_bg,300))
eids_set <- lapply(1:100, function(x) sample(eids_bg,300))
gose_result1 <- system.time( goea(gene_set = eids_set,
back_ground = eids_bg,
orgDb = org.Hs.eg.db,
interpret_term = T,
min_gs_count = 10,
max_gs_count = 1000,
GO_Slim = F) )
gose_result1
ego <- system.time( enrichGO(gene          = eids_set[[1]],
universe      = eids_bg,
OrgDb         = org.Hs.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 1,
qvalueCutoff  = 1,
readable      = TRUE))
library(clusterProfiler)
ego <- system.time( enrichGO(gene          = eids_set[[1]],
universe      = eids_bg,
OrgDb         = org.Hs.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 1,
qvalueCutoff  = 1,
readable      = TRUE))
ego
25.016 * 100
gose_result1
library(topGO)
ose_result1 <-  goea(gene_set = eids_set[[1]],
back_ground = eids_bg,
orgDb = org.Hs.eg.db,
interpret_term = T,
min_gs_count = 10,
max_gs_count = 1000,
GO_Slim = F)
gose_result1 <-  goea(gene_set = eids_set[[1]],
back_ground = eids_bg,
orgDb = org.Hs.eg.db,
interpret_term = T,
min_gs_count = 10,
max_gs_count = 1000,
GO_Slim = F)
library(clusterProfiler)
ego <- enrichGO(gene          = eids_set[[1]],
universe      = eids_bg,
OrgDb         = org.Hs.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 1,
qvalueCutoff  = 1,
readable      = TRUE)
readable <- as.data.frame(ego)[,c("ID","Description","pvalue")]
head(readable)
head(readable)
head(gose_result1 )
match(gose_result1$ID,readable$ID)
readable$ID
match(as.character( gose_result1$ID),readable$ID)
head(gose_result1)
match(as.character( gose_result1$term),readable$ID)
gose_result1 <-  goea(gene_set = eids_set[[1]],
back_ground = eids_bg,
orgDb = org.Hs.eg.db,
interpret_term = T,
min_gs_count = 1,
max_gs_count = Inf,
GO_Slim = F)
match(as.character( gose_result1$term),readable$ID)
readable$pvalue[ match(as.character( gose_result1$term),readable$ID) ]
plot_df <- data.frame(
pvalue_golite = gose_result1$p
pvalue_cp = readable$pvalue[ match(as.character( gose_result1$term),readable$ID) ] )
plot_df <- data.frame(
pvalue_golite = gose_result1$p,
pvalue_cp = readable$pvalue[ match(as.character( gose_result1$term),readable$ID) ] )
cor.test(plot_df[,1],plot_df[,2])
cor.test(plot_df[,1],plot_df[,2])
gose_result1 <-  goea(gene_set = eids_set[[1]],
back_ground = eids_bg,
orgDb = org.Hs.eg.db,
interpret_term = T,
min_gs_count = 10,
max_gs_count = 500,
GO_Slim = F)
readable <- as.data.frame(ego)[,c("ID","Description","pvalue")]
head(readable)
plot_df <- data.frame(
pvalue_golite = gose_result1$p,
pvalue_cp = readable$pvalue[ match(as.character( gose_result1$term),readable$ID) ] )
cor.test(plot_df[,1],plot_df[,2])
reshape2::melt( plot_df )
reshape2::melt( plot_df )
ggplot( reshape2::melt( plot_df ) , aes(x = variable, y = value)) + geom_point()
ggplot( reshape2::melt( plot_df ) , aes(x = variable, y = value)) + geom_point() + geom_smooth(method = "lm")
ggplot( reshape2::melt( plot_df ) , aes(x = variable, y = value)) + geom_point() + geom_smooth(method = "lm")
ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm")
ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm")
ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm") + theme_bw()
p1 <- ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm") + theme_classic()
ggsave(p1,"contrast.pdf",width = 3, height = 2)
p1 <- ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm") + theme_classic()
ggsave(p1,"contrast.pdf",width = 3, height = 2)
ggsave("contrast.pdf",p1,width = 3, height = 2)
ggsave("contrast.pdf",p1,width = 5, height = 4)
cor.test(plot_df[,1],plot_df[,2])
summary( lm(pvalue_golite ~ pvalue_cp,data = plot_df) )
p1 <- ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm") + theme_classic() + labs(x = "p values cluster profiler", y = "p values GO lite")
p1 <- ggplot( plot_df , aes(x = pvalue_cp, y = pvalue_golite)) + geom_point() + geom_smooth(method = "lm") + theme_classic() + labs(x = "p values cluster profiler", y = "p values golite")
ggsave("contrast.pdf",p1,width = 5, height = 4)
library(m6ALogisticModel)
SE_CQN <- readRDS("SE_CQN_filtered.rds")
Y <- plot_row_joint(SE_CQN,RETURN_INDX = T)
set.seed(1)
Y <- plot_row_joint(SE_CQN,RETURN_INDX = T)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
go_multinomial(Y,
row_ranges = rowRanges(SE_CQN),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
orgDb = org.Hs.eg.db,
HDER = "GO_test",
GO_Slim = T
)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
go_multinomial(Y,
row_ranges = rowRanges(SE_CQN),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
orgDb = org.Hs.eg.db,
HDER = "GO_test",
GO_Slim = T
)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
go_multinomial(Y,
row_ranges = rowRanges(SE_CQN),
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
orgDb = org.Hs.eg.db,
HDER = "GO_test",
GO_Slim = F
)
glm_multinomial(Y,mcols(SE_CQN),"GLM_bg")
knitr::opts_chunk$set(echo = TRUE)
require(wavClusteR)
?fitMixtureModel
