---
title: "GLM analysis"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## GLM modeling and inferences.

###1. Define metrics to find out consistent sites.

```{r}
SE_Learning <- readRDS("SE_Learning.rds")
Assays_SE_Learning <- assays(SE_Learning)[[1]]

Consistency_metric <- function(SE_Learning,COL = "Regulators"){
Indx_consist <- colData(SE_Learning)[[COL]]

ASSAY_LST <- split(
                  split(t( matrix( as.integer( assay(SE_Learning) ), 
                                   ncol = length(Indx_consist))), 
                                 1:length(Indx_consist)),
                   Indx_consist)

Consistent_targeting <- lapply(ASSAY_LST,function(x) {
  Rindx <- Reduce(`+`,x) 
  return_vec <- rep(NA, length(Rindx))
  return_vec[Rindx >= min(2,length(x))] = "Targeted"
  return_vec[Rindx <= max(-2,-1*length(x))] = "Inversed"
  return_vec
  })

for(i in names(Consistent_targeting)) {
tb_i =  table( Consistent_targeting[[ i ]] ) 
cat(paste0(i,": ",names(tb_i),": ",tb_i,"\n"))
}

return(Consistent_targeting)
}

Targets_By_prots <- Consistency_metric(SE_Learning,"Regulators")

Targets_By_types <- Consistency_metric(SE_Learning,"Role")
```

Proteins:
ALKBH5: Inversed: 2578
 ALKBH5: Targeted: 2323
FTO: Inversed: 5655
 FTO: Targeted: 5216
KIAA1429: Inversed: 5646
 KIAA1429: Targeted: 5506
METTL14: Inversed: 5605
 METTL14: Targeted: 5457
METTL16: Inversed: 5647
 METTL16: Targeted: 5568
METTL3: Inversed: 3039
 METTL3: Targeted: 2695
WTAP: Inversed: 3769
 WTAP: Targeted: 3261
 
Roles:
eraser: Inversed: 8819
 eraser: Targeted: 8386
writer: Inversed: 13048
 writer: Targeted: 12918

###2. The GLM function that popularize the target above + model selection.

```{r}
library(Guitar)
Gtcoord_hg19 <- readRDS("/Users/zhenwei/Datasets/Gtcoords/Gtcoord_hg19.rds")

idx_FTO <- Targets_By_prots[["FTO"]]
gr_list <- list(Targeted = rowRanges(SE_Learning)[idx_FTO == "Targeted" & !is.na(idx_FTO)],
                Reversed = rowRanges(SE_Learning)[idx_FTO == "Inversed" & !is.na(idx_FTO)])

GuitarPlot(gr_list,Gtcoord_hg19 ,saveToPDFprefix = "FTO")

idx_WTAP <- Targets_By_prots[["WTAP"]]
gr_list <- list(Targeted = rowRanges(SE_Learning)[idx_WTAP == "Targeted" & !is.na(idx_WTAP)],
                Reversed = rowRanges(SE_Learning)[idx_WTAP == "Inversed" & !is.na(idx_WTAP)])

GuitarPlot(gr_list,Gtcoord_hg19 ,saveToPDFprefix = "WTAP")  


idx_KIAA1429 <- Targets_By_prots[["KIAA1429"]]
gr_list <- list(Targeted = rowRanges(SE_Learning)[idx_KIAA1429 == "Targeted" & !is.na(idx_KIAA1429)],
                Reversed = rowRanges(SE_Learning)[idx_KIAA1429 == "Inversed" & !is.na(idx_KIAA1429)])

GuitarPlot(gr_list,Gtcoord_hg19 ,saveToPDFprefix = "KIAA1429")

idx_KIAA1429 <- assay(SE_Learning)[,which(colData(SE_Learning)$Regulators == "KIAA1429")]
Gr_lst <- list( Targeted = rowRanges(SE_Learning)[idx_KIAA1429 == "1"],
      Reversed = rowRanges(SE_Learning)[idx_KIAA1429 == "-1"])
GuitarPlot(Gr_lst,Gtcoord_hg19 ,saveToPDFprefix = "KIAA1429_original")


idx_eraser <- Targets_By_types[["eraser"]]
gr_list <- list(Targeted = rowRanges(SE_Learning)[idx_eraser == "Targeted" & !is.na(idx_eraser)],
                Reversed = rowRanges(SE_Learning)[idx_eraser == "Inversed" & !is.na(idx_eraser)])

GuitarPlot(gr_list,Gtcoord_hg19 ,saveToPDFprefix = "eraser")  

assays( SE_Learning )[[1]]
```

##Summarized Experiment: Final decision

```{r}
ASSAY_M <- cbind(Reduce(cbind, Targets_By_prots),Reduce(cbind, Targets_By_types))
colnames( ASSAY_M ) = c(names(Targets_By_prots),
                        names(Targets_By_types))
SE_Final <- SummarizedExperiment(ASSAY_M)
rowRanges(SE_Final) = rowRanges(SE_Learning)
saveRDS(SE_Final,"SE_final.rds")
```

##Logistic Modeling  + model selection
We can clear environment variable now.
```{r}
SE_final <- readRDS("SE_final.rds")

LR_analysis <- function(PRED_df, Name, Decision_BAS = "BPM") {
require(BAS)
require(ggplot2)
#Bayesian model selection
set.seed(1)
BAS_2 =  bas.glm(instance ~ ., 
                 family = binomial(link = "logit"),
                   data = as.data.frame(PRED_df),
                   n.models= 2^8,
                   betaprior = robust(),
                   method="MCMC",
                   MCMC.iterations = 20000,
                   modelprior= beta.binomial(1,1)) 

indx_best_model2 <- predict(BAS_2, estimator = Decision_BAS)$bestmodel

colnames(PRED_df)[indx_best_model2+1]

Final_moddel <- glm(instance ~ ., data = PRED_df[,c(indx_best_model2+1)], family = binomial(link = "logit"))

summary_glm <- summary(Final_moddel)

Critical_value <- qnorm((.05/2)/length(indx_best_model2),lower.tail = F)
#Draw a diagram.

plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])

plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value

p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) + geom_bar(stat = "identity", width = .4, fill = "red", colour = "red", size = 0.1) + geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) + coord_flip() + facet_grid(~variable,scales = "free") + theme_classic() + labs(title = "Logistic model on target specificities",subtitle = Name, x = "predictors") 
#the lines indicate the critical values which bonferroni corrected 2 tailed p value < .05

suppressWarnings( ggsave(paste0(Name,"_GLM.pdf"), p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ) )
#Report a table with Bonferroni adjustment.

save_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value","Pr...z..")]
colnames( save_df ) = c("Estimate","z.statistics","pvalue")
save_df$Bf_adj_p = p.adjust(save_df$pvalue,method = "bonferroni")
write.csv(save_df,paste0(Name,"_stat.csv"))
write.csv(plot_df,paste0(Name,"_plot.csv"))
}

for (i in colnames(SE_final)) {
idx_target <- assay( SE_final )[,i]
Predictors_df <- mcols(SE_final)[!is.na(idx_target),]  
Predictors_df$instance <- idx_target[!is.na(idx_target)]  == "Targeted"
Predictors_df = Predictors_df[,c(ncol(Predictors_df),1:(ncol(Predictors_df) - 1))]
LR_analysis(Predictors_df,i,"HPM")
}


```

#To Do 1:
A modular visualization using ggplot2.

- Transcript region.
- Relative position.
- Motif.
- Structure.
- RBP.
- Evolutionary fitness.
- miRNA.
- Gene type.
- Batch.
- Intercept.

Visualize Z statistics (positive and negative).

Ones not selected by model selection is nothing (or cross?).

GGplot2

Method2:
many little blocks (heatmap).
no color indicate not selected.
Other wise z score very low.

Heatmap2 + illustrator


#ToDo 2:

##Any way... I should test at least 2 additional metrics:

###1.Fisher's method on un-adjusted p values


###2.Scores
1 class forward
0 not significant
-2 class inverse

>=2 Calss significant

###3.QNB
QNB newest version might be better then DESeq2.

###GGPlot2 
```{r}
#Construct Plot dataframe
Reg_names <- grep( "_plot.csv", list.files() , value = T)
Plot_lst <- lapply(Reg_names,read.csv)
names( Plot_lst ) = gsub( "_plot.csv",
                          "", 
                          Reg_names )
Predictors <- c("Intercept" , gsub("_", " ", colnames(mcols(SE_Learning)) ))

PLOT_DF = data.frame(
  Predictors = rep(Predictors,length(Plot_lst)),
     Regulators = factor( rep(names( Plot_lst ), 
                      each = length(Predictors)) , 
                      levels = c("WTAP","METTL3","METTL14","KIAA1429","METTL16","ALKBH5","FTO","eraser","writer"))
                     )

PLOT_DF$Group = NA
PLOT_DF$Group[PLOT_DF$Predictors %in% c("CDS","UTR5","UTR3","Start codons","Stop codons","Last exons 50bp","m6Am")] = "Transcript region"
PLOT_DF$Group[PLOT_DF$Predictors %in% c("Pos Tx","Pos UTR5","Pos CDS","Pos UTR3", "Pos exons")] = "Relative position"
PLOT_DF$Group[PLOT_DF$Predictors %in% c("Gene length all","Gene length ex","long exon","long UTR3")] = "Region length"
PLOT_DF$Group[PLOT_DF$Predictors %in% c("Struc hybridize","Struc loop")] = "Structure"
PLOT_DF$Group[PLOT_DF$Predictors %in% c("AAACA","AAACC","AAACT","AGACA","AGACC","AGACT","GAACA","GAACC","GAACT","GGACA","GGACC","GGACT")] = "Motif"
PLOT_DF$Group[PLOT_DF$Predictors %in% c("FC 1nt","FC 5nt","PC 1nt","PC 201nt")] = "Evolution"
PLOT_DF$Group[PLOT_DF$Predictors %in% c("HNRNPC eCLIP","YTHDC1 TREW","YTHDF1 TREW","YTHDF2 TREW","miR targeted genes","miRanda","TargetScan","Verified miRtargets")] = "miRNA & RBP"
PLOT_DF$Group[PLOT_DF$Predictors %in% c("lncRNA","sncRNA","Isoform num","HK genes")] = "Gene attribure"
PLOT_DF$Group[PLOT_DF$Predictors %in% c("GC cont 101bp","GC cont genes","Intercept")] = "Batch"

PLOT_DF$Group = factor(PLOT_DF$Group, levels = c("Transcript region","Relative position","Region length","Structure","Motif","Evolution","miRNA & RBP","Gene attribure","Batch"))

PLOT_DF$z.statistics = 0
PLOT_DF$Cv = NA

for (i in names( Plot_lst )) {
Plot_df_i <- Plot_lst[[i]]
Plot_df_i <- Plot_df_i[Plot_df_i$variable == "z.value",]
idx <- match(Plot_df_i$X_lab, PLOT_DF$Predictors[PLOT_DF$Regulators == i])
PLOT_DF$z.statistics[idx + min(which(PLOT_DF$Regulators == i)) - 1] <- Plot_df_i$value
PLOT_DF$Cv1[which(PLOT_DF$Regulators == i)] <- Plot_df_i$Cv[1]
PLOT_DF$Cv2[which(PLOT_DF$Regulators == i)] <- Plot_df_i$Cv[2]
}

PLOT_DF$Direction = "Not selected"
PLOT_DF$Direction[PLOT_DF$z.statistics > 0] = "Positive" 
PLOT_DF$Direction[PLOT_DF$z.statistics < 0] = "Negative" 

PLOT_DF$ABS_Z = abs(PLOT_DF$z.statistics)

Z_STAT <- ggplot(PLOT_DF,aes(x = Predictors, y = ABS_Z)) + geom_bar(stat = "identity", width = .5, colour = 0, aes(fill = Direction)) + facet_grid(Group ~ Regulators,scales = "free",space = "free_y") + coord_flip() + theme_linedraw() + geom_hline(aes(yintercept = Cv1), alpha = .5, linetype = 2, size = .35) + 
  theme(panel.grid.minor.x = element_line(linetype = 0),
        panel.grid.minor.y = element_line(colour = "grey90"),
        panel.grid.major.x = element_line(colour = "grey90"),
        panel.grid.major.y = element_line(colour = "grey90")) + labs(y = "abs(z.satistics)") + scale_fill_brewer(palette = "Dark2")

ggsave("z_bar.pdf",Z_STAT,width = 15,height = 12.5)
```

- Transcript region.
- Relative position.
- Motif.
- Structure.
- RBP.
- Evolutionary fitness.
- miRNA.
- Gene type.
- Batch.
- Intercept.

###ggplot2 dot
- Skip

###Heatmap2
- With columns clustering. (save it...)

###Tommorrow

- Examine individual FTO datasets.... including 3T3L1



